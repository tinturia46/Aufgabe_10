/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("Fusee.Base.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Base");
JSIL.DeclareNamespace("Fusee.Base.Common");
/* class Fusee.Base.Common.InjectMeAttribute */ 

(function InjectMeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Attribute)) ();
  };


  function InjectMeAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Attribute"), 
      Name: "Fusee.Base.Common.InjectMeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InjectMeAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm15.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

/* struct Fusee.Base.Common.ColorUint */ 

(function ColorUint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Fusee.Math.Core.float4)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.UInt32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm15.System.Single))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.ArgumentOutOfRangeException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm15.System.Byte))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.IFormatProvider)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [$asm15.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [$asm15.TypeRef("System.UInt32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentOutOfRangeException"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [
        $asm15.TypeRef("System.Byte"), $asm15.TypeRef("System.Byte"), 
        $asm15.TypeRef("System.Byte"), $asm15.TypeRef("System.Byte")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [$asm15.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [$asm15.TypeRef("System.UInt32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float4"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.String"), [$asm15.TypeRef("System.IFormatProvider")]))) ();
  };


  function ColorUint__ctor$00 (value) {
    this.B = (value | 0);
    this.G = (value | 0);
    this.R = (value | 0);
    this.A = (value | 0);
  }; 

  function ColorUint__ctor$01 (value) {
    this.A = this.R = this.G = this.B = ($thisType.ToByte(value) | 0);
  }; 

  function ColorUint__ctor$02 (red, green, blue, alpha) {
    this.R = (red | 0);
    this.G = (green | 0);
    this.B = (blue | 0);
    this.A = (alpha | 0);
  }; 

  function ColorUint__ctor$03 (red, green, blue, alpha) {
    this.R = ($thisType.ToByte(red) | 0);
    this.G = ($thisType.ToByte(green) | 0);
    this.B = ($thisType.ToByte(blue) | 0);
    this.A = ($thisType.ToByte(alpha) | 0);
  }; 

  function ColorUint__ctor$04 (value) {
    this.R = ($thisType.ToByte(value.x) | 0);
    this.G = ($thisType.ToByte(value.y) | 0);
    this.B = ($thisType.ToByte(value.z) | 0);
    this.A = ($thisType.ToByte(value.w) | 0);
  }; 

  function ColorUint__ctor$05 (value, alpha) {
    this.R = ($thisType.ToByte(value.x) | 0);
    this.G = ($thisType.ToByte(value.y) | 0);
    this.B = ($thisType.ToByte(value.z) | 0);
    this.A = ($thisType.ToByte(alpha) | 0);
  }; 

  function ColorUint__ctor$06 (rgba) {
    this.A = (((rgba >>> 0) >>> 24) & 255 & 0xFF);
    this.B = (((rgba >>> 0) >>> 16) & 255 & 0xFF);
    this.G = (((rgba >>> 0) >>> 8) & 255 & 0xFF);
    this.R = ((rgba >>> 0) & 255 & 0xFF);
  }; 

  function ColorUint__ctor$07 (rgba) {
    this.A = (((rgba | 0) >> 24) & 255 & 0xFF);
    this.B = (((rgba | 0) >> 16) & 255 & 0xFF);
    this.G = (((rgba | 0) >> 8) & 255 & 0xFF);
    this.R = ((rgba | 0) & 255 & 0xFF);
  }; 

  function ColorUint__ctor$08 (values) {
    if (values === null) {
      throw $S02().Construct("values");
    }
    var flag2 = ((values.length | 0) !== 3) && 
    ((values.length | 0) !== 4);
    if (flag2) {
      throw $S03().Construct("values", "There must be three or four input values for ColorUint.");
    }
    this.R = ($thisType.ToByte(values[0]) | 0);
    this.G = ($thisType.ToByte(values[1]) | 0);
    this.B = ($thisType.ToByte(values[2]) | 0);
    var flag3 = (values.length | 0) > 3;
    if (flag3) {
      this.A = ($thisType.ToByte(values[3]) | 0);
    } else {
      this.A = 255;
    }
  }; 

  function ColorUint__ctor$09 (values) {
    if (values === null) {
      throw $S02().Construct("values");
    }
    var flag2 = ((values.length | 0) !== 3) && 
    ((values.length | 0) !== 4);
    if (flag2) {
      throw $S03().Construct("values", "There must be three or four input values for ColorUint.");
    }
    this.R = (values[0] | 0);
    this.G = (values[1] | 0);
    this.B = (values[2] | 0);
    var flag3 = (values.length | 0) > 3;
    if (flag3) {
      this.A = (values[3] | 0);
    } else {
      this.A = 255;
    }
  }; 

  function ColorUint__ctor$0A (copyFrom, index, noAlpha) {
    if (copyFrom === null) {
      throw $S02().Construct("copyFrom");
    }
    var flag2 = (copyFrom.length | 0) < (((index | 0) + ((
        noAlpha
           ? 3
           : 4)
       | 0)) | 0);
    if (flag2) {
      throw $S03().Construct("copyFrom", "Not enough pixel data to copy from given index.");
    }
    this.R = (copyFrom[index] | 0);
    this.G = (copyFrom[(((index | 0) + 1) | 0)] | 0);
    this.B = (copyFrom[(((index | 0) + 2) | 0)] | 0);
    if (noAlpha) {
      this.A = 255;
    } else {
      this.A = (copyFrom[(((index | 0) + 3) | 0)] | 0);
    }
  }; 

  function ColorUint_Add$0B (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = (((left.get().A | 0) + (right.get().A | 0)) & 0xFF);
    result.get().R = (((left.get().R | 0) + (right.get().R | 0)) & 0xFF);
    result.get().G = (((left.get().G | 0) + (right.get().G | 0)) & 0xFF);
    result.get().B = (((left.get().B | 0) + (right.get().B | 0)) & 0xFF);
  }; 

  function ColorUint_Add$0C (left, right) {
    return $S04().Construct(+((left.R | 0) + (right.R | 0)), +((left.G | 0) + (right.G | 0)), +((left.B | 0) + (right.B | 0)), +((left.A | 0) + (right.A | 0)));
  }; 

  function ColorUint_AdjustContrast$0D (/* ref */ value, contrast, /* ref */ result) {
    result.get().A = (value.get().A | 0);
    result.get().R = ($thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.get().R) / 255)) - 0.5)))) | 0);
    result.get().G = ($thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.get().G) / 255)) - 0.5)))) | 0);
    result.get().B = ($thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.get().B) / 255)) - 0.5)))) | 0);
  }; 

  function ColorUint_AdjustContrast$0E (value, contrast) {
    return $S05().Construct($thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.R) / 255)) - 0.5)))), $thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.G) / 255)) - 0.5)))), $thisType.ToByte(Math.fround(0.5 + (contrast * (+((+(value.B) / 255)) - 0.5)))), value.A);
  }; 

  function ColorUint_AdjustSaturation$0F (/* ref */ value, saturation, /* ref */ result) {
    var num = Math.fround(((+((+(value.get().R) / 255)) * 0.212500005960464) + (+((+(value.get().G) / 255)) * 0.715399980545044)) + (+((+(value.get().B) / 255)) * 0.0720999985933304));
    result.get().A = (value.get().A | 0);
    result.get().R = ($thisType.ToByte(num + (+saturation * (+((+(value.get().R) / 255)) - num))) | 0);
    result.get().G = ($thisType.ToByte(num + (+saturation * (+((+(value.get().G) / 255)) - num))) | 0);
    result.get().B = ($thisType.ToByte(num + (+saturation * (+((+(value.get().B) / 255)) - num))) | 0);
  }; 

  function ColorUint_AdjustSaturation$10 (value, saturation) {
    var num = Math.fround(((+((+(value.R) / 255)) * 0.212500005960464) + (+((+(value.G) / 255)) * 0.715399980545044)) + (+((+(value.B) / 255)) * 0.0720999985933304));
    return $S05().Construct($thisType.ToByte(num + (+saturation * (+((+(value.R) / 255)) - num))), $thisType.ToByte(num + (+saturation * (+((+(value.G) / 255)) - num))), $thisType.ToByte(num + (+saturation * (+((+(value.B) / 255)) - num))), value.A);
  }; 

  function ColorUint_Clamp$11 (/* ref */ value, /* ref */ min, /* ref */ max, /* ref */ result) {
    var a = (value.get().A | 0);
    var b = ((
      (a > (max.get().A | 0))
         ? max.get().A
         : a)
     | 0);
    var alpha = ((
      (b < (min.get().A | 0))
         ? min.get().A
         : b)
     | 0);
    var r = (value.get().R | 0);
    var b2 = ((
      (r > (max.get().R | 0))
         ? max.get().R
         : r)
     | 0);
    var red = ((
      (b2 < (min.get().R | 0))
         ? min.get().R
         : b2)
     | 0);
    var g = (value.get().G | 0);
    var b3 = ((
      (g > (max.get().G | 0))
         ? max.get().G
         : g)
     | 0);
    var green = ((
      (b3 < (min.get().G | 0))
         ? min.get().G
         : b3)
     | 0);
    var b4 = (value.get().B | 0);
    var b5 = ((
      (b4 > (max.get().B | 0))
         ? max.get().B
         : b4)
     | 0);
    var blue = ((
      (b5 < (min.get().B | 0))
         ? min.get().B
         : b5)
     | 0);
    result.set($S05().Construct(red, green, blue, alpha));
  }; 

  function ColorUint_Clamp$12 ($value, $min, $max) {
    var max = new JSIL.BoxedVariable($max.MemberwiseClone());
    var min = new JSIL.BoxedVariable($min.MemberwiseClone());
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Clamp(/* ref */ value, /* ref */ min, /* ref */ max, /* ref */ result);
    return result.get();
  }; 

  function ColorUint_Equals$13 (other) {
    var flag = !(((this.R | 0) !== (other.R | 0)) || 
      ((this.G | 0) !== (other.G | 0))) && 
    ((this.B | 0) === (other.B | 0));
    return (flag && ((this.A | 0) === (other.A | 0)));
  }; 

  function ColorUint_Object_Equals (value) {
    var flag = (value === null) || 
    (JSIL.GetType(value) !== $thisType.__Type__);
    return (!flag && this.Equals($thisType.$Cast(value)));
  }; 

  function ColorUint_FromBgra$14 (color) {
    return $S05().Construct((((color | 0) >> 16) & 255 & 0xFF), (((color | 0) >> 8) & 255 & 0xFF), ((color | 0) & 255 & 0xFF), (((color | 0) >> 24) & 255 & 0xFF));
  }; 

  function ColorUint_FromBgra$15 (color) {
    return $S00().CallStatic($thisType, "FromBgra", null, (color | 0));
  }; 

  function ColorUint_FromRgba$16 (color) {
    return $S06().Construct(color);
  }; 

  function ColorUint_FromRgba$17 (color) {
    return $S07().Construct(color);
  }; 

  function ColorUint_get_Item (index) {
    switch (index) {
      case 0: 
        var result = (this.R | 0);
        break;

      case 1: 
        result = (this.G | 0);
        break;

      case 2: 
        result = (this.B | 0);
        break;

      case 3: 
        result = (this.A | 0);
        break;

      default: 
        throw $S03().Construct("index", "Indices for ColorUint run from 0 to 3, inclusive.");

    }
    return result;
  }; 

  function ColorUint_GetBrightness () {
    var num = +((+(this.R) / 255));
    var num2 = +((+(this.G) / 255));
    var num3 = +((+(this.B) / 255));
    var num4 = num;
    var num5 = num;
    var flag = num2 > +(this.A);
    if (flag) {
      num4 = num2;
    }
    var flag2 = num3 > +(this.A);
    if (flag2) {
      num4 = num3;
    }
    var flag3 = num2 < +(this.B);
    if (flag3) {
      num5 = num2;
    }
    var flag4 = num3 < +(this.B);
    if (flag4) {
      num5 = num3;
    }
    return Math.fround(+((num4 + num5) / 2));
  }; 

  function ColorUint_GetHashCode () {
    return (((((((JSIL.ObjectHashCode(this.A, false)) + (JSIL.ObjectHashCode(this.R, false))) | 0) + (JSIL.ObjectHashCode(this.G, false))) | 0) + (JSIL.ObjectHashCode(this.B, false))) | 0);
  }; 

  function ColorUint_GetHue () {
    if (((this.R | 0) === (this.G | 0)) && ((this.G | 0) === (this.B | 0))) {
      var result = 0;
    } else {
      var num = +((+(this.R) / 255));
      var num2 = +((+(this.G) / 255));
      var num3 = +((+(this.B) / 255));
      var num4 = 0;
      var num5 = num;
      var num6 = num;
      var flag2 = num2 > num5;
      if (flag2) {
        num5 = num2;
      }
      var flag3 = num3 > num5;
      if (flag3) {
        num5 = num3;
      }
      var flag4 = num2 < num6;
      if (flag4) {
        num6 = num2;
      }
      var flag5 = num3 < num6;
      if (flag5) {
        num6 = num3;
      }
      var num7 = num5 - num6;
      var flag6 = num === num5;
      if (flag6) {
        num4 = +(((num2 - num3) / num7));
      } else {
        var flag7 = num2 === num5;
        if (flag7) {
          num4 = Math.fround(2 + +(((num3 - num) / num7)));
        } else {
          var flag8 = num3 === num5;
          if (flag8) {
            num4 = Math.fround(4 + +(((num - num2) / num7)));
          }
        }
      }
      var num8 = num4 * 60;
      var flag9 = num8 < 0;
      if (flag9) {
        num8 += 360;
      }
      result = num8;
    }
    return result;
  }; 

  function ColorUint_GetSaturation () {
    var num = +((+(this.R) / 255));
    var num2 = +((+(this.G) / 255));
    var num3 = +((+(this.B) / 255));
    var result = 0;
    var num4 = num;
    var num5 = num;
    var flag = num2 > num4;
    if (flag) {
      num4 = num2;
    }
    var flag2 = num3 > num4;
    if (flag2) {
      num4 = num3;
    }
    var flag3 = num2 < num5;
    if (flag3) {
      num5 = num2;
    }
    var flag4 = num3 < num5;
    if (flag4) {
      num5 = num3;
    }
    var flag5 = num4 !== num5;
    if (flag5) {
      result = +(
        (+(((num4 + num5) / 2)) > 0.5)
           ? Math.fround(+((num4 - num5) / ((2 - num4) - num5)))
           : Math.fround(+((num4 - num5) / (num4 + num5))))
      ;
    }
    return result;
  }; 

  function ColorUint_Lerp$18 (/* ref */ start, /* ref */ end, amount, /* ref */ result) {
    result.get().A = ((+(start.get().A) + (amount * +((end.get().A | 0) - (start.get().A | 0)))) | 0);
    result.get().R = ((+(start.get().R) + (amount * +((end.get().R | 0) - (start.get().R | 0)))) | 0);
    result.get().G = ((+(start.get().G) + (amount * +((end.get().G | 0) - (start.get().G | 0)))) | 0);
    result.get().B = ((+(start.get().B) + (amount * +((end.get().B | 0) - (start.get().B | 0)))) | 0);
  }; 

  function ColorUint_Lerp$19 (start, end, amount) {
    return $S05().Construct(((+(start.R) + (amount * +((end.R | 0) - (start.R | 0)))) | 0), ((+(start.G) + (amount * +((end.G | 0) - (start.G | 0)))) | 0), ((+(start.B) + (amount * +((end.B | 0) - (start.B | 0)))) | 0), ((+(start.A) + (amount * +((end.A | 0) - (start.A | 0)))) | 0));
  }; 

  function ColorUint_Max$1A (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((
      ((left.get().A | 0) > (right.get().A | 0))
         ? left.get().A
         : right.get().A)
     | 0);
    result.get().R = ((
      ((left.get().R | 0) > (right.get().R | 0))
         ? left.get().R
         : right.get().R)
     | 0);
    result.get().G = ((
      ((left.get().G | 0) > (right.get().G | 0))
         ? left.get().G
         : right.get().G)
     | 0);
    result.get().B = ((
      ((left.get().B | 0) > (right.get().B | 0))
         ? left.get().B
         : right.get().B)
     | 0);
  }; 

  function ColorUint_Max$1B ($left, $right) {
    var right = new JSIL.BoxedVariable($right.MemberwiseClone());
    var left = new JSIL.BoxedVariable($left.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Max(/* ref */ left, /* ref */ right, /* ref */ result);
    return result.get();
  }; 

  function ColorUint_Min$1C (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((
      ((left.get().A | 0) < (right.get().A | 0))
         ? left.get().A
         : right.get().A)
     | 0);
    result.get().R = ((
      ((left.get().R | 0) < (right.get().R | 0))
         ? left.get().R
         : right.get().R)
     | 0);
    result.get().G = ((
      ((left.get().G | 0) < (right.get().G | 0))
         ? left.get().G
         : right.get().G)
     | 0);
    result.get().B = ((
      ((left.get().B | 0) < (right.get().B | 0))
         ? left.get().B
         : right.get().B)
     | 0);
  }; 

  function ColorUint_Min$1D ($left, $right) {
    var right = new JSIL.BoxedVariable($right.MemberwiseClone());
    var left = new JSIL.BoxedVariable($left.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Min(/* ref */ left, /* ref */ right, /* ref */ result);
    return result.get();
  }; 

  function ColorUint_Modulate$1E (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((+(+((left.get().A | 0) * (right.get().A | 0)) / 255)) | 0);
    result.get().R = ((+(+((left.get().R | 0) * (right.get().R | 0)) / 255)) | 0);
    result.get().G = ((+(+((left.get().G | 0) * (right.get().G | 0)) / 255)) | 0);
    result.get().B = ((+(+((left.get().B | 0) * (right.get().B | 0)) / 255)) | 0);
  }; 

  function ColorUint_Modulate$1F (left, right) {
    return $S04().Construct(+((left.R | 0) * (right.R | 0)), +((left.G | 0) * (right.G | 0)), +((left.B | 0) * (right.B | 0)), +((left.A | 0) * (right.A | 0)));
  }; 

  function ColorUint_Negate$20 (/* ref */ value, /* ref */ result) {
    result.get().A = (((255 - (value.get().A | 0)) | 0) & 0xFF);
    result.get().R = (((255 - (value.get().R | 0)) | 0) & 0xFF);
    result.get().G = (((255 - (value.get().G | 0)) | 0) & 0xFF);
    result.get().B = (((255 - (value.get().B | 0)) | 0) & 0xFF);
  }; 

  function ColorUint_Negate$21 (value) {
    return $S04().Construct(+(255 - (value.R | 0)), +(255 - (value.G | 0)), +(255 - (value.B | 0)), +(255 - (value.A | 0)));
  }; 

  function ColorUint_op_Addition (left, right) {
    return $S04().Construct(+((left.R | 0) + (right.R | 0)), +((left.G | 0) + (right.G | 0)), +((left.B | 0) + (right.B | 0)), +((left.A | 0) + (right.A | 0)));
  }; 

  function ColorUint_op_Equality (left, right) {
    return left.Equals(right);
  }; 

  function ColorUint_op_Explicit$22 (value) {
    return $S08().Construct(+((+(value.R) / 255)), +((+(value.G) / 255)), +((+(value.B) / 255)));
  }; 

  function ColorUint_op_Explicit$23 (value) {
    return $S09().Construct(+((+(value.R) / 255)), +((+(value.G) / 255)), +((+(value.B) / 255)), +((+(value.A) / 255)));
  }; 

  function ColorUint_op_Explicit$24 (value) {
    return $S04().Construct(value.x, value.y, value.z, 1);
  }; 

  function ColorUint_op_Explicit$25 (value) {
    return $S04().Construct(value.x, value.y, value.z, value.w);
  }; 

  function ColorUint_op_Explicit$26 (value) {
    return (value.ToRgba() >>> 0);
  }; 

  function ColorUint_op_Explicit$27 (value) {
    return $S07().Construct(value);
  }; 

  function ColorUint_op_Explicit$28 (value) {
    return value.ToRgba();
  }; 

  function ColorUint_op_Explicit$29 (value) {
    return $S06().Construct(value);
  }; 

  function ColorUint_op_Inequality (left, right) {
    return !left.Equals(right);
  }; 

  function ColorUint_op_Multiply$2A (scale, value) {
    return $S05().Construct(((+(value.R) * scale) | 0), ((+(value.G) * scale) | 0), ((+(value.B) * scale) | 0), ((+(value.A) * scale) | 0));
  }; 

  function ColorUint_op_Multiply$2B (value, scale) {
    return $S05().Construct(((+(value.R) * scale) | 0), ((+(value.G) * scale) | 0), ((+(value.B) * scale) | 0), ((+(value.A) * scale) | 0));
  }; 

  function ColorUint_op_Multiply$2C (left, right) {
    return $S05().Construct(((+(+((left.R | 0) * (right.R | 0)) / 255)) | 0), ((+(+((left.G | 0) * (right.G | 0)) / 255)) | 0), ((+(+((left.B | 0) * (right.B | 0)) / 255)) | 0), ((+(+((left.A | 0) * (right.A | 0)) / 255)) | 0));
  }; 

  function ColorUint_op_Subtraction (left, right) {
    return $S04().Construct(+((left.R | 0) - (right.R | 0)), +((left.G | 0) - (right.G | 0)), +((left.B | 0) - (right.B | 0)), +((left.A | 0) - (right.A | 0)));
  }; 

  function ColorUint_op_UnaryNegation (value) {
    return $S04().Construct(+(-+(value.R)), +(-+(value.G)), +(-+(value.B)), +(-+(value.A)));
  }; 

  function ColorUint_op_UnaryPlus (value) {
    return value;
  }; 

  function ColorUint_Scale$2D (/* ref */ value, scale, /* ref */ result) {
    result.get().A = ((+(value.get().A) * scale) | 0);
    result.get().R = ((+(value.get().R) * scale) | 0);
    result.get().G = ((+(value.get().G) * scale) | 0);
    result.get().B = ((+(value.get().B) * scale) | 0);
  }; 

  function ColorUint_Scale$2E (value, scale) {
    return $S05().Construct(((+(value.R) * scale) | 0), ((+(value.G) * scale) | 0), ((+(value.B) * scale) | 0), ((+(value.A) * scale) | 0));
  }; 

  function ColorUint_set_Item (index, value) {
    switch (index) {
      case 0: 
        this.R = (value | 0);
        break;

      case 1: 
        this.G = (value | 0);
        break;

      case 2: 
        this.B = (value | 0);
        break;

      case 3: 
        this.A = (value | 0);
        break;

      default: 
        throw $S03().Construct("index", "Indices for ColorUint run from 0 to 3, inclusive.");

    }
  }; 

  function ColorUint_SmoothStep$2F (/* ref */ start, /* ref */ end, amount, /* ref */ result) {
    amount = +(
      (amount > 1)
         ? 1
         : (
          (amount < 0)
             ? 0
             : amount)
    )
    ;
    amount = Math.fround((amount * amount) * (3 - (2 * amount)));
    result.get().A = ((+(start.get().A) + (+((end.get().A | 0) - (start.get().A | 0)) * amount)) | 0);
    result.get().R = ((+(start.get().R) + (+((end.get().R | 0) - (start.get().R | 0)) * amount)) | 0);
    result.get().G = ((+(start.get().G) + (+((end.get().G | 0) - (start.get().G | 0)) * amount)) | 0);
    result.get().B = ((+(start.get().B) + (+((end.get().B | 0) - (start.get().B | 0)) * amount)) | 0);
  }; 

  function ColorUint_SmoothStep$30 (start, end, amount) {
    amount = +(
      (amount > 1)
         ? 1
         : (
          (amount < 0)
             ? 0
             : amount)
    )
    ;
    amount = Math.fround((amount * amount) * (3 - (2 * amount)));
    return $S05().Construct(((+(start.R) + (+((end.R | 0) - (start.R | 0)) * amount)) | 0), ((+(start.G) + (+((end.G | 0) - (start.G | 0)) * amount)) | 0), ((+(start.B) + (+((end.B | 0) - (start.B | 0)) * amount)) | 0), ((+(start.A) + (+((end.A | 0) - (start.A | 0)) * amount)) | 0));
  }; 

  function ColorUint_Subtract$31 (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = (((left.get().A | 0) - (right.get().A | 0)) & 0xFF);
    result.get().R = (((left.get().R | 0) - (right.get().R | 0)) & 0xFF);
    result.get().G = (((left.get().G | 0) - (right.get().G | 0)) & 0xFF);
    result.get().B = (((left.get().B | 0) - (right.get().B | 0)) & 0xFF);
  }; 

  function ColorUint_Subtract$32 (left, right) {
    return $S04().Construct(+((left.R | 0) - (right.R | 0)), +((left.G | 0) - (right.G | 0)), +((left.B | 0) - (right.B | 0)), +((left.A | 0) - (right.A | 0)));
  }; 

  function ColorUint_ToArray () {
    return JSIL.Array.New($T00(), [this.R, this.G, this.B, this.A]);
  }; 

  function ColorUint_ToBgra () {
    return ((((this.B | 0) | ((this.G | 0) << 8)) | ((this.R | 0) << 16)) | ((this.A | 0) << 24));
  }; 

  function ColorUint_ToByte (component) {
    var num = ((component * 255) | 0);
    return (
      (num < 0)
         ? 0
         : (
          (num > 255)
             ? 255
             : (num & 0xFF))
    )
    ;
  }; 

  function ColorUint_ToCss () {
    return $T0C().Format("#{0:X2}{1:X2}{2:X2}", JSIL.Array.New($T0B(), [$T00().$Box(this.R), $T00().$Box(this.G), $T00().$Box(this.B)]));
  }; 

  function ColorUint_Tofloat3 () {
    return $S08().Construct(+((+(this.R) / 255)), +((+(this.G) / 255)), +((+(this.B) / 255)));
  }; 

  function ColorUint_Tofloat4 () {
    return $S09().Construct(+((+(this.R) / 255)), +((+(this.G) / 255)), +((+(this.B) / 255)), +((+(this.A) / 255)));
  }; 

  function ColorUint_ToRgba () {
    return ((((this.R | 0) | ((this.G | 0) << 8)) | ((this.B | 0) << 16)) | ((this.A | 0) << 24));
  }; 

  function ColorUint_toString$33 () {
    return $T0C().Format("A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0B(), [$T00().$Box(this.A), $T00().$Box(this.R), $T00().$Box(this.G), $T00().$Box(this.B)]));
  }; 

  function ColorUint_ToString$34 (format) {
    if (format === null) {
      var result = this.toString();
    } else {
      result = $T0C().Format("A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0B(), [$T00().__Type__.__PublicInterface__.$ToString(this.A, format, null), $T00().__Type__.__PublicInterface__.$ToString(this.R, format, null), $T00().__Type__.__PublicInterface__.$ToString(this.G, format, null), $T00().__Type__.__PublicInterface__.$ToString(this.B, format, null)]));
    }
    return result;
  }; 

  function ColorUint_ToString$35 (formatProvider) {
    return $T0C().Format(formatProvider, "A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0B(), [$T00().$Box(this.A), $T00().$Box(this.R), $T00().$Box(this.G), $T00().$Box(this.B)]));
  }; 

  function ColorUint_ToString$36 (format, formatProvider) {
    if (format === null) {
      var result = $S0A().CallVirtual("ToString", null, this, formatProvider);
    } else {
      result = $T0C().Format(formatProvider, "A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0B(), [$T00().__Type__.__PublicInterface__.$ToString(this.A, format, formatProvider), $T00().__Type__.__PublicInterface__.$ToString(this.R, format, formatProvider), $T00().__Type__.__PublicInterface__.$ToString(this.G, format, formatProvider), $T00().__Type__.__PublicInterface__.$ToString(this.B, format, formatProvider)]));
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Base.Common.ColorUint", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
      SizeBytes: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Byte), 
      ColorUint__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single), 
      ColorUint__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Byte, $.Byte
        ]), 
      ColorUint__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      ColorUint__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float4")), 
      ColorUint__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float3"), $.Single]), 
      ColorUint__ctor$05
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32), 
      ColorUint__ctor$06
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ColorUint__ctor$07
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      ColorUint__ctor$08
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      ColorUint__ctor$09
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Boolean
        ]), 
      ColorUint__ctor$0A
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Add$0B
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_Add$0C
    );

    $.Method({Static:true , Public:true }, "AdjustContrast", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_AdjustContrast$0D
    );

    $.Method({Static:true , Public:true }, "AdjustContrast", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      ColorUint_AdjustContrast$0E
    );

    $.Method({Static:true , Public:true }, "AdjustSaturation", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_AdjustSaturation$0F
    );

    $.Method({Static:true , Public:true }, "AdjustSaturation", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      ColorUint_AdjustSaturation$10
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Clamp$11
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ]), 
      ColorUint_Clamp$12
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      ColorUint_Equals$13
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      ColorUint_Object_Equals
    );

    $.Method({Static:true , Public:true }, "FromBgra", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      ColorUint_FromBgra$14
    );

    $.Method({Static:true , Public:true }, "FromBgra", 
      new JSIL.MethodSignature($.Type, [$.UInt32]), 
      ColorUint_FromBgra$15
    );

    $.Method({Static:true , Public:true }, "FromRgba", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      ColorUint_FromRgba$16
    );

    $.Method({Static:true , Public:true }, "FromRgba", 
      new JSIL.MethodSignature($.Type, [$.UInt32]), 
      ColorUint_FromRgba$17
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int32]), 
      ColorUint_get_Item
    );

    $.Method({Static:false, Public:true }, "GetBrightness", 
      JSIL.MethodSignature.Return($.Single), 
      ColorUint_GetBrightness
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      ColorUint_GetHashCode
    );

    $.Method({Static:false, Public:true }, "GetHue", 
      JSIL.MethodSignature.Return($.Single), 
      ColorUint_GetHue
    );

    $.Method({Static:false, Public:true }, "GetSaturation", 
      JSIL.MethodSignature.Return($.Single), 
      ColorUint_GetSaturation
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Lerp$18
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      ColorUint_Lerp$19
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Max$1A
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_Max$1B
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Min$1C
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_Min$1D
    );

    $.Method({Static:true , Public:true }, "Modulate", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Modulate$1E
    );

    $.Method({Static:true , Public:true }, "Modulate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_Modulate$1F
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      ColorUint_Negate$20
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      ColorUint_Negate$21
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      ColorUint_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$.Type]), 
      ColorUint_op_Explicit$22
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float4"), [$.Type]), 
      ColorUint_op_Explicit$23
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("Fusee.Math.Core.float3")]), 
      ColorUint_op_Explicit$24
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("Fusee.Math.Core.float4")]), 
      ColorUint_op_Explicit$25
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type]), 
      ColorUint_op_Explicit$26
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32]), 
      ColorUint_op_Explicit$27
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      ColorUint_op_Explicit$28
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      ColorUint_op_Explicit$29
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      ColorUint_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type]), 
      ColorUint_op_Multiply$2A
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      ColorUint_op_Multiply$2B
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_op_Multiply$2C
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      ColorUint_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      ColorUint_op_UnaryPlus
    );

    $.Method({Static:true , Public:true }, "Scale", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Scale$2D
    );

    $.Method({Static:true , Public:true }, "Scale", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      ColorUint_Scale$2E
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte]), 
      ColorUint_set_Item
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_SmoothStep$2F
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      ColorUint_SmoothStep$30
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      ColorUint_Subtract$31
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      ColorUint_Subtract$32
    );

    $.Method({Static:false, Public:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      ColorUint_ToArray
    );

    $.Method({Static:false, Public:true }, "ToBgra", 
      JSIL.MethodSignature.Return($.Int32), 
      ColorUint_ToBgra
    );

    $.Method({Static:true , Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Single]), 
      ColorUint_ToByte
    );

    $.Method({Static:false, Public:true }, "ToCss", 
      JSIL.MethodSignature.Return($.String), 
      ColorUint_ToCss
    );

    $.Method({Static:false, Public:true }, "Tofloat3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")), 
      ColorUint_Tofloat3
    );

    $.Method({Static:false, Public:true }, "Tofloat4", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4")), 
      ColorUint_Tofloat4
    );

    $.Method({Static:false, Public:true }, "ToRgba", 
      JSIL.MethodSignature.Return($.Int32), 
      ColorUint_ToRgba
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      ColorUint_toString$33
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ColorUint_ToString$34
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.IFormatProvider")]), 
      ColorUint_ToString$35
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm15.TypeRef("System.IFormatProvider")]), 
      ColorUint_ToString$36
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Transparent", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "AntiqueWhite", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Aqua", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Aquamarine", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Azure", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Beige", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Bisque", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Black", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BlanchedAlmond", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Blue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BlueViolet", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Brown", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BurlyWood", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "CadetBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Chartreuse", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Chocolate", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Coral", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "CornflowerBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Cornsilk", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Crimson", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Cyan", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkCyan", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGoldenrod", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkKhaki", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkMagenta", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOliveGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOrange", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOrchid", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkRed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSalmon", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSeaGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSlateBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSlateGray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkTurquoise", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkViolet", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DeepPink", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DeepSkyBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DimGray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DodgerBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "FireBrick", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "FloralWhite", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "ForestGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Fuchsia", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Gainsboro", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "GhostWhite", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Gold", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Goldenrod", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Gray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Green", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "GreenYellow", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Honeydew", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "HotPink", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IndianRed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Indigo", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Ivory", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Khaki", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Lavender", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LavenderBlush", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LawnGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LemonChiffon", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightCoral", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightCyan", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGoldenrodYellow", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGrey", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightPink", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSalmon", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSeaGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSkyBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSlateGray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSteelBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LightYellow", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Lime", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "LimeGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Linen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Magenta", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Maroon", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumAquamarine", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumOrchid", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumPurple", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSeaGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSlateBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSpringGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumTurquoise", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumVioletRed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MidnightBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MintCream", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MistyRose", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Moccasin", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NavajoWhite", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Navy", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "OldLace", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Olive", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "OliveDrab", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Orange", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "OrangeRed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Orchid", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleGoldenrod", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleTurquoise", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleVioletRed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PapayaWhip", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PeachPuff", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Peru", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Pink", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Plum", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PowderBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Purple", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Red", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "RosyBrown", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "RoyalBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SaddleBrown", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Salmon", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SandyBrown", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SeaGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Seashell", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Sienna", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Silver", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SkyBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SlateBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SlateGray", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Snow", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SpringGreen", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SteelBlue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tan", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Teal", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Thistle", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tomato", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Turquoise", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Violet", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Wheat", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "White", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "WhiteSmoke", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Yellow", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "YellowGreen", $.Type);

    $.Field({Static:false, Public:true }, "R", $.Byte);

    $.Field({Static:false, Public:true }, "G", $.Byte);

    $.Field({Static:false, Public:true }, "B", $.Byte);

    $.Field({Static:false, Public:true }, "A", $.Byte);


    function ColorUint__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.Transparent = new $thisType();
      $thisType.AntiqueWhite = new $thisType();
      $thisType.Aqua = new $thisType();
      $thisType.Aquamarine = new $thisType();
      $thisType.Azure = new $thisType();
      $thisType.Beige = new $thisType();
      $thisType.Bisque = new $thisType();
      $thisType.Black = new $thisType();
      $thisType.BlanchedAlmond = new $thisType();
      $thisType.Blue = new $thisType();
      $thisType.BlueViolet = new $thisType();
      $thisType.Brown = new $thisType();
      $thisType.BurlyWood = new $thisType();
      $thisType.CadetBlue = new $thisType();
      $thisType.Chartreuse = new $thisType();
      $thisType.Chocolate = new $thisType();
      $thisType.Coral = new $thisType();
      $thisType.CornflowerBlue = new $thisType();
      $thisType.Cornsilk = new $thisType();
      $thisType.Crimson = new $thisType();
      $thisType.Cyan = new $thisType();
      $thisType.DarkBlue = new $thisType();
      $thisType.DarkCyan = new $thisType();
      $thisType.DarkGoldenrod = new $thisType();
      $thisType.DarkGray = new $thisType();
      $thisType.DarkGreen = new $thisType();
      $thisType.DarkKhaki = new $thisType();
      $thisType.DarkMagenta = new $thisType();
      $thisType.DarkOliveGreen = new $thisType();
      $thisType.DarkOrange = new $thisType();
      $thisType.DarkOrchid = new $thisType();
      $thisType.DarkRed = new $thisType();
      $thisType.DarkSalmon = new $thisType();
      $thisType.DarkSeaGreen = new $thisType();
      $thisType.DarkSlateBlue = new $thisType();
      $thisType.DarkSlateGray = new $thisType();
      $thisType.DarkTurquoise = new $thisType();
      $thisType.DarkViolet = new $thisType();
      $thisType.DeepPink = new $thisType();
      $thisType.DeepSkyBlue = new $thisType();
      $thisType.DimGray = new $thisType();
      $thisType.DodgerBlue = new $thisType();
      $thisType.FireBrick = new $thisType();
      $thisType.FloralWhite = new $thisType();
      $thisType.ForestGreen = new $thisType();
      $thisType.Fuchsia = new $thisType();
      $thisType.Gainsboro = new $thisType();
      $thisType.GhostWhite = new $thisType();
      $thisType.Gold = new $thisType();
      $thisType.Goldenrod = new $thisType();
      $thisType.Gray = new $thisType();
      $thisType.Green = new $thisType();
      $thisType.GreenYellow = new $thisType();
      $thisType.Honeydew = new $thisType();
      $thisType.HotPink = new $thisType();
      $thisType.IndianRed = new $thisType();
      $thisType.Indigo = new $thisType();
      $thisType.Ivory = new $thisType();
      $thisType.Khaki = new $thisType();
      $thisType.Lavender = new $thisType();
      $thisType.LavenderBlush = new $thisType();
      $thisType.LawnGreen = new $thisType();
      $thisType.LemonChiffon = new $thisType();
      $thisType.LightBlue = new $thisType();
      $thisType.LightCoral = new $thisType();
      $thisType.LightCyan = new $thisType();
      $thisType.LightGoldenrodYellow = new $thisType();
      $thisType.LightGreen = new $thisType();
      $thisType.LightGrey = new $thisType();
      $thisType.LightPink = new $thisType();
      $thisType.LightSalmon = new $thisType();
      $thisType.LightSeaGreen = new $thisType();
      $thisType.LightSkyBlue = new $thisType();
      $thisType.LightSlateGray = new $thisType();
      $thisType.LightSteelBlue = new $thisType();
      $thisType.LightYellow = new $thisType();
      $thisType.Lime = new $thisType();
      $thisType.LimeGreen = new $thisType();
      $thisType.Linen = new $thisType();
      $thisType.Magenta = new $thisType();
      $thisType.Maroon = new $thisType();
      $thisType.MediumAquamarine = new $thisType();
      $thisType.MediumBlue = new $thisType();
      $thisType.MediumOrchid = new $thisType();
      $thisType.MediumPurple = new $thisType();
      $thisType.MediumSeaGreen = new $thisType();
      $thisType.MediumSlateBlue = new $thisType();
      $thisType.MediumSpringGreen = new $thisType();
      $thisType.MediumTurquoise = new $thisType();
      $thisType.MediumVioletRed = new $thisType();
      $thisType.MidnightBlue = new $thisType();
      $thisType.MintCream = new $thisType();
      $thisType.MistyRose = new $thisType();
      $thisType.Moccasin = new $thisType();
      $thisType.NavajoWhite = new $thisType();
      $thisType.Navy = new $thisType();
      $thisType.OldLace = new $thisType();
      $thisType.Olive = new $thisType();
      $thisType.OliveDrab = new $thisType();
      $thisType.Orange = new $thisType();
      $thisType.OrangeRed = new $thisType();
      $thisType.Orchid = new $thisType();
      $thisType.PaleGoldenrod = new $thisType();
      $thisType.PaleGreen = new $thisType();
      $thisType.PaleTurquoise = new $thisType();
      $thisType.PaleVioletRed = new $thisType();
      $thisType.PapayaWhip = new $thisType();
      $thisType.PeachPuff = new $thisType();
      $thisType.Peru = new $thisType();
      $thisType.Pink = new $thisType();
      $thisType.Plum = new $thisType();
      $thisType.PowderBlue = new $thisType();
      $thisType.Purple = new $thisType();
      $thisType.Red = new $thisType();
      $thisType.RosyBrown = new $thisType();
      $thisType.RoyalBlue = new $thisType();
      $thisType.SaddleBrown = new $thisType();
      $thisType.Salmon = new $thisType();
      $thisType.SandyBrown = new $thisType();
      $thisType.SeaGreen = new $thisType();
      $thisType.Seashell = new $thisType();
      $thisType.Sienna = new $thisType();
      $thisType.Silver = new $thisType();
      $thisType.SkyBlue = new $thisType();
      $thisType.SlateBlue = new $thisType();
      $thisType.SlateGray = new $thisType();
      $thisType.Snow = new $thisType();
      $thisType.SpringGreen = new $thisType();
      $thisType.SteelBlue = new $thisType();
      $thisType.Tan = new $thisType();
      $thisType.Teal = new $thisType();
      $thisType.Thistle = new $thisType();
      $thisType.Tomato = new $thisType();
      $thisType.Turquoise = new $thisType();
      $thisType.Violet = new $thisType();
      $thisType.Wheat = new $thisType();
      $thisType.White = new $thisType();
      $thisType.WhiteSmoke = new $thisType();
      $thisType.Yellow = new $thisType();
      $thisType.YellowGreen = new $thisType();
      $thisType.Zero = $S00().CallStatic($thisType, "FromBgra", null, 0);
      $thisType.Transparent = $S01().CallStatic($thisType, "FromBgra", null, 16777215);
      $thisType.AntiqueWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294634455);
      $thisType.Aqua = $S01().CallStatic($thisType, "FromBgra", null, 4278255615);
      $thisType.Aquamarine = $S01().CallStatic($thisType, "FromBgra", null, 4286578644);
      $thisType.Azure = $S01().CallStatic($thisType, "FromBgra", null, 4293984255);
      $thisType.Beige = $S01().CallStatic($thisType, "FromBgra", null, 4294309340);
      $thisType.Bisque = $S01().CallStatic($thisType, "FromBgra", null, 4294960324);
      $thisType.Black = $S01().CallStatic($thisType, "FromBgra", null, 4278190080);
      $thisType.BlanchedAlmond = $S01().CallStatic($thisType, "FromBgra", null, 4294962125);
      $thisType.Blue = $S01().CallStatic($thisType, "FromBgra", null, 4278190335);
      $thisType.BlueViolet = $S01().CallStatic($thisType, "FromBgra", null, 4287245282);
      $thisType.Brown = $S01().CallStatic($thisType, "FromBgra", null, 4289014314);
      $thisType.BurlyWood = $S01().CallStatic($thisType, "FromBgra", null, 4292786311);
      $thisType.CadetBlue = $S01().CallStatic($thisType, "FromBgra", null, 4284456608);
      $thisType.Chartreuse = $S01().CallStatic($thisType, "FromBgra", null, 4286578432);
      $thisType.Chocolate = $S01().CallStatic($thisType, "FromBgra", null, 4291979550);
      $thisType.Coral = $S01().CallStatic($thisType, "FromBgra", null, 4294934352);
      $thisType.CornflowerBlue = $S01().CallStatic($thisType, "FromBgra", null, 4284782061);
      $thisType.Cornsilk = $S01().CallStatic($thisType, "FromBgra", null, 4294965468);
      $thisType.Crimson = $S01().CallStatic($thisType, "FromBgra", null, 4292613180);
      $thisType.Cyan = $S01().CallStatic($thisType, "FromBgra", null, 4278255615);
      $thisType.DarkBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278190219);
      $thisType.DarkCyan = $S01().CallStatic($thisType, "FromBgra", null, 4278225803);
      $thisType.DarkGoldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4290283019);
      $thisType.DarkGray = $S01().CallStatic($thisType, "FromBgra", null, 4289309097);
      $thisType.DarkGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278215680);
      $thisType.DarkKhaki = $S01().CallStatic($thisType, "FromBgra", null, 4290623339);
      $thisType.DarkMagenta = $S01().CallStatic($thisType, "FromBgra", null, 4287299723);
      $thisType.DarkOliveGreen = $S01().CallStatic($thisType, "FromBgra", null, 4283788079);
      $thisType.DarkOrange = $S01().CallStatic($thisType, "FromBgra", null, 4294937600);
      $thisType.DarkOrchid = $S01().CallStatic($thisType, "FromBgra", null, 4288230092);
      $thisType.DarkRed = $S01().CallStatic($thisType, "FromBgra", null, 4287299584);
      $thisType.DarkSalmon = $S01().CallStatic($thisType, "FromBgra", null, 4293498490);
      $thisType.DarkSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4287609999);
      $thisType.DarkSlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282924427);
      $thisType.DarkSlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4281290575);
      $thisType.DarkTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4278243025);
      $thisType.DarkViolet = $S01().CallStatic($thisType, "FromBgra", null, 4287889619);
      $thisType.DeepPink = $S01().CallStatic($thisType, "FromBgra", null, 4294907027);
      $thisType.DeepSkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278239231);
      $thisType.DimGray = $S01().CallStatic($thisType, "FromBgra", null, 4285098345);
      $thisType.DodgerBlue = $S01().CallStatic($thisType, "FromBgra", null, 4280193279);
      $thisType.FireBrick = $S01().CallStatic($thisType, "FromBgra", null, 4289864226);
      $thisType.FloralWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294966000);
      $thisType.ForestGreen = $S01().CallStatic($thisType, "FromBgra", null, 4280453922);
      $thisType.Fuchsia = $S01().CallStatic($thisType, "FromBgra", null, 4294902015);
      $thisType.Gainsboro = $S01().CallStatic($thisType, "FromBgra", null, 4292664540);
      $thisType.GhostWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294506751);
      $thisType.Gold = $S01().CallStatic($thisType, "FromBgra", null, 4294956800);
      $thisType.Goldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4292519200);
      $thisType.Gray = $S01().CallStatic($thisType, "FromBgra", null, 4286611584);
      $thisType.Green = $S01().CallStatic($thisType, "FromBgra", null, 4278222848);
      $thisType.GreenYellow = $S01().CallStatic($thisType, "FromBgra", null, 4289593135);
      $thisType.Honeydew = $S01().CallStatic($thisType, "FromBgra", null, 4293984240);
      $thisType.HotPink = $S01().CallStatic($thisType, "FromBgra", null, 4294928820);
      $thisType.IndianRed = $S01().CallStatic($thisType, "FromBgra", null, 4291648604);
      $thisType.Indigo = $S01().CallStatic($thisType, "FromBgra", null, 4283105410);
      $thisType.Ivory = $S01().CallStatic($thisType, "FromBgra", null, 4294967280);
      $thisType.Khaki = $S01().CallStatic($thisType, "FromBgra", null, 4293977740);
      $thisType.Lavender = $S01().CallStatic($thisType, "FromBgra", null, 4293322490);
      $thisType.LavenderBlush = $S01().CallStatic($thisType, "FromBgra", null, 4294963445);
      $thisType.LawnGreen = $S01().CallStatic($thisType, "FromBgra", null, 4286381056);
      $thisType.LemonChiffon = $S01().CallStatic($thisType, "FromBgra", null, 4294965965);
      $thisType.LightBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289583334);
      $thisType.LightCoral = $S01().CallStatic($thisType, "FromBgra", null, 4293951616);
      $thisType.LightCyan = $S01().CallStatic($thisType, "FromBgra", null, 4292935679);
      $thisType.LightGoldenrodYellow = $S01().CallStatic($thisType, "FromBgra", null, 4294638290);
      $thisType.LightGreen = $S01().CallStatic($thisType, "FromBgra", null, 4287688336);
      $thisType.LightGrey = $S01().CallStatic($thisType, "FromBgra", null, 4292072403);
      $thisType.LightPink = $S01().CallStatic($thisType, "FromBgra", null, 4294948545);
      $thisType.LightSalmon = $S01().CallStatic($thisType, "FromBgra", null, 4294942842);
      $thisType.LightSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4280332970);
      $thisType.LightSkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4287090426);
      $thisType.LightSlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4286023833);
      $thisType.LightSteelBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289774814);
      $thisType.LightYellow = $S01().CallStatic($thisType, "FromBgra", null, 4294967264);
      $thisType.Lime = $S01().CallStatic($thisType, "FromBgra", null, 4278255360);
      $thisType.LimeGreen = $S01().CallStatic($thisType, "FromBgra", null, 4281519410);
      $thisType.Linen = $S01().CallStatic($thisType, "FromBgra", null, 4294635750);
      $thisType.Magenta = $S01().CallStatic($thisType, "FromBgra", null, 4294902015);
      $thisType.Maroon = $S01().CallStatic($thisType, "FromBgra", null, 4286578688);
      $thisType.MediumAquamarine = $S01().CallStatic($thisType, "FromBgra", null, 4284927402);
      $thisType.MediumBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278190285);
      $thisType.MediumOrchid = $S01().CallStatic($thisType, "FromBgra", null, 4290401747);
      $thisType.MediumPurple = $S01().CallStatic($thisType, "FromBgra", null, 4287852763);
      $thisType.MediumSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4282168177);
      $thisType.MediumSlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4286277870);
      $thisType.MediumSpringGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278254234);
      $thisType.MediumTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4282962380);
      $thisType.MediumVioletRed = $S01().CallStatic($thisType, "FromBgra", null, 4291237253);
      $thisType.MidnightBlue = $S01().CallStatic($thisType, "FromBgra", null, 4279834992);
      $thisType.MintCream = $S01().CallStatic($thisType, "FromBgra", null, 4294311930);
      $thisType.MistyRose = $S01().CallStatic($thisType, "FromBgra", null, 4294960353);
      $thisType.Moccasin = $S01().CallStatic($thisType, "FromBgra", null, 4294960309);
      $thisType.NavajoWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294958765);
      $thisType.Navy = $S01().CallStatic($thisType, "FromBgra", null, 4278190208);
      $thisType.OldLace = $S01().CallStatic($thisType, "FromBgra", null, 4294833638);
      $thisType.Olive = $S01().CallStatic($thisType, "FromBgra", null, 4286611456);
      $thisType.OliveDrab = $S01().CallStatic($thisType, "FromBgra", null, 4285238819);
      $thisType.Orange = $S01().CallStatic($thisType, "FromBgra", null, 4294944000);
      $thisType.OrangeRed = $S01().CallStatic($thisType, "FromBgra", null, 4294919424);
      $thisType.Orchid = $S01().CallStatic($thisType, "FromBgra", null, 4292505814);
      $thisType.PaleGoldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4293847210);
      $thisType.PaleGreen = $S01().CallStatic($thisType, "FromBgra", null, 4288215960);
      $thisType.PaleTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4289720046);
      $thisType.PaleVioletRed = $S01().CallStatic($thisType, "FromBgra", null, 4292571283);
      $thisType.PapayaWhip = $S01().CallStatic($thisType, "FromBgra", null, 4294963157);
      $thisType.PeachPuff = $S01().CallStatic($thisType, "FromBgra", null, 4294957753);
      $thisType.Peru = $S01().CallStatic($thisType, "FromBgra", null, 4291659071);
      $thisType.Pink = $S01().CallStatic($thisType, "FromBgra", null, 4294951115);
      $thisType.Plum = $S01().CallStatic($thisType, "FromBgra", null, 4292714717);
      $thisType.PowderBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289781990);
      $thisType.Purple = $S01().CallStatic($thisType, "FromBgra", null, 4286578816);
      $thisType.Red = $S01().CallStatic($thisType, "FromBgra", null, 4294901760);
      $thisType.RosyBrown = $S01().CallStatic($thisType, "FromBgra", null, 4290547599);
      $thisType.RoyalBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282477025);
      $thisType.SaddleBrown = $S01().CallStatic($thisType, "FromBgra", null, 4287317267);
      $thisType.Salmon = $S01().CallStatic($thisType, "FromBgra", null, 4294606962);
      $thisType.SandyBrown = $S01().CallStatic($thisType, "FromBgra", null, 4294222944);
      $thisType.SeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4281240407);
      $thisType.Seashell = $S01().CallStatic($thisType, "FromBgra", null, 4294964718);
      $thisType.Sienna = $S01().CallStatic($thisType, "FromBgra", null, 4288696877);
      $thisType.Silver = $S01().CallStatic($thisType, "FromBgra", null, 4290822336);
      $thisType.SkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4287090411);
      $thisType.SlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4285160141);
      $thisType.SlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4285563024);
      $thisType.Snow = $S01().CallStatic($thisType, "FromBgra", null, 4294966010);
      $thisType.SpringGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278255487);
      $thisType.SteelBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282811060);
      $thisType.Tan = $S01().CallStatic($thisType, "FromBgra", null, 4291998860);
      $thisType.Teal = $S01().CallStatic($thisType, "FromBgra", null, 4278222976);
      $thisType.Thistle = $S01().CallStatic($thisType, "FromBgra", null, 4292394968);
      $thisType.Tomato = $S01().CallStatic($thisType, "FromBgra", null, 4294927175);
      $thisType.Turquoise = $S01().CallStatic($thisType, "FromBgra", null, 4282441936);
      $thisType.Violet = $S01().CallStatic($thisType, "FromBgra", null, 4293821166);
      $thisType.Wheat = $S01().CallStatic($thisType, "FromBgra", null, 4294303411);
      $thisType.White = $S01().CallStatic($thisType, "FromBgra", null, 4294967295);
      $thisType.WhiteSmoke = $S01().CallStatic($thisType, "FromBgra", null, 4294309365);
      $thisType.Yellow = $S01().CallStatic($thisType, "FromBgra", null, 4294967040);
      $thisType.YellowGreen = $S01().CallStatic($thisType, "FromBgra", null, 4288335154);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ColorUint__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm15.TypeRef("System.IFormattable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Fusee.Base.Common.FileMode */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Base.Common.FileMode", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CreateNew: 1, 
    Create: 2, 
    Open: 3, 
    OpenOrCreate: 4, 
    Truncate: 5, 
    Append: 6, 
  }
);

/* class Fusee.Base.Common.ExtensionMethods */ 

(function ExtensionMethods$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Collections.IEnumerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm15.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm15.System.Collections.IEnumerator.Reset)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm15.System.IDisposable.Dispose)) ();
  };


  function ExtensionMethods_LastItem$b1 (T, data) {
    var $im00 = $asm15.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm15.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var result = (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;

    for (var enumerator = $im00.Call(data, null); $IM00().Call(enumerator, null); ) {
      result = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
    }
    return result;
  }; 

  function ExtensionMethods_SequEqual$b1 (T, source, compObj) {
    var $im00 = $asm15.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm15.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var enumerator = $im00.Call(source, null);
    var enumerator2 = $im00.Call(compObj, null);
    var num = 0;
    var num2 = 0;

    while ($IM00().Call(enumerator, null)) {
      num = ((num + 1) | 0);
    }
    $IM01().Call(enumerator, null);

    while ($IM00().Call(enumerator2, null)) {
      num2 = ((num2 + 1) | 0);
    }
    $IM01().Call(enumerator2, null);
    var flag = num !== num2;
    if (flag) {
      var result = false;
    } else {

      while ($IM00().Call(enumerator, null) && $IM00().Call(enumerator2, null)) {
        var current = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        var flag2 = !(JSIL.ObjectEqualsInstance(current, $im01.Call(enumerator2, null), !false, $T04().__Type__));
        if (flag2) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  }; 

  function ExtensionMethods_SkipItems$b1 (T, data, count) {
    var $s00 = new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [T]), null);
    var $im00 = $asm15.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm15.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var list = $s00.Construct();
    $asm15.System.Collections.Generic.List$b1.Of(T).prototype.AddRange.call(list, $asm15.System.Collections.Generic.List$b1.Of(T).$Cast(data));
    var num = 0;
    var enumerator = $im00.Call(data, null);
    try {

    $loop0: 
      while ($IM00().Call(enumerator, null)) {
        var current = $im01.Call(enumerator, null);
        var flag = num < (count | 0);
        if (!flag) {
          break $loop0;
        }
        list.RemoveAt(0);
        num = ((num + 1) | 0);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    return list;
  }; 

  function ExtensionMethods_TakeItems$b1 (T, data, count) {
    var $s00 = new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [T]), null);
    var $s01 = new JSIL.MethodSignature(null, [T]);
    var $im00 = $asm15.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm15.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var list = $s00.Construct();
    var num = 0;
    var enumerator = $im00.Call(data, null);
    try {

    $loop0: 
      while ($IM00().Call(enumerator, null)) {
        var current = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        var flag = num < (count | 0);
        if (!flag) {
          break $loop0;
        }
        $s01.CallVirtual("Add", null, list, JSIL.CloneParameter(T, current));
        num = ((num + 1) | 0);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    return list;
  }; 

  JSIL.MakeStaticClass("Fusee.Base.Common.ExtensionMethods", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "LastItem", 
      new JSIL.MethodSignature("!!0", [$asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      ExtensionMethods_LastItem$b1
    )
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "SequEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      ExtensionMethods_SequEqual$b1
    )
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "SkipItems", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["T"]), 
      ExtensionMethods_SkipItems$b1
    )
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "TakeItems", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm15.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["T"]), 
      ExtensionMethods_TakeItems$b1
    )
      .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* struct Fusee.Base.Common.GlyphInfo */ 

(function GlyphInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Base.Common.GlyphInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "CharCode", $.UInt32);

    $.Field({Static:false, Public:true }, "AdvanceX", $.Single);

    $.Field({Static:false, Public:true }, "AdvanceY", $.Single);

    $.Field({Static:false, Public:true }, "Width", $.Single);

    $.Field({Static:false, Public:true }, "Height", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Base.Common.IFontImp */ 

JSIL.MakeInterface(
  "Fusee.Base.Common.IFontImp", true, [], function ($) {
    $.Method({}, "get_UseKerning", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_UseKerning", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_PixelHeight", JSIL.MethodSignature.Return($.UInt32));
    $.Method({}, "set_PixelHeight", JSIL.MethodSignature.Action($.UInt32));
    $.Method({}, "GetGlyphInfo", new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.GlyphInfo"), [$.UInt32]));
    $.Method({}, "GetGlyphCurve", new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.Curve"), [$.UInt32]));
    $.Method({}, "GetUnscaledAdvance", new JSIL.MethodSignature($.Single, [$.UInt32]));
    $.Method({}, "RenderGlyph", new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetKerning", new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32]));
    $.Method({}, "GetUnscaledKerning", new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32]));
    $.Property({}, "UseKerning");
    $.Property({}, "PixelHeight");
  }, []);

/* class Fusee.Base.Common.SplitToCurveSegmentHelper */ 

(function SplitToCurveSegmentHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm07.Fusee.Math.Core.CurveSegment))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.Fusee.Math.Core.CurvePart)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerator$b1.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Collections.IEnumerator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Collections.Generic.IList$b1.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.IDisposable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm15.System.Byte))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Fusee.Base.Common.ExtensionMethods)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.Fusee.Math.Core.LinearSegment)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.Fusee.Math.Core.CurveSegment)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.Fusee.Math.Core.BezierCubicSegment)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.Fusee.Math.Core.BezierConicSegment)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm15.System.ArgumentOutOfRangeException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm12.System.Linq.Enumerable)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm07.Fusee.Math.Core.CurveSegment))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerator$b1.Of($asm07.Fusee.Math.Core.CurveSegment))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Math.Core.CurveSegment))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Fusee.Base.Common.SplitToCurveSegmentHelper_SegmentType)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm15.System.Byte))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm15.System.Byte))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm15.System.Byte)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerable$b1.Of($asm15.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.float3")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentOutOfRangeException"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float3")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.float3")]), [$asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Math.Core.float3")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0E.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0E.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.CurveSegment")]), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.CurveSegment")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm15.TypeRef("System.Byte")]), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Byte")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Math.Core.float3).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm15.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerator$b1.Of($asm07.Fusee.Math.Core.float3).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm15.System.Collections.Generic.IList$b1.Of($asm07.Fusee.Math.Core.float3).get_Item)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm07.Fusee.Math.Core.float3).Add)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm15.System.IDisposable.Dispose)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm15.System.Byte).get_Count)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm15.System.Collections.Generic.IList$b1.Of($asm07.Fusee.Math.Core.float3).Insert)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Math.Core.CurveSegment).GetEnumerator)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm15.System.Collections.Generic.IEnumerator$b1.Of($asm07.Fusee.Math.Core.CurveSegment).get_Current)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm07.Fusee.Math.Core.float3).Remove)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm15.System.Collections.Generic.ICollection$b1.Of($asm07.Fusee.Math.Core.CurveSegment).Add)) ();
  };


  function SplitToCurveSegmentHelper_CombineCurveSegmentsAndAddThemToCurvePart (segments, part) {

  $loop0: 
    for (var i = 0; i < (segments.get_Count() | 0); i = ((i + 1) | 0)) {
      var flag = ((i + 1) | 0) >= (segments.get_Count() | 0);
      if (flag) {
        break $loop0;
      }
      if (JSIL.GetType(segments.get_Item(i)) === JSIL.GetType(segments.get_Item(((i + 1) | 0)))) {
        var enumerator = $IM00().Call(segments.get_Item(((i + 1) | 0)).Vertices, null);
        try {

          while ($IM01().Call(enumerator, null)) {
            var current = $IM02().Call(enumerator, null).MemberwiseClone();
            var flag3 = current.Equals($IM03().Call(segments.get_Item(((i + 1) | 0)).Vertices, null, 0).MemberwiseClone());
            if (!flag3) {
              $IM04().Call(segments.get_Item(i).Vertices, null, current.MemberwiseClone());
            }
          }
        } finally {
          if (enumerator !== null) {
            $IM05().Call(enumerator, null);
          }
        }
        segments.RemoveAt(((i + 1) | 0));
        var flag4 = i >= 0;
        if (flag4) {
          i = ((i - 1) | 0);
        }
      }
    }
    $thisType.FixSegments(segments);
    part.CurveSegments = segments;
  }; 

  function SplitToCurveSegmentHelper_CreateCurveSegment$00 (i, pattern, verts) {
    var list = $S00().Construct();
    $T0C().prototype.AddRange.call(list, $T0D().TakeItems$b1($T07())(
        $T0D().SkipItems$b1($T07())(verts, i), 
        $IM06().Call(pattern, null)
      ));
    switch ($thisType.SplitToCurveSegmentHelper$Type$value.valueOf()) {
      case 0: 
        var expr_3F = new ($T0E())();
        expr_3F.Vertices = $S00().Construct();
        var curveSegment = expr_3F;
        curveSegment.Vertices = list;
        break;

      case 1: 
        var expr_73 = new ($T10())();
        expr_73.Vertices = $S00().Construct();
        curveSegment = expr_73;
        curveSegment.Vertices = list;
        break;

      case 2: 
        var expr_59 = new ($T11())();
        expr_59.Vertices = $S00().Construct();
        curveSegment = expr_59;
        curveSegment.Vertices = list;
        break;

      default: 
        throw $S01().Construct();

    }
    return curveSegment;
  }; 

  function SplitToCurveSegmentHelper_CreateCurveSegment$01 (i, pattern, startPoint, verts) {
    var list = $S00().Construct();
    $T0C().prototype.AddRange.call(list, $T0D().TakeItems$b1($T07())(
        $T0D().SkipItems$b1($T07())(verts, i), 
        $IM06().Call(pattern, null)
      ));
    $S02().CallVirtual("Add", null, list, startPoint.MemberwiseClone());
    switch ($thisType.SplitToCurveSegmentHelper$Type$value.valueOf()) {
      case 0: 
        var expr_47 = new ($T0E())();
        expr_47.Vertices = $S00().Construct();
        var curveSegment = expr_47;
        curveSegment.Vertices = list;
        break;

      case 1: 
        var expr_7B = new ($T10())();
        expr_7B.Vertices = $S00().Construct();
        curveSegment = expr_7B;
        curveSegment.Vertices = list;
        break;

      case 2: 
        var expr_61 = new ($T11())();
        expr_61.Vertices = $S00().Construct();
        curveSegment = expr_61;
        curveSegment.Vertices = list;
        break;

      default: 
        throw $S01().Construct();

    }
    curveSegment.Vertices = list;
    return curveSegment;
  }; 

  function SplitToCurveSegmentHelper_CreateOnPointsAndAddToList (vertices) {
    var item = new ($T07())();
    var list = $S03().Construct(vertices);
    list.Remove($S04().CallStatic($T13(), "First$b1", [$asm07.Fusee.Math.Core.float3], list).MemberwiseClone());
    list.Remove($T0D().LastItem$b1($T07())(list).MemberwiseClone());

  $loop0: 
    for (var i = 0; i < (list.get_Count() | 0); i = ((i + 1) | 0)) {
      var flag = ((i + 1) | 0) >= (list.get_Count() | 0);
      if (flag) {
        break $loop0;
      }
      (item = item.MemberwiseClone(), 
        $T07().prototype._ctor.call(item, 
          +(((+list.get_Item(i).x + +list.get_Item(((i + 1) | 0)).x) / 2)), 
          +(((+list.get_Item(i).y + +list.get_Item(((i + 1) | 0)).y) / 2)), 
          +(((+list.get_Item(i).z + +list.get_Item(((i + 1) | 0)).z) / 2))
        ));
      var flag2 = ((i === 0));
      if (flag2) {
        $IM07().Call(vertices, null, 2, item.MemberwiseClone());
      } else {
        $IM07().Call(vertices, null, Math.imul(((i + 1) | 0), 2), item.MemberwiseClone());
      }
    }
  }; 

  function SplitToCurveSegmentHelper_FixSegments (segments) {
    var float = $S04().CallStatic($T13(), "First$b1", [$asm07.Fusee.Math.Core.float3], $S05().CallStatic($T13(), "First$b1", [$asm07.Fusee.Math.Core.CurveSegment], segments).Vertices).MemberwiseClone();
    var enumerator = $IM08().Call(segments, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var current = $IM09().Call(enumerator, null);
        $IM0A().Call(current.Vertices, null, $S04().CallStatic($T13(), "First$b1", [$asm07.Fusee.Math.Core.float3], current.Vertices).MemberwiseClone());
      }
    } finally {
      if (enumerator !== null) {
        $IM05().Call(enumerator, null);
      }
    }
    var flag = $T07().op_Equality(float.MemberwiseClone(), $T0D().LastItem$b1($T07())($T0D().LastItem$b1($T0F())(segments).Vertices).MemberwiseClone());
    if (!flag) {
      var expr_74 = new ($T0E())();
      expr_74.Vertices = $S00().Construct();
      var linearSegment = expr_74;
      $IM04().Call(linearSegment.Vertices, null, float.MemberwiseClone());
      $IM0B().Call(segments, null, linearSegment);
    }
  }; 

  function SplitToCurveSegmentHelper_get_Type () {
    return $thisType.SplitToCurveSegmentHelper$Type$value;
  }; 

  function SplitToCurveSegmentHelper_set_Type (value) {
    $thisType.SplitToCurveSegmentHelper$Type$value = value;
  }; 

  function SplitToCurveSegmentHelper_SplitPartIntoSegments (part, partTags, partVerts) {
    var array = JSIL.Array.New($T1A(), [1, 1]);
    var array2 = JSIL.Array.New($T1A(), [1, 0, 1]);
    var array3 = JSIL.Array.New($T1A(), [1, 0, 0, 1]);
    var expr_34 = JSIL.Array.New($T1A(), 4);
    expr_34[0] = 1;
    var list = $S06().Construct();

    for (var i = 0; i < (partTags.get_Count() | 0); i = ((i + 1) | 0)) {
      var flag = $T0D().SequEqual$b1($T1A())($T0D().TakeItems$b1($T1A())($T0D().SkipItems$b1($T1A())(partTags, i), array.length), $T1B().$Cast(array));
      if (flag) {
        $thisType.SplitToCurveSegmentHelper$Type$value = $T17().LINEAR;
        $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array), partVerts));
      } else {
        var flag2 = $T0D().SequEqual$b1($T1A())($T0D().TakeItems$b1($T1A())($T0D().SkipItems$b1($T1A())(partTags, i), array2.length), $T1B().$Cast(array2));
        if (flag2) {
          $thisType.SplitToCurveSegmentHelper$Type$value = $T17().CONIC;
          $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array2), partVerts));
          i = ((i + 1) | 0);
        } else {
          var flag3 = $T0D().SequEqual$b1($T1A())($T0D().TakeItems$b1($T1A())($T0D().SkipItems$b1($T1A())(partTags, i), array3.length), $T1B().$Cast(array3));
          if (flag3) {
            $thisType.SplitToCurveSegmentHelper$Type$value = $T17().CUBIC;
            $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array3), partVerts));
            i = ((i + 2) | 0);
          } else {
            var flag4 = $T0D().SequEqual$b1($T1A())($T0D().TakeItems$b1($T1A())($T0D().SkipItems$b1($T1A())(partTags, i), expr_34.length), $T1B().$Cast(expr_34));
            if (flag4) {
              $thisType.SplitToCurveSegmentHelper$Type$value = $T17().CONIC;
              var num = 0;
              var curveSegment = $thisType.CreateCurveSegment(i, $T0B().$Cast(expr_34), partVerts);
              i = ((i + 3) | 0);

            $loop1: 
              for (var j = ((i + 1) | 0); j < (partTags.get_Count() | 0); j = ((j + 1) | 0)) {
                $IM04().Call(curveSegment.Vertices, null, partVerts.get_Item(j).MemberwiseClone());
                var flag5 = ((partTags.get_Item(j) === 0));
                if (!flag5) {
                  num = j;
                  break $loop1;
                }
              }
              var flag6 = !((num === 0));
              if (flag6) {
                i = ((num - 1) | 0);
              } else {
                $IM04().Call(curveSegment.Vertices, null, partVerts.get_Item(0).MemberwiseClone());
              }
              $thisType.CreateOnPointsAndAddToList(curveSegment.Vertices);
              $S07().CallVirtual("Add", null, list, curveSegment);
            } else {
              var list2 = $S08().Construct();
              $T18().prototype.AddRange.call(list2, $T0D().TakeItems$b1($T1A())(
                  $T0D().SkipItems$b1($T1A())(partTags, i), 
                  (((partTags.get_Count() | 0) - i) | 0)
                ));
              $S09().CallVirtual("Add", null, list2, partTags.get_Item(0));
              var flag7 = $T0D().SequEqual$b1($T1A())(list2, $T1B().$Cast(array2));
              if (flag7) {
                $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array2), partVerts.get_Item(0).MemberwiseClone(), partVerts));
              } else {
                var flag8 = $T0D().SequEqual$b1($T1A())(list2, $T1B().$Cast(array3));
                if (flag8) {
                  $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array3), partVerts.get_Item(0).MemberwiseClone(), partVerts));
                } else {
                  var flag9 = $T0D().SequEqual$b1($T1A())(list2, $T1B().$Cast(expr_34));
                  if (flag9) {
                    $S07().CallVirtual("Add", null, list, $thisType.CreateCurveSegment(i, $T0B().$Cast(array3), partVerts.get_Item(0).MemberwiseClone(), partVerts));
                  }
                }
              }
            }
          }
        }
      }
    }
    return list;
  }; 

  JSIL.MakeStaticClass("Fusee.Base.Common.SplitToCurveSegmentHelper", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CombineCurveSegmentsAndAddThemToCurvePart", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.CurveSegment")]), $asm07.TypeRef("Fusee.Math.Core.CurvePart")]), 
      SplitToCurveSegmentHelper_CombineCurveSegmentsAndAddThemToCurvePart
    );

    $.Method({Static:true , Public:false}, "CreateCurveSegment", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.CurveSegment"), [
          $.Int32, $asm15.TypeRef("System.Collections.Generic.ICollection`1", [$.Byte]), 
          $asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.float3")])
        ]), 
      SplitToCurveSegmentHelper_CreateCurveSegment$00
    );

    $.Method({Static:true , Public:false}, "CreateCurveSegment", 
      new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.CurveSegment"), [
          $.Int32, $asm15.TypeRef("System.Collections.Generic.ICollection`1", [$.Byte]), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.float3")])
        ]), 
      SplitToCurveSegmentHelper_CreateCurveSegment$01
    );

    $.Method({Static:true , Public:false}, "CreateOnPointsAndAddToList", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("Fusee.Math.Core.float3")])), 
      SplitToCurveSegmentHelper_CreateOnPointsAndAddToList
    );

    $.Method({Static:true , Public:false}, "FixSegments", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("Fusee.Math.Core.CurveSegment")])), 
      SplitToCurveSegmentHelper_FixSegments
    );

    $.Method({Static:true , Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType")), 
      SplitToCurveSegmentHelper_get_Type
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType")), 
      SplitToCurveSegmentHelper_set_Type
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "SplitPartIntoSegments", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.CurveSegment")]), [
          $asm07.TypeRef("Fusee.Math.Core.CurvePart"), $asm15.TypeRef("System.Collections.Generic.List`1", [$.Byte]), 
          $asm15.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("Fusee.Math.Core.float3")])
        ]), 
      SplitToCurveSegmentHelper_SplitPartIntoSegments
    );

    $.Field({Static:true , Public:false}, "SplitToCurveSegmentHelper$Type$value", $asm00.TypeRef("Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType"))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:true , Public:false}, "Type", $asm00.TypeRef("Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Base.Common.SplitToCurveSegmentHelper+SegmentType", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LINEAR: 0, 
    CUBIC: 1, 
    CONIC: 2, 
  }
);

/* class Fusee.Base.Common.StreamAssetProvider */ 

(function StreamAssetProvider$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Type, $asm00.Fusee.Base.Common.AssetHandler))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.GetCallback)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.NotImplementedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.AssetHandler)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.IO.Stream)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Type"), $asm00.TypeRef("Fusee.Base.Common.AssetHandler")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm15.System.IDisposable.Dispose)) ();
  };


  function StreamAssetProvider__ctor () {
    this._assetHandlers = $S00().Construct();
  }; 

  function StreamAssetProvider_BeginGetAsset (id, getCallback) {
    throw $S01().Construct();
  }; 

  function StreamAssetProvider_CanGet (id, type) {
    var assetHandler = new JSIL.BoxedVariable(new ($T05())());
    var flag = !this.CheckExists(id);
    if (flag) {
      type = null;
      var result = false;
    } else {
      var flag2 = (this._assetHandlers).TryGetValue(type, /* ref */ assetHandler);
      if (flag2) {
        var flag3 = assetHandler.get().Checker(id);
        if (flag3) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  }; 

  function StreamAssetProvider_CanHandleType (type) {
    return (this._assetHandlers).ContainsKey(type);
  }; 

  function StreamAssetProvider_GetAsset (id, type) {
    var assetHandler = new JSIL.BoxedVariable(new ($T05())());
    var obj = null;
    var stream = this.GetStream(id);
    try {
      var flag = stream === null;
      if (flag) {
        var result = null;
        return result;
      }
      var flag2 = (this._assetHandlers).TryGetValue(type, /* ref */ assetHandler);
      if (flag2) {
        var flag3 = (obj = assetHandler.get().Decoder(id, stream)) !== null;
        if (flag3) {
          result = obj;
          return result;
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
    result = null;
    return result;
  }; 

  function StreamAssetProvider_RegisterTypeHandler (handler) {
    (this._assetHandlers).Add(handler.ReturnedType, handler.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Base.Common.StreamAssetProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      StreamAssetProvider__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeginGetAsset", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Fusee.Base.Common.GetCallback")]), 
      StreamAssetProvider_BeginGetAsset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanGet", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm15.TypeRef("System.Type")]), 
      StreamAssetProvider_CanGet
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanHandleType", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Type")]), 
      StreamAssetProvider_CanHandleType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetAsset", 
      new JSIL.MethodSignature($.Object, [$.String, $asm15.TypeRef("System.Type")]), 
      StreamAssetProvider_GetAsset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RegisterTypeHandler", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.AssetHandler")), 
      StreamAssetProvider_RegisterTypeHandler
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_assetHandlers", $asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Type"), $asm00.TypeRef("Fusee.Base.Common.AssetHandler")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Fusee.Base.Common.IAssetProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Base.Common.GetCallbackState */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Base.Common.GetCallbackState", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Progress: 0, 
    Error: 1, 
    Done: 2, 
  }
);

/* delegate Fusee.Base.Common.GetCallback */ 

JSIL.MakeDelegate("Fusee.Base.Common.GetCallback", true, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Fusee.Base.Common.GetCallbackState"), $asm15.TypeRef("System.Object"), 
      $asm15.TypeRef("System.Type")
    ]));

/* delegate Fusee.Base.Common.AssetDecoder */ 

JSIL.MakeDelegate("Fusee.Base.Common.AssetDecoder", true, [], 
  new JSIL.MethodSignature($asm15.TypeRef("System.Object"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.Object")]));

/* delegate Fusee.Base.Common.AssetChecker */ 

JSIL.MakeDelegate("Fusee.Base.Common.AssetChecker", true, [], 
  new JSIL.MethodSignature($asm15.TypeRef("System.Boolean"), [$asm15.TypeRef("System.String")]));

/* struct Fusee.Base.Common.AssetHandler */ 

(function AssetHandler$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Base.Common.AssetHandler", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "ReturnedType", $asm15.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "Decoder", $asm00.TypeRef("Fusee.Base.Common.AssetDecoder"));

    $.Field({Static:false, Public:true }, "Checker", $asm00.TypeRef("Fusee.Base.Common.AssetChecker"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Base.Common.IAssetProvider */ 

JSIL.MakeInterface(
  "Fusee.Base.Common.IAssetProvider", true, [], function ($) {
    $.Method({}, "CanHandleType", new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.Type")]));
    $.Method({}, "GetAsset", new JSIL.MethodSignature($.Object, [$.String, $asm15.TypeRef("System.Type")]));
    $.Method({}, "CanGet", new JSIL.MethodSignature($.Boolean, [$.String, $asm15.TypeRef("System.Type")]));
    $.Method({}, "BeginGetAsset", new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Fusee.Base.Common.GetCallback")]));
    $.Method({}, "RegisterTypeHandler", JSIL.MethodSignature.Action($asm00.TypeRef("Fusee.Base.Common.AssetHandler")));
  }, []);

/* interface Fusee.Base.Common.IIOImp */ 

JSIL.MakeInterface(
  "Fusee.Base.Common.IIOImp", true, [], function ($) {
    $.Method({}, "StreamFromFile", new JSIL.MethodSignature($asm15.TypeRef("System.IO.Stream"), [$.String, $asm00.TypeRef("Fusee.Base.Common.FileMode")]));
  }, []);

/* enum Fusee.Base.Common.ImagePixelFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Base.Common.ImagePixelFormat", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    RGBA: 0, 
    RGB: 1, 
    Intensity: 2, 
  }
);

/* struct Fusee.Base.Common.ImageData */ 

(function ImageData$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData_CopyFunc)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Fusee.Base.Common.ImagePixelFormat)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Fusee.Base.Common.ColorUint)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Byte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.InvalidOperationException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm15.System.Byte))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.ArgumentNullException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.Fusee.Math.Core.M)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm15.System.Buffer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentOutOfRangeException"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Byte")]), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Byte")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentOutOfRangeException"), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.InvalidOperationException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [
        $asm15.TypeRef("System.Byte"), $asm15.TypeRef("System.Byte"), 
        $asm15.TypeRef("System.Byte"), $asm15.TypeRef("System.Byte")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [
        $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Byte")]), $asm15.TypeRef("System.Int32"), 
        $asm15.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Int32"), [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.String")]))) ();
  };


  function ImageData_Blt (dst, xDst, $yDst, src, xSrc, $ySrc, width, $height) {
    var height = new JSIL.BoxedVariable($height);
    var ySrc = new JSIL.BoxedVariable($ySrc);
    var yDst = new JSIL.BoxedVariable($yDst);
    var $closure0 = new ($T01())();
    $closure0.src = src.MemberwiseClone();
    $closure0.xSrc = (xSrc | 0);
    $closure0.dst = dst.MemberwiseClone();
    $closure0.xDst = (xDst | 0);
    $closure0.width = (width | 0);
    var flag = ($closure0.width | 0) === 0;
    if (flag) {
      $closure0.width = ($closure0.src.Width | 0);
    }
    var flag2 = (height.get() | 0) === 0;
    if (flag2) {
      height.set($closure0.src.Height);
    }
    $thisType.ClipBlt(
      /* ref */ new JSIL.MemberReference($closure0, "xDst"), 
      $closure0.dst.Width, 
      /* ref */ new JSIL.MemberReference($closure0, "xSrc"), 
      $closure0.src.Width, 
      /* ref */ new JSIL.MemberReference($closure0, "width")
    );
    $thisType.ClipBlt(
      /* ref */ yDst, 
      $closure0.dst.Height, 
      /* ref */ ySrc, 
      $closure0.src.Height, 
      /* ref */ height
    );
    var flag3 = (($closure0.width | 0) <= 0) || 
    ((height.get() | 0) <= 0);
    if (!flag3) {
      var flag4 = $closure0.dst.PixelFormat === $closure0.src.PixelFormat;
      if (flag4) {
        var copyFunc = $T03().New($closure0, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__0", $S00(), false, false));
      } else {
        var $closure1 = new ($T04())();
        $closure1.CS$$l$g8__locals1 = $closure0;
        $closure1.CopyPixel = null;
        switch (($closure1.CS$$l$g8__locals1.dst.PixelFormat).valueOf()) {
          case 0: 
            var pixelFormat = $closure1.CS$$l$g8__locals1.src.PixelFormat;
            if (pixelFormat !== $T05().RGB) {
              if (pixelFormat !== $T05().Intensity) {
                throw $S01().Construct("src", "Unknown source pixel format to copy to RGBA");
              }
              $closure1.CopyPixel = $T03().New($closure1.CS$$l$g8__locals1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__2", $S02(), false, false));
            } else {
              $closure1.CopyPixel = $T03().New($closure1.CS$$l$g8__locals1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__1", $S03(), false, false));
            }
            break;

          case 1: 
            var pixelFormat2 = $closure1.CS$$l$g8__locals1.src.PixelFormat;
            if ((pixelFormat2.valueOf() | 0) !== 0) {
              if (pixelFormat2 !== $T05().Intensity) {
                throw $S01().Construct("src", "Unknown source pixel format to copy to RGB");
              }
              $closure1.CopyPixel = $T03().New($closure1.CS$$l$g8__locals1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__4", $S04(), false, false));
            } else {
              $closure1.CopyPixel = $T03().New($closure1.CS$$l$g8__locals1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__3", $S05(), false, false));
            }
            break;

          case 2: 
            var pixelFormat3 = $closure1.CS$$l$g8__locals1.src.PixelFormat;
            if (pixelFormat3 > $T05().RGB) {
              throw $S01().Construct("src", "Unknown source pixel format to copy to RGB");
            }
            $closure1.CopyPixel = $T03().New($closure1.CS$$l$g8__locals1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_0, "$lBlt$gb__5", $S06(), false, false));
            break;

          default: 
            throw $S01().Construct("dst", "Unknown destination pixel format");

        }
        copyFunc = $T03().New($closure1, null, new JSIL.MethodPointerInfo($asm00.Fusee.Base.Common.ImageData_$l$gc__DisplayClass14_1, "$lBlt$gb__6", $S07(), false, false));
      }
      var num = Math.imul(yDst.get(), $closure0.dst.Stride);
      var num2 = Math.imul(ySrc.get(), $closure0.src.Stride);

      for (var i = 0; i < (height.get() | 0); i = ((i + 1) | 0)) {
        copyFunc(num, num2);
        num = ((num + ($closure0.dst.Stride | 0)) | 0);
        num2 = ((num2 + ($closure0.src.Stride | 0)) | 0);
      }
    }
  }; 

  function ImageData_ClipBlt (/* ref */ iDst, sizeDst, /* ref */ iSrc, sizeSrc, /* ref */ sizeBlk) {
    var num = ((
      ((iDst.get() | 0) < (iSrc.get() | 0))
         ? iDst.get()
         : iSrc.get())
     | 0);
    var flag = num > 0;
    if (flag) {
      num = 0;
    }
    var num2 = (((((iDst.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeDst | 0)) | 0);
    var num3 = (((((iSrc.get() | 0) + (sizeBlk.get() | 0)) | 0) - (sizeSrc | 0)) | 0);
    var num4 = ((
      (num2 > num3)
         ? num2
         : num3)
     | 0);
    var flag2 = num4 < 0;
    if (flag2) {
      num4 = 0;
    }
    iDst.set((((iDst.get() | 0) - num) | 0));
    iSrc.set((((iSrc.get() | 0) - num) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) + num) | 0));
    sizeBlk.set((((sizeBlk.get() | 0) - num4) | 0));
    var flag3 = (sizeBlk.get() | 0) < 0;
    if (flag3) {
      sizeBlk.set(0);
    }
  }; 

  function ImageData_CreateImage (width, height, color) {
    var imageData = new $thisType();
    imageData.PixelData = JSIL.Array.New($T08(), Math.imul(width, height));
    imageData.Height = (height | 0);
    imageData.Width = (width | 0);
    imageData.PixelFormat = $T05().RGBA;
    imageData.Stride = (width | 0);
    var imageData2 = imageData;
    $S08().CallStatic($thisType, "MemSet", null, imageData2.PixelData, color.ToArray());
    return imageData2;
  }; 

  function ImageData_get_BytesPerPixel () {
    switch ((this.PixelFormat).valueOf()) {
      case 0: 
        var result = 4;
        break;

      case 1: 
        result = 3;
        break;

      case 2: 
        result = 1;
        break;

      default: 
        throw $S09().Construct();

    }
    return result;
  }; 

  function ImageData_get_HasAlpha () {
    switch ((this.PixelFormat).valueOf()) {
      case 0: 
        var result = true;
        break;

      case 1: 
        result = false;
        break;

      case 2: 
        result = false;
        break;

      default: 
        throw $S09().Construct();

    }
    return result;
  }; 

  function ImageData_get_IsEmpty () {
    return (((this.Width | 0) <= 0) || ((this.Height | 0) <= 0));
  }; 

  function ImageData_GetPixel (x, y) {
    var flag = (0 > (x | 0)) || 
    ((x | 0) >= (this.Width | 0));
    if (flag) {
      throw $S01().Construct("x", $T09().Format("{0} is not in the range [0..{1}]", JSIL.Array.New($T0A(), [$T00().$Box(x), $T00().$Box((((this.Width | 0) - 1) | 0))])));
    }
    var flag2 = (0 > (y | 0)) || 
    ((y | 0) >= (this.Height | 0));
    if (flag2) {
      throw $S01().Construct("y", $T09().Format("{0} is not in the range [0..{1}]", JSIL.Array.New($T0A(), [$T00().$Box(y), $T00().$Box((((this.Height | 0) - 1) | 0))])));
    }
    var bytesPerPixel = (this.get_BytesPerPixel() | 0);
    var flag3 = bytesPerPixel > 3;
    var pixelFormat = this.PixelFormat;
    if (pixelFormat > $T05().RGB) {
      if (pixelFormat !== $T05().Intensity) {
        throw $S0A().Construct("Unkown pixel format.");
      }
      var b = (this.PixelData[((Math.imul(y, this.Stride) + Math.imul(this.get_BytesPerPixel(), x)) | 0)] | 0);
      var result = $S0B().Construct(b, b, b, 255);
    } else {
      var index = ((Math.imul(y, this.Stride) + Math.imul(this.get_BytesPerPixel(), x)) | 0);
      result = $S0C().Construct(this.PixelData, index, this.get_HasAlpha());
    }
    return result;
  }; 

  function ImageData_MemSet$00 (array, value) {
    var $temp00;
    var flag = array === null;
    if (flag) {
      throw $S0D().Construct("array");
    }
    var num = 32;
    var i = 0;

    for (var num2 = ($S0E().CallStatic($T0E(), "Min", null, num, array.length) | 0); i < num2; ) {
      array[($temp00 = i, 
        i = ((i + 1) | 0), 
        $temp00)] = (value | 0);
    }
    num2 = (array.length | 0);

    while (i < num2) {
      $T0F().BlockCopy(
        array, 
        0, 
        array, 
        i, 
        $S0E().CallStatic($T0E(), "Min", null, num, ((num2 - i) | 0))
      );
      i = ((i + num) | 0);
      num = Math.imul(num, 2);
    }
  }; 

  function ImageData_MemSet$01 (array, value) {
    var flag = (array === null) || 
    ((array.length | 0) === 0);
    if (flag) {
      throw $S0F().Construct("array", "Must not be null and not an empty array.");
    }
    var flag2 = (value === null) || 
    ((value.length | 0) === 0);
    if (flag2) {
      throw $S0F().Construct("value", "Must not be null and not an empty array.");
    }
    var num = (value.length | 0);
    var num2 = Math.imul(32, num);
    var num3 = ($S0E().CallStatic($T0E(), "Min", null, num2, array.length) | 0);

    for (var i = 0; i < num3; i = ((i + num) | 0)) {
      $T0F().BlockCopy(
        value, 
        0, 
        array, 
        i, 
        $S0E().CallStatic($T0E(), "Min", null, num, ((num3 - i) | 0))
      );
    }
    num3 = (array.length | 0);

    while (i < num3) {
      $T0F().BlockCopy(
        array, 
        0, 
        array, 
        i, 
        $S0E().CallStatic($T0E(), "Min", null, num2, ((num3 - i) | 0))
      );
      i = ((i + num2) | 0);
      num2 = Math.imul(num2, 2);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Base.Common.ImageData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "Blt", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $.Int32, $.Type, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      ImageData_Blt
    );

    $.Method({Static:true , Public:true }, "ClipBlt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ImageData_ClipBlt
    );

    $.Method({Static:true , Public:true }, "CreateImage", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Fusee.Base.Common.ColorUint")
        ]), 
      ImageData_CreateImage
    );

    $.Method({Static:false, Public:true }, "get_BytesPerPixel", 
      JSIL.MethodSignature.Return($.Int32), 
      ImageData_get_BytesPerPixel
    );

    $.Method({Static:false, Public:true }, "get_HasAlpha", 
      JSIL.MethodSignature.Return($.Boolean), 
      ImageData_get_HasAlpha
    );

    $.Method({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean), 
      ImageData_get_IsEmpty
    );

    $.Method({Static:false, Public:true }, "GetPixel", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ColorUint"), [$.Int32, $.Int32]), 
      ImageData_GetPixel
    );

    $.Method({Static:true , Public:false}, "MemSet", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Byte]), 
      ImageData_MemSet$00
    );

    $.Method({Static:true , Public:true }, "MemSet", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])]), 
      ImageData_MemSet$01
    );

    $.Field({Static:false, Public:true }, "Width", $.Int32);

    $.Field({Static:false, Public:true }, "Height", $.Int32);

    $.Field({Static:false, Public:true }, "PixelFormat", $asm00.TypeRef("Fusee.Base.Common.ImagePixelFormat"));

    $.Field({Static:false, Public:true }, "Stride", $.Int32);

    $.Field({Static:false, Public:true }, "PixelData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "BytesPerPixel", $.Int32);

    $.Property({Static:false, Public:true }, "HasAlpha", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Base.Common.ImageData+CopyFunc */ 

JSIL.MakeDelegate("Fusee.Base.Common.ImageData+CopyFunc", false, [], 
  new JSIL.MethodSignature(null, [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]));

/* class Fusee.Base.Common.ImageData+<>c__DisplayClass14_0 */ 

(function $l$gc__DisplayClass14_0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Array)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Byte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm15.TypeRef("System.Array"), $asm15.TypeRef("System.Int32"), 
        $asm15.TypeRef("System.Array"), $asm15.TypeRef("System.Int32"), 
        $asm15.TypeRef("System.Int32")
      ]))) ();
  };


  function $l$gc__DisplayClass14_0__ctor () {
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__0 (idl, isl) {
    $S00().CallStatic($T01(), "Copy", null, 
      this.src.PixelData, 
      (((isl | 0) + Math.imul(this.xSrc, (this.src).get_BytesPerPixel())) | 0), 
      this.dst.PixelData, 
      (((idl | 0) + Math.imul(this.xDst, (this.dst).get_BytesPerPixel())) | 0), 
      Math.imul(this.width, (this.dst).get_BytesPerPixel())
    );
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__1 (idp, isp) {
    this.dst.PixelData[idp] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 1) | 0)] = (this.src.PixelData[(((isp | 0) + 1) | 0)] | 0);
    this.dst.PixelData[(((idp | 0) + 2) | 0)] = (this.src.PixelData[(((isp | 0) + 2) | 0)] | 0);
    this.dst.PixelData[(((idp | 0) + 3) | 0)] = 255;
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__2 (idp, isp) {
    this.dst.PixelData[idp] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 1) | 0)] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 2) | 0)] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 3) | 0)] = 255;
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__3 (idp, isp) {
    this.dst.PixelData[idp] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 1) | 0)] = (this.src.PixelData[(((isp | 0) + 1) | 0)] | 0);
    this.dst.PixelData[(((idp | 0) + 2) | 0)] = (this.src.PixelData[(((isp | 0) + 2) | 0)] | 0);
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__4 (idp, isp) {
    this.dst.PixelData[idp] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 1) | 0)] = (this.src.PixelData[isp] | 0);
    this.dst.PixelData[(((idp | 0) + 2) | 0)] = (this.src.PixelData[isp] | 0);
  }; 

  function $l$gc__DisplayClass14_0_$lBlt$gb__5 (idp, isp) {
    var num = (this.src.PixelData[isp] | 0);
    var num2 = (this.src.PixelData[(((isp | 0) + 1) | 0)] | 0);
    var num3 = (this.src.PixelData[(((isp | 0) + 2) | 0)] | 0);
    this.dst.PixelData[idp] = (((((((((((((num + num) | 0) + num3) | 0) + num2) | 0) + num2) | 0) + num2) | 0) / 6) | 0) & 0xFF);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Base.Common.ImageData+<>c__DisplayClass14_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass14_0__ctor
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__0", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__0
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__1", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__1
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__2", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__2
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__3", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__3
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__4", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__4
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__5", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_0_$lBlt$gb__5
    );

    $.Field({Static:false, Public:true }, "src", $asm00.TypeRef("Fusee.Base.Common.ImageData"));

    $.Field({Static:false, Public:true }, "xSrc", $.Int32);

    $.Field({Static:false, Public:true }, "dst", $asm00.TypeRef("Fusee.Base.Common.ImageData"));

    $.Field({Static:false, Public:true }, "xDst", $.Int32);

    $.Field({Static:false, Public:true }, "width", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Base.Common.ImageData+<>c__DisplayClass14_1 */ 

(function $l$gc__DisplayClass14_1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Fusee.Base.Common.ImageData)) ();
  };


  function $l$gc__DisplayClass14_1__ctor () {
  }; 

  function $l$gc__DisplayClass14_1_$lBlt$gb__6 (idl, isl) {
    var num = (((idl | 0) + Math.imul(this.CS$$l$g8__locals1.xDst, (this.CS$$l$g8__locals1.dst).get_BytesPerPixel())) | 0);
    var num2 = (((isl | 0) + Math.imul(this.CS$$l$g8__locals1.xSrc, (this.CS$$l$g8__locals1.src).get_BytesPerPixel())) | 0);

    for (var i = 0; i < (this.CS$$l$g8__locals1.width | 0); i = ((i + 1) | 0)) {
      this.CopyPixel(num, num2);
      num = ((num + ((this.CS$$l$g8__locals1.dst).get_BytesPerPixel() | 0)) | 0);
      num2 = ((num2 + ((this.CS$$l$g8__locals1.src).get_BytesPerPixel() | 0)) | 0);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Base.Common.ImageData+<>c__DisplayClass14_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass14_1__ctor
    );

    $.Method({Static:false, Public:false}, "$lBlt$gb__6", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      $l$gc__DisplayClass14_1_$lBlt$gb__6
    );

    $.Field({Static:false, Public:true }, "CopyPixel", $asm00.TypeRef("Fusee.Base.Common.ImageData+CopyFunc"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm00.TypeRef("Fusee.Base.Common.ImageData+<>c__DisplayClass14_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Base.Common.Path */ 

(function Path$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm15.System.Char))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm15.System.String))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Text.StringBuilder)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.NotImplementedException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.Globalization.CultureInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm15.System.Globalization.CompareOptions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.String"), [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Char")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Text.StringBuilder"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Int32"), [
        $asm15.TypeRef("System.String"), $asm15.TypeRef("System.String"), 
        $asm15.TypeRef("System.Globalization.CultureInfo"), $asm15.TypeRef("System.Globalization.CompareOptions")
      ]))) ();
  };


  function Path_ChangeExtension (path, extension) {
    if (path === null) {
      var result = null;
    } else {
      var flag2 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
      if (flag2) {
        throw $S00().Construct("Illegal characters in path.");
      }
      var num = ($thisType.findExtension(path) | 0);
      var flag3 = extension === null;
      if (flag3) {
        result = (
          (num < 0)
             ? path
             : path.substr(0, num))
        ;
      } else {
        var flag4 = (extension.length | 0) === 0;
        if (flag4) {
          result = (
            (num < 0)
               ? JSIL.ConcatString(path, ".")
               : path.substr(0, ((num + 1) | 0)))
          ;
        } else {
          var flag5 = (path.length | 0) > 0;
          if (flag5) {
            var flag6 = ((extension.length | 0) > 0) && 
            (((extension[0]).charCodeAt(0) | 0) !== ((".").charCodeAt(0) | 0));
            if (flag6) {
              extension = (JSIL.ConcatString(".", extension));
            }
          } else {
            extension = $T01().Empty;
          }
          if (num < 0) {
            result = (JSIL.ConcatString(path, extension));
          } else {
            if (num > 0) {
              var str = (path.substr(0, num));
              result = (JSIL.ConcatString(str, extension));
            } else {
              result = extension;
            }
          }
        }
      }
    }
    return result;
  }; 

  function Path_CleanPath (s) {
    var $temp00, $temp01;
    var length = (s.length | 0);
    var num = 0;
    var num2 = 0;
    var c = (s[0]);
    var flag = !((length <= 2) || 
      ((c.charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0))) && 
    (((s[1]).charCodeAt(0) | 0) === (("\\").charCodeAt(0) | 0));
    if (flag) {
      num2 = 2;
    }
    if ((length === 1) && (((c.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || 
        ((c.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0)))) {
      var result = s;
    } else {

      for (var i = num2; i < length; i = ((i + 1) | 0)) {
        var c2 = (s[i]);
        var flag3 = ((c2.charCodeAt(0) | 0) !== ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) && 
        ((c2.charCodeAt(0) | 0) !== ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0));
        if (!flag3) {
          var flag4 = ((i + 1) | 0) === length;
          if (flag4) {
            num = ((num + 1) | 0);
          } else {
            c2 = (s[((i + 1) | 0)]);
            var flag5 = ((c2.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || 
            ((c2.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0));
            if (flag5) {
              num = ((num + 1) | 0);
            }
          }
        }
      }
      var flag6 = num === 0;
      if (flag6) {
        result = s;
      } else {
        var array = JSIL.Array.New($T00(), ((length - num) | 0));
        var flag7 = num2 > 0;
        if (flag7) {
          array[0] = "\\";
          array[1] = "\\";
        }
        var j = num2;
        var num3 = num2;

        while ((j < length) && (num3 < (array.length | 0))) {
          var c3 = (s[j]);
          var flag8 = ((c3.charCodeAt(0) | 0) !== ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) && 
          ((c3.charCodeAt(0) | 0) !== ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0));
          if (flag8) {
            array[($temp00 = num3, 
              num3 = ((num3 + 1) | 0), 
              $temp00)] = c3;
          } else {
            var flag9 = ((num3 + 1) | 0) !== (array.length | 0);
            if (flag9) {
              array[($temp01 = num3, 
                num3 = ((num3 + 1) | 0), 
                $temp01)] = $thisType.DirectorySeparatorChar;

            $loop2: 
              for (; j < ((length - 1) | 0); j = ((j + 1) | 0)) {
                c3 = (s[((j + 1) | 0)]);
                var flag10 = ((c3.charCodeAt(0) | 0) !== ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) && 
                ((c3.charCodeAt(0) | 0) !== ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0));
                if (flag10) {
                  break $loop2;
                }
              }
            }
          }
          j = ((j + 1) | 0);
        }
        result = $S01().Construct(array);
      }
    }
    return result;
  }; 

  function Path_Combine$00 (path1, path2) {
    if (path1 === null) {
      throw $S02().Construct("path1");
    }
    if (path2 === null) {
      throw $S02().Construct("path2");
    }
    var flag3 = (path1.length | 0) === 0;
    if (flag3) {
      var result = path2;
    } else {
      var flag4 = (path2.length | 0) === 0;
      if (flag4) {
        result = path1;
      } else {
        var flag5 = (System.String.IndexOfAny(path1, $thisType._invalidPathChars)) !== -1;
        if (flag5) {
          throw $S00().Construct("Illegal characters in path.");
        }
        var flag6 = (System.String.IndexOfAny(path2, $thisType._invalidPathChars)) !== -1;
        if (flag6) {
          throw $S00().Construct("Illegal characters in path.");
        }
        var flag7 = $thisType.IsPathRooted(path2);
        if (flag7) {
          result = path2;
        } else {
          var c = (path1[(((path1.length | 0) - 1) | 0)]);
          var flag8 = !(((c.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || 
            ((c.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0))) && 
          ((c.charCodeAt(0) | 0) !== ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0));
          if (flag8) {
            result = ((path1 + $thisType.DirectorySeparatorStr + path2));
          } else {
            result = (JSIL.ConcatString(path1, path2));
          }
        }
      }
    }
    return result;
  }; 

  function Path_Combine$01 (paths) {
    if (paths === null) {
      throw $S02().Construct("paths");
    }
    var stringBuilder = $S03().Construct();
    var num = (paths.length | 0);
    var flag2 = false;

    for (var i = 0; i < (paths.length | 0); i = ((i + 1) | 0)) {
      var text = paths[i];
      if (text === null) {
        throw $S04().Construct("paths", "One of the paths contains a null value");
      }
      var flag4 = (text.length | 0) === 0;
      if (!flag4) {
        var flag5 = (System.String.IndexOfAny(text, $thisType._invalidPathChars)) !== -1;
        if (flag5) {
          throw $S00().Construct("Illegal characters in path.");
        }
        var flag6 = flag2;
        if (flag6) {
          flag2 = false;
          $S05().CallVirtual("Append", null, stringBuilder, $thisType.DirectorySeparatorStr);
        }
        num = ((num - 1) | 0);
        var flag7 = $thisType.IsPathRooted(text);
        if (flag7) {
          stringBuilder.set_Length(0);
        }
        $S05().CallVirtual("Append", null, stringBuilder, text);
        var length = (text.length | 0);
        var flag8 = (length > 0) && 
        (num > 0);
        if (flag8) {
          var c = (text[((length - 1) | 0)]);
          var flag9 = !(((c.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || 
            ((c.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0))) && 
          ((c.charCodeAt(0) | 0) !== ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0));
          if (flag9) {
            flag2 = true;
          }
        }
      }
    }
    return stringBuilder.toString();
  }; 

  function Path_Combine$02 (path1, path2, path3) {
    if (path1 === null) {
      throw $S02().Construct("path1");
    }
    if (path2 === null) {
      throw $S02().Construct("path2");
    }
    if (path3 === null) {
      throw $S02().Construct("path3");
    }
    return $thisType.Combine(JSIL.Array.New($T01(), [path1, path2, path3]));
  }; 

  function Path_Combine$03 (path1, path2, path3, path4) {
    if (path1 === null) {
      throw $S02().Construct("path1");
    }
    if (path2 === null) {
      throw $S02().Construct("path2");
    }
    if (path3 === null) {
      throw $S02().Construct("path3");
    }
    if (path4 === null) {
      throw $S02().Construct("path4");
    }
    return $thisType.Combine(JSIL.Array.New($T01(), [path1, path2, path3, path4]));
  }; 

  function Path_findExtension (path) {
    if (path !== null) {
      var num = (path.lastIndexOf("."));
      var num2 = (System.String.LastIndexOfAny(path, $thisType.PathSeparatorChars));
      var flag2 = num > num2;
      if (flag2) {
        var result = num;
        return result;
      }
    }
    result = -1;
    return result;
  }; 

  function Path_GetDirectoryName (path) {
    var flag = (path == $T01().Empty);
    if (flag) {
      throw $S00().Construct("Invalid path");
    }
    var flag2 = (path === null) || 
    ($thisType.GetPathRoot(path) == path);
    if (flag2) {
      var result = null;
    } else {
      var flag3 = (path.trim().length | 0) === 0;
      if (flag3) {
        throw $S00().Construct("Argument string consists of whitespace characters only.");
      }
      var flag4 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) > -1;
      if (flag4) {
        throw $S00().Construct("Path contains invalid characters");
      }
      var num = (System.String.LastIndexOfAny(path, $thisType.PathSeparatorChars));
      var flag5 = num === 0;
      if (flag5) {
        num = ((num + 1) | 0);
      }
      var flag6 = num > 0;
      if (flag6) {
        var text = (path.substr(0, num));
        var length = (text.length | 0);
        var flag7 = !((length < 2) || 
          (($thisType.DirectorySeparatorChar.charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0))) && 
        (((text[((length - 1) | 0)]).charCodeAt(0) | 0) === ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0));
        if (flag7) {
          result = (JSIL.ConcatString(text, $thisType.DirectorySeparatorChar.toString()));
        } else {
          var flag8 = !((length !== 1) || 
            (($thisType.DirectorySeparatorChar.charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0)) || 
            ((path.length | 0) < 2)) && 
          (((path[num]).charCodeAt(0) | 0) === ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0));
          if (flag8) {
            result = (JSIL.ConcatString(text, $thisType.VolumeSeparatorChar.toString()));
          } else {
            result = $thisType.CleanPath(text);
          }
        }
      } else {
        result = $T01().Empty;
      }
    }
    return result;
  }; 

  function Path_GetExtension (path) {
    if (path === null) {
      var result = null;
    } else {
      var flag2 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
      if (flag2) {
        throw $S00().Construct("Illegal characters in path.");
      }
      var num = ($thisType.findExtension(path) | 0);
      if (num > -1) {
        var flag4 = num < (((path.length | 0) - 1) | 0);
        if (flag4) {
          result = (path.substr(num));
          return result;
        }
      }
      result = $T01().Empty;
    }
    return result;
  }; 

  function Path_GetFileName (path) {
    var flag = (path === null) || 
    ((path.length | 0) === 0);
    if (flag) {
      var result = path;
    } else {
      var flag2 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
      if (flag2) {
        throw $S00().Construct("Illegal characters in path.");
      }
      var num = (System.String.LastIndexOfAny(path, $thisType.PathSeparatorChars));
      if (num >= 0) {
        result = (path.substr(((num + 1) | 0)));
      } else {
        result = path;
      }
    }
    return result;
  }; 

  function Path_GetFileNameWithoutExtension (path) {
    return $thisType.ChangeExtension($thisType.GetFileName(path), null);
  }; 

  function Path_GetInvalidFileNameChars () {
    return JSIL.Array.New($T00(), ["\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\t", "\n", "\x0b", "\x0c", "\r", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f", "\"", "<", ">", "|", ":", "*", "?", "\\", "/"]);
  }; 

  function Path_GetInvalidPathChars () {
    return JSIL.Array.New($T00(), ["\"", "<", ">", "|", "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x08", "\t", "\n", "\x0b", "\x0c", "\r", "\x0e", "\x0f", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a", "\x1b", "\x1c", "\x1d", "\x1e", "\x1f"]);
  }; 

  function Path_GetPathRoot (path) {
    if (path === null) {
      var result = null;
    } else {
      var flag2 = (path.trim().length | 0) === 0;
      if (flag2) {
        throw $S00().Construct("The specified path is not of a legal form.");
      }
      var flag3 = !$thisType.IsPathRooted(path);
      if (flag3) {
        result = $T01().Empty;
      } else {
        if (($thisType.DirectorySeparatorChar.charCodeAt(0) | 0) === (("/").charCodeAt(0) | 0)) {
          result = (
            $thisType.IsDirectorySeparator(path[0])
               ? $thisType.DirectorySeparatorStr
               : $T01().Empty)
          ;
        } else {
          var num = 2;
          var flag5 = ((path.length | 0) === 1) && 
          $thisType.IsDirectorySeparator(path[0]);
          if (flag5) {
            result = $thisType.DirectorySeparatorStr;
          } else {
            var flag6 = (path.length | 0) < 2;
            if (flag6) {
              result = $T01().Empty;
            } else {
              var flag7 = $thisType.IsDirectorySeparator(path[0]) && 
              $thisType.IsDirectorySeparator(path[1]);
              if (flag7) {

                for (; (num < (path.length | 0)) && !$thisType.IsDirectorySeparator(path[num]); num = ((num + 1) | 0)) {
                }
                var flag8 = num < (path.length | 0);
                if (flag8) {

                  for (num = ((num + 1) | 0); (num < (path.length | 0)) && !$thisType.IsDirectorySeparator(path[num]); num = ((num + 1) | 0)) {
                  }
                }
                result = (($thisType.DirectorySeparatorStr + $thisType.DirectorySeparatorStr + System.String.Replace(path.substr(2, ((num - 2) | 0)), $thisType.AltDirectorySeparatorChar, $thisType.DirectorySeparatorChar)));
              } else {
                var flag9 = $thisType.IsDirectorySeparator(path[0]);
                if (flag9) {
                  result = $thisType.DirectorySeparatorStr;
                } else {
                  var flag10 = ((path[1]).charCodeAt(0) | 0) === ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0);
                  if (!flag10) {
                    throw $S06().Construct(" return Directory.GetCurrentDirectory().Substring(0, 2); ");
                  }
                  var flag11 = ((path.length | 0) >= 3) && 
                  $thisType.IsDirectorySeparator(path[2]);
                  if (flag11) {
                    num = ((num + 1) | 0);
                  }
                  result = (path.substr(0, num));
                }
              }
            }
          }
        }
      }
    }
    return result;
  }; 

  function Path_GetServerAndShare (path) {

    for (var num = 2; (num < (path.length | 0)) && !$thisType.IsDirectorySeparator(path[num]); num = ((num + 1) | 0)) {
    }
    var flag = num < (path.length | 0);
    if (flag) {

      for (num = ((num + 1) | 0); (num < (path.length | 0)) && !$thisType.IsDirectorySeparator(path[num]); num = ((num + 1) | 0)) {
      }
    }
    return System.String.Replace(path.substr(2, ((num - 2) | 0)), $thisType.AltDirectorySeparatorChar, $thisType.DirectorySeparatorChar);
  }; 

  function Path_HasExtension (path) {
    var flag = (path === null) || 
    ((path.trim().length | 0) === 0);
    if (flag) {
      var result = false;
    } else {
      var flag2 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
      if (flag2) {
        throw $S00().Construct("Illegal characters in path.");
      }
      var num = ($thisType.findExtension(path) | 0);
      result = (0 <= num) && 
      (num < (((path.length | 0) - 1) | 0));
    }
    return result;
  }; 

  function Path_IsDirectorySeparator (c) {
    return (((c.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || ((c.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0)));
  }; 

  function Path_IsPathRooted (path) {
    var flag = $T01().IsNullOrEmpty(path);
    if (flag) {
      var result = false;
    } else {
      var flag2 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
      if (flag2) {
        throw $S00().Construct("Illegal characters in path.");
      }
      var c = (path[0]);
      result = ((c.charCodeAt(0) | 0) === ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0)) || 
      ((c.charCodeAt(0) | 0) === ($thisType.AltDirectorySeparatorChar.charCodeAt(0) | 0)) || 
      (!($thisType.dirEqualsVolume || 
          ((path.length | 0) <= 1)) && 
        (((path[1]).charCodeAt(0) | 0) === ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0)));
    }
    return result;
  }; 

  function Path_IsPathSubsetOf (subset, path) {
    var flag = (subset.length | 0) > (path.length | 0);
    if (flag) {
      var result = false;
    } else {
      var num = (System.String.LastIndexOfAny(subset, $thisType.PathSeparatorChars));
      var flag2 = ($T01().Compare(
        subset, 
        0, 
        path, 
        0, 
        num
      ) | 0) > 0;
      if (flag2) {
        result = false;
      } else {
        num = ((num + 1) | 0);
        var num2 = (System.String.IndexOfAny(path, $thisType.PathSeparatorChars, num));
        var flag3 = num2 >= num;
        if (flag3) {
          result = ($T01().Compare(
            subset, 
            num, 
            path, 
            num, 
            (((path.length | 0) - num2) | 0)
          ) | 0) === 0;
        } else {
          var flag4 = (subset.length | 0) !== (path.length | 0);
          result = !flag4 && 
          (($T01().Compare(
              subset, 
              num, 
              path, 
              num, 
              (((subset.length | 0) - num) | 0)
            ) | 0) === 0);
        }
      }
    }
    return result;
  }; 

  function Path_SameRoot (root, path) {
    var flag = ((root.length | 0) < 2) || 
    ((path.length | 0) < 2);
    if (flag) {
      var result = false;
    } else {
      var flag2 = $thisType.IsDirectorySeparator(root[0]) && 
      $thisType.IsDirectorySeparator(root[1]);
      if (flag2) {
        var flag3 = !$thisType.IsDirectorySeparator(path[0]) || 
        !$thisType.IsDirectorySeparator(path[1]);
        if (flag3) {
          result = false;
        } else {
          var serverAndShare = $thisType.GetServerAndShare(root);
          var serverAndShare2 = $thisType.GetServerAndShare(path);
          result = ($S07().CallStatic($T01(), "Compare", null, serverAndShare, serverAndShare2, $T0B().get_InvariantCulture(), $T0C().None) | 0) === 0;
        }
      } else {
        var flag4 = !(root[0]).Equals(path[0]);
        if (flag4) {
          result = false;
        } else {
          var flag5 = ((path[1]).charCodeAt(0) | 0) !== ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0);
          if (flag5) {
            result = false;
          } else {
            var flag6 = ((root.length | 0) > 2) && 
            ((path.length | 0) > 2);
            result = !flag6 || 
            ($thisType.IsDirectorySeparator(root[2]) && 
              $thisType.IsDirectorySeparator(path[2]));
          }
        }
      }
    }
    return result;
  }; 

  function Path_Validate$04 (path) {
    $thisType.Validate(path, "path");
  }; 

  function Path_Validate$05 (path, parameterName) {
    if (path === null) {
      throw $S02().Construct(parameterName);
    }
    var flag2 = JSIL.UnknownMember("System.Boolean System.String::IsNullOrWhiteSpace(System.String)").LValue;
    if (flag2) {
      throw $S00().Construct("Path is empty");
    }
    var flag3 = (System.String.IndexOfAny(path, $thisType._invalidPathChars)) !== -1;
    if (flag3) {
      throw $S00().Construct("Path contains invalid chars");
    }
    var num = (path.indexOf(":"));
    var flag4 = (num >= 0) && 
    (num !== 1);
    if (flag4) {
      throw $S00().Construct(parameterName);
    }
  }; 

  JSIL.MakeStaticClass("Fusee.Base.Common.Path", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "ChangeExtension", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      Path_ChangeExtension
    );

    $.Method({Static:true , Public:false}, "CleanPath", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_CleanPath
    );

    $.Method({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      Path_Combine$00
    );

    $.Method({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String])]), 
      Path_Combine$01
    )
      .Parameter(0, "paths", function (_) {
          _.Attribute($asm15.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ]), 
      Path_Combine$02
    );

    $.Method({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ]), 
      Path_Combine$03
    );

    $.Method({Static:true , Public:false}, "findExtension", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      Path_findExtension
    );

    $.Method({Static:true , Public:true }, "GetDirectoryName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetDirectoryName
    );

    $.Method({Static:true , Public:true }, "GetExtension", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetExtension
    );

    $.Method({Static:true , Public:true }, "GetFileName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetFileName
    );

    $.Method({Static:true , Public:true }, "GetFileNameWithoutExtension", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetFileNameWithoutExtension
    );

    $.Method({Static:true , Public:true }, "GetInvalidFileNameChars", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char])), 
      Path_GetInvalidFileNameChars
    );

    $.Method({Static:true , Public:true }, "GetInvalidPathChars", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char])), 
      Path_GetInvalidPathChars
    );

    $.Method({Static:true , Public:true }, "GetPathRoot", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetPathRoot
    );

    $.Method({Static:true , Public:false}, "GetServerAndShare", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Path_GetServerAndShare
    );

    $.Method({Static:true , Public:true }, "HasExtension", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Path_HasExtension
    );

    $.Method({Static:true , Public:false}, "IsDirectorySeparator", 
      new JSIL.MethodSignature($.Boolean, [$.Char]), 
      Path_IsDirectorySeparator
    );

    $.Method({Static:true , Public:true }, "IsPathRooted", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Path_IsPathRooted
    );

    $.Method({Static:true , Public:false}, "IsPathSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String]), 
      Path_IsPathSubsetOf
    );

    $.Method({Static:true , Public:false}, "SameRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String]), 
      Path_SameRoot
    );

    $.Method({Static:true , Public:false}, "Validate", 
      JSIL.MethodSignature.Action($.String), 
      Path_Validate$04
    );

    $.Method({Static:true , Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.String]), 
      Path_Validate$05
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_invalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AltDirectorySeparatorChar", $.Char, "/");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DirectorySeparatorChar", $.Char, "\\");

    $.Field({Static:true , Public:true , ReadOnly:true }, "PathSeparator", $.Char, ";");

    $.Field({Static:true , Public:false, ReadOnly:true }, "DirectorySeparatorStr", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "VolumeSeparatorChar", $.Char, ":");

    $.Field({Static:true , Public:false, ReadOnly:true }, "PathSeparatorChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dirEqualsVolume", $.Boolean, function ($pi) {
        return ($pi.DirectorySeparatorChar === $pi.VolumeSeparatorChar);
      });


    function Path__cctor () {
      $thisType.VolumeSeparatorChar = ":";
      $thisType.DirectorySeparatorChar = "\\";
      $thisType.AltDirectorySeparatorChar = "/";
      $thisType.PathSeparator = ";";
      $thisType._invalidPathChars = $thisType.GetInvalidPathChars();
      $thisType.DirectorySeparatorStr = $thisType.DirectorySeparatorChar.toString();
      $thisType.PathSeparatorChars = JSIL.Array.New($T00(), [$thisType.DirectorySeparatorChar, $thisType.AltDirectorySeparatorChar, $thisType.VolumeSeparatorChar]);
      $thisType.dirEqualsVolume = ($thisType.DirectorySeparatorChar.charCodeAt(0) | 0) === ($thisType.VolumeSeparatorChar.charCodeAt(0) | 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Path__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

