/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm03 = JSIL.DeclareAssembly("Fusee.Engine.Common, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.Common");
/* class Fusee.Engine.Common.FuseeApplicationAttribute */ 

(function FuseeApplicationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Attribute)) ();
  };


  function FuseeApplicationAttribute__ctor () {
    this.Width = -1;
    this.Height = -1;
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Attribute"), 
      Name: "Fusee.Engine.Common.FuseeApplicationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FuseeApplicationAttribute__ctor
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Description", $.String);

    $.Field({Static:false, Public:true }, "Width", $.Int32);

    $.Field({Static:false, Public:true }, "Height", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm15.System.AttributeTargets.Class]; });

})();

/* enum Fusee.Engine.Common.GBufferHandle */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.GBufferHandle", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    GPositionHandle: 0, 
    GNormalHandle: 1, 
    GAlbedoHandle: 2, 
    GDepth: 3, 
    EnvMap: 4, 
  }
);

/* enum Fusee.Engine.Common.WritableTextureFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.WritableTextureFormat", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Depth: 0, 
    CubeMap: 1, 
    GBuffer: 2, 
  }
);

/* interface Fusee.Engine.Common.IAudioStreamImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IAudioStreamImp", true, [], function ($) {
    $.Method({}, "set_Volume", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Volume", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Loop", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Loop", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Panning", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Panning", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "Play", JSIL.MethodSignature.Void);
    $.Method({}, "Play", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "Pause", JSIL.MethodSignature.Void);
    $.Method({}, "Stop", JSIL.MethodSignature.Void);
    $.Property({}, "Volume");
    $.Property({}, "Loop");
    $.Property({}, "Panning");
  }, []);

/* enum Fusee.Engine.Common.DeviceCategory */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.DeviceCategory", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Mouse: 0, 
    Keyboard: 1, 
    GameController: 2, 
    Touch: 3, 
    Kinect: 4, 
    Skeleton: 5, 
    SixDOF: 6, 
    Other: 7, 
  }
);

/* enum Fusee.Engine.Common.AxisNature */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.AxisNature", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Position: 0, 
    Speed: 1, 
    Unknown: 2, 
  }
);

/* enum Fusee.Engine.Common.AxisDirection */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.AxisDirection", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    X: 0, 
    Y: 1, 
    Z: 2, 
    Unknown: 3, 
  }
);

/* enum Fusee.Engine.Common.AxisBoundedType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.AxisBoundedType", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unbound: 0, 
    Constant: 1, 
    OtherAxis: 2, 
  }
);

/* struct Fusee.Engine.Common.AxisDescription */ 

(function AxisDescription$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.AxisDescription", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Id", $.Int32);

    $.Field({Static:false, Public:true }, "Direction", $asm03.TypeRef("Fusee.Engine.Common.AxisDirection"));

    $.Field({Static:false, Public:true }, "Nature", $asm03.TypeRef("Fusee.Engine.Common.AxisNature"));

    $.Field({Static:false, Public:true }, "Bounded", $asm03.TypeRef("Fusee.Engine.Common.AxisBoundedType"));

    $.Field({Static:false, Public:true }, "MinValueOrAxis", $.Single);

    $.Field({Static:false, Public:true }, "MaxValueOrAxis", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.AxisImpDescription */ 

(function AxisImpDescription$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.AxisImpDescription", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "AxisDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));

    $.Field({Static:false, Public:true }, "PollAxis", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.ButtonImpDescription */ 

(function ButtonImpDescription$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.ButtonImpDescription", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "ButtonDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));

    $.Field({Static:false, Public:true }, "PollButton", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.ButtonDescription */ 

(function ButtonDescription$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.ButtonDescription", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Id", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.AxisValueChangedArgs */ 

(function AxisValueChangedArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function AxisValueChangedArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.AxisValueChangedArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AxisValueChangedArgs__ctor
    );

    $.Field({Static:false, Public:true }, "Value", $.Single);

    $.Field({Static:false, Public:true }, "Axis", $asm03.TypeRef("Fusee.Engine.Common.AxisDescription"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.ButtonValueChangedArgs */ 

(function ButtonValueChangedArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function ButtonValueChangedArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.ButtonValueChangedArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ButtonValueChangedArgs__ctor
    );

    $.Field({Static:false, Public:true }, "Pressed", $.Boolean);

    $.Field({Static:false, Public:true }, "Button", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.Common.IInputDeviceImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IInputDeviceImp", true, [], function ($) {
    $.Method({}, "get_Id", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Desc", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Category", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.DeviceCategory")));
    $.Method({}, "get_AxesCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_AxisImpDesc", JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])));
    $.Method({}, "GetAxis", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "add_AxisValueChanged", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])));
    $.Method({}, "remove_AxisValueChanged", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])));
    $.Method({}, "get_ButtonCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_ButtonImpDesc", JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])));
    $.Method({}, "GetButton", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "add_ButtonValueChanged", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])));
    $.Method({}, "remove_ButtonValueChanged", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])));
    $.Property({}, "Id");
    $.Property({}, "Desc");
    $.Property({}, "Category");
    $.Property({}, "AxesCount");
    $.Property({}, "AxisImpDesc");
    $.Property({}, "ButtonCount");
    $.Property({}, "ButtonImpDesc");
  }, []);

/* interface Fusee.Engine.Common.IInputDeviceImpOld */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IInputDeviceImpOld", true, [], function ($) {
    $.Method({}, "GetXAxis", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "GetYAxis", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "GetZAxis", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "GetName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetPressedButton", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "IsButtonDown", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "IsButtonPressed", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "GetButtonCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetCategory", JSIL.MethodSignature.Return($.String));
  }, []);

/* class Fusee.Engine.Common.NewDeviceImpConnectedArgs */ 

(function NewDeviceImpConnectedArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function NewDeviceImpConnectedArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.NewDeviceImpConnectedArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NewDeviceImpConnectedArgs__ctor
    );

    $.Field({Static:false, Public:true }, "InputDeviceImp", $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.DeviceImpDisconnectedArgs */ 

(function DeviceImpDisconnectedArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function DeviceImpDisconnectedArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.DeviceImpDisconnectedArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DeviceImpDisconnectedArgs__ctor
    );

    $.Field({Static:false, Public:true }, "Id", $.String);

    $.Field({Static:false, Public:true }, "Desc", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.Common.IInputDriverImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IInputDriverImp", true, [], function ($) {
    $.Method({}, "get_Devices", JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")])));
    $.Method({}, "get_DriverId", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_DriverDesc", JSIL.MethodSignature.Return($.String));
    $.Method({}, "add_NewDeviceConnected", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")])));
    $.Method({}, "remove_NewDeviceConnected", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")])));
    $.Method({}, "add_DeviceDisconnected", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")])));
    $.Method({}, "remove_DeviceDisconnected", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")])));
    $.Property({}, "Devices");
    $.Property({}, "DriverId");
    $.Property({}, "DriverDesc");
  }, [$asm15.TypeRef("System.IDisposable")]);

/* struct Fusee.Engine.Common.CharInfoStruct */ 

(function CharInfoStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.CharInfoStruct", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "AdvanceX", $.Single);

    $.Field({Static:false, Public:true }, "AdvanceY", $.Single);

    $.Field({Static:false, Public:true }, "BitmapW", $.Single);

    $.Field({Static:false, Public:true }, "BitmapH", $.Single);

    $.Field({Static:false, Public:true }, "BitmapL", $.Single);

    $.Field({Static:false, Public:true }, "BitmapT", $.Single);

    $.Field({Static:false, Public:true }, "TexOffX", $.Single);

    $.Field({Static:false, Public:true }, "TexOffY", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.Common.IFont */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IFont", true, [], function ($) {
    $.Method({}, "get_TexAtlas", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ITexture")));
    $.Method({}, "get_Width", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Height", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_FontSize", JSIL.MethodSignature.Return($.UInt32));
    $.Method({}, "get_UseKerning", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_UseKerning", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_CharInfo", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Fusee.Engine.Common.CharInfoStruct")])));
    $.Property({}, "TexAtlas");
    $.Property({}, "Width");
    $.Property({}, "Height");
    $.Property({}, "FontSize");
    $.Property({}, "UseKerning");
    $.Property({}, "CharInfo");
  }, []);

/* interface Fusee.Engine.Common.IBoxShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IBoxShapeImp", true, [], function ($) {
    $.Method({}, "get_HalfExtents", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Property({}, "HalfExtents");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.ICapsuleShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ICapsuleShapeImp", true, [], function ($) {
    $.Method({}, "get_HalfHeight", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_Radius", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_UpAxis", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "HalfHeight");
    $.Property({}, "Radius");
    $.Property({}, "UpAxis");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.ICollisionShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ICollisionShapeImp", true, [], function ($) {
    $.Method({}, "get_Margin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Margin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_LocalScaling", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_LocalScaling", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_UserObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_UserObject", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Margin");
    $.Property({}, "LocalScaling");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.Common.ICompoundShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ICompoundShapeImp", true, [], function ($) {
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.IBoxShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.ISphereShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.ICapsuleShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.IConeShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.ICylinderShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.IMultiSphereShapeImp")]));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm03.TypeRef("Fusee.Engine.Common.IEmptyShapeImp")]));
    $.Method({}, "CalculatePrincipalAxisTransform", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $asm07.TypeRef("Fusee.Math.Core.float3")
        ]));
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.IConeShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IConeShapeImp", true, [], function ($) {
    $.Method({}, "get_ConeUpIndex", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_ConeUpIndex", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_Height", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_Radius", JSIL.MethodSignature.Return($.Single));
    $.Property({}, "ConeUpIndex");
    $.Property({}, "Height");
    $.Property({}, "Radius");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.IConeTwistConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IConeTwistConstraintImp", true, [], function ($) {
    $.Method({}, "get_AFrame", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_BFrame", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "CalcAngleInfo", JSIL.MethodSignature.Void);
    $.Method({}, "CalcAngleInfo2", new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")
        ]));
    $.Method({}, "EnableMotor", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_FixThresh", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_FixThresh", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_FrameOffsetA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "GetPointForAngle", new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$.Single, $.Single]));
    $.Method({}, "get_IsPastSwingLimit", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetAngularOnly", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "SetDamping", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [$.Int32, $.Single]));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]));
    $.Method({}, "SetMaxMotorImpulse", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetMaxMotorImpulseNormalized", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetMotorTarget", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.Quaternion")));
    $.Method({}, "SetMotorTargetInConstraintSpace", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.Quaternion")));
    $.Method({}, "get_SolveSwingLimit", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_SolveTwistLimit", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_SwingSpan1", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_SwingSpan2", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_TwistAngle", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_TwistLimitSign", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_TwistSpan", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "UpdateRhs", JSIL.MethodSignature.Action($.Single));
    $.Property({}, "AFrame");
    $.Property({}, "BFrame");
    $.Property({}, "FixThresh");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "IsPastSwingLimit");
    $.Property({}, "SolveSwingLimit");
    $.Property({}, "SolveTwistLimit");
    $.Property({}, "SwingSpan1");
    $.Property({}, "SwingSpan2");
    $.Property({}, "TwistAngle");
    $.Property({}, "TwistLimitSign");
    $.Property({}, "TwistSpan");
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.IConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IConstraintImp", true, [], function ($) {
    $.Method({}, "get_RigidBodyA", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp")));
    $.Method({}, "get_RigidBodyB", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp")));
    $.Method({}, "GetUid", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_UserObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_UserObject", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "RigidBodyA");
    $.Property({}, "RigidBodyB");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.Common.IConvexHullShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IConvexHullShapeImp", true, [], function ($) {
    $.Method({}, "AddPoint", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "GetScaledPoint", new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$.Int32]));
    $.Method({}, "GetUnscaledPoints", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])));
    $.Method({}, "GetNumPoints", JSIL.MethodSignature.Return($.Int32));
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.ICylinderShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ICylinderShapeImp", true, [], function ($) {
    $.Method({}, "get_HalfExtents", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_Radius", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_UpAxis", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "HalfExtents");
    $.Property({}, "Radius");
    $.Property({}, "UpAxis");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.IDynamicWorldImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IDynamicWorldImp", true, [], function ($) {
    $.Method({}, "get_Gravity", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_Gravity", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "AddRigidBody", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), [
          $.Single, $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")
        ]));
    $.Method({}, "GetRigidBody", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), [$.Int32]));
    $.Method({}, "StepSimulation", new JSIL.MethodSignature($.Int32, [
          $.Single, $.Int32, 
          $.Single
        ]));
    $.Method({}, "NumberRigidBodies", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "AddPoint2PointConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IPoint2PointConstraintImp"), [$asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "AddPoint2PointConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IPoint2PointConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3")
        ]));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IHingeConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IHingeConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $.Boolean
        ]));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IHingeConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $.Boolean
        ]));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IHingeConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddSliderConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ISliderConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddSliderConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ISliderConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddGearConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IGearConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $.Single
        ]));
    $.Method({}, "AddConeTwistConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IConeTwistConstraintImp"), [$asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "AddConeTwistConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IConeTwistConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")
        ]));
    $.Method({}, "AddGeneric6DofConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IGeneric6DofConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddGeneric6DofConstraint", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IGeneric6DofConstraintImp"), [
          $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), $asm03.TypeRef("Fusee.Engine.Common.IRigidBodyImp"), 
          $asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4"), 
          $.Boolean
        ]));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IBoxShapeImp"), [$.Single]));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IBoxShapeImp"), [$asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IBoxShapeImp"), [
          $.Single, $.Single, 
          $.Single
        ]));
    $.Method({}, "AddSphereShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ISphereShapeImp"), [$.Single]));
    $.Method({}, "AddCapsuleShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ICapsuleShapeImp"), [$.Single, $.Single]));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ICylinderShapeImp"), [$.Single]));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ICylinderShapeImp"), [$asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ICylinderShapeImp"), [
          $.Single, $.Single, 
          $.Single
        ]));
    $.Method({}, "AddConeShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IConeShapeImp"), [$.Single, $.Single]));
    $.Method({}, "AddMultiSphereShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IMultiSphereShapeImp"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")]), $jsilcore.TypeRef("System.Array", [$.Single])]));
    $.Method({}, "AddCompoundShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ICompoundShapeImp"), [$.Boolean]));
    $.Method({}, "AddEmptyShape", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IEmptyShapeImp")));
    $.Method({}, "AddConvexHullShape", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IConvexHullShapeImp")));
    $.Method({}, "AddConvexHullShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IConvexHullShapeImp"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")]), $.Boolean]));
    $.Method({}, "AddStaticPlaneShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IStaticPlaneShapeImp"), [$asm07.TypeRef("Fusee.Math.Core.float3"), $.Single]));
    $.Method({}, "AddGImpactMeshShape", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IGImpactMeshShapeImp"), [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])]));
    $.Method({}, "NumberConstraints", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Dispose", JSIL.MethodSignature.Void);
    $.Property({}, "Gravity");
  }, []);

/* interface Fusee.Engine.Common.IEmptyShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IEmptyShapeImp", true, [], function ($) {
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.IGearConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IGearConstraintImp", true, [], function ($) {
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.IGeneric6DofConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IGeneric6DofConstraintImp", true, [], function ($) {
    $.Method({}, "get_AngularLowerLimit", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_AngularLowerLimit", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_AngularUpperLimit", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_AngularUpperLimit", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "CalcAnchorPos", JSIL.MethodSignature.Void);
    $.Method({}, "CalculateTransforms", JSIL.MethodSignature.Void);
    $.Method({}, "CalculateTransforms", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "get_CalculatedTransformA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_CalculatedTransformB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "set_FrameOffsetA", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "set_FrameOffsetB", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "GetAngle", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "GetAxis", new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$.Int32]));
    $.Method({}, "GetRelativePivotPosition", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "IsLimited", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "get_LinearLowerLimit", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_LinearLowerLimit", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_LinearUpperLimit", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_LinearUpperLimit", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "SetAxis", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "SetFrames", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]));
    $.Method({}, "TestAngularLimitMotor", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "get_UseFrameOffset", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_UseFrameOffset", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "UpdateRhs", JSIL.MethodSignature.Action($.Single));
    $.Property({}, "AngularLowerLimit");
    $.Property({}, "AngularUpperLimit");
    $.Property({}, "CalculatedTransformA");
    $.Property({}, "CalculatedTransformB");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "LinearLowerLimit");
    $.Property({}, "LinearUpperLimit");
    $.Property({}, "UseFrameOffset");
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.IGImpactMeshShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IGImpactMeshShapeImp", true, [], function ($) {
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* enum Fusee.Engine.Common.HingeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.HingeFlags", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    HingeFlagsStopCfm: 1, 
    HingeFlagsStopErp: 2, 
    HingeFlagsNormCfm: 4, 
  }
);

/* interface Fusee.Engine.Common.IHingeConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IHingeConstraintImp", true, [], function ($) {
    $.Method({}, "get_AngularOnly", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_AngularOnly", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_EnableMotor", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_EnableMotor", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "EnableAngularMotor", new JSIL.MethodSignature(null, [
          $.Boolean, $.Single, 
          $.Single
        ]));
    $.Method({}, "SetMotorTarget", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.Quaternion"), $.Single]));
    $.Method({}, "SetMotorTarget", new JSIL.MethodSignature(null, [$.Single, $.Single]));
    $.Method({}, "get_MaxMotorImpulse", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_MaxMotorImpulse", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_MotorTargetVelocity", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_FrameA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "SetAxis", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "GetHingeAngle", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "GetHingeAngle", new JSIL.MethodSignature($.Single, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ]));
    $.Method({}, "get_SolverLimit", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_LowerLimit", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_UpperLimit", JSIL.MethodSignature.Return($.Single));
    $.Property({}, "AngularOnly");
    $.Property({}, "EnableMotor");
    $.Property({}, "MaxMotorImpulse");
    $.Property({}, "MotorTargetVelocity");
    $.Property({}, "FrameA");
    $.Property({}, "FrameB");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "SolverLimit");
    $.Property({}, "LowerLimit");
    $.Property({}, "UpperLimit");
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.IAttribImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IAttribImp", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.Common.IMeshImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IMeshImp", true, [], function ($) {
    $.Method({}, "InvalidateVertices", JSIL.MethodSignature.Void);
    $.Method({}, "get_VerticesSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "InvalidateNormals", JSIL.MethodSignature.Void);
    $.Method({}, "get_NormalsSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "InvalidateColors", JSIL.MethodSignature.Void);
    $.Method({}, "get_ColorsSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "InvalidateTriangles", JSIL.MethodSignature.Void);
    $.Method({}, "get_TrianglesSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_UVsSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "InvalidateUVs", JSIL.MethodSignature.Void);
    $.Method({}, "InvalidateBoneWeights", JSIL.MethodSignature.Void);
    $.Method({}, "get_BoneWeightsSet", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "InvalidateBoneIndices", JSIL.MethodSignature.Void);
    $.Method({}, "get_BoneIndicesSet", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "VerticesSet");
    $.Property({}, "NormalsSet");
    $.Property({}, "ColorsSet");
    $.Property({}, "TrianglesSet");
    $.Property({}, "UVsSet");
    $.Property({}, "BoneWeightsSet");
    $.Property({}, "BoneIndicesSet");
  }, [])
  .Attribute($asm0F.TypeRef("ProtoBuf.ProtoContractAttribute"));

/* interface Fusee.Engine.Common.IMultiSphereShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IMultiSphereShapeImp", true, [], function ($) {
    $.Method({}, "GetSpherePosition", new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$.Int32]));
    $.Method({}, "GetSphereRadius", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "get_SphereCount", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "SphereCount");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* struct Fusee.Engine.Common.IPEndpointData */ 

(function IPEndpointData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.IPEndpointData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Address", $.Int64);

    $.Field({Static:false, Public:true }, "Port", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.Common.INetworkConnection */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.INetworkConnection", true, [], function ($) {
    $.Method({}, "get_RemoteEndPoint", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IPEndpointData")));
    $.Method({}, "get_RoundtripTime", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "Disconnect", JSIL.MethodSignature.Void);
    $.Method({}, "Disconnect", JSIL.MethodSignature.Action($.String));
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])]));
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("Fusee.Engine.Common.MessageDelivery"), 
          $.Int32
        ]));
    $.Property({}, "RemoteEndPoint");
    $.Property({}, "RoundtripTime");
  }, []);

/* class Fusee.Engine.Common.NetConfigValues */ 

(function NetConfigValues$Members () {
  var $, $thisType;

  function NetConfigValues__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Common.NetConfigValues", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NetConfigValues__ctor
    );

    $.Field({Static:false, Public:true }, "SysType", $asm03.TypeRef("Fusee.Engine.Common.SysType"));

    $.Field({Static:false, Public:true }, "DefaultPort", $.Int32);

    $.Field({Static:false, Public:true }, "Discovery", $.Boolean);

    $.Field({Static:false, Public:true }, "ConnectOnDiscovery", $.Boolean);

    $.Field({Static:false, Public:true }, "DiscoveryTimeout", $.Int32);

    $.Field({Static:false, Public:true }, "RedirectPackets", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.NetStatusValues */ 

(function NetStatusValues$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Boolean)) ();
  };


  function NetStatusValues__ctor () {
  }; 

  function NetStatusValues_get_Connected () {
    return this.NetStatusValues$Connected$value;
  }; 

  function NetStatusValues_get_Connecting () {
    return this.NetStatusValues$Connecting$value;
  }; 

  function NetStatusValues_set_Connected (value) {
    this.NetStatusValues$Connected$value = value;
  }; 

  function NetStatusValues_set_Connecting (value) {
    this.NetStatusValues$Connecting$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Common.NetStatusValues", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NetStatusValues__ctor
    );

    $.Method({Static:false, Public:true }, "get_Connected", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetStatusValues_get_Connected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Connecting", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetStatusValues_get_Connecting
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Connected", 
      JSIL.MethodSignature.Action($.Boolean), 
      NetStatusValues_set_Connected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Connecting", 
      JSIL.MethodSignature.Action($.Boolean), 
      NetStatusValues_set_Connecting
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NetStatusValues$Connected$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "NetStatusValues$Connecting$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:true }, "LastStatus", $asm03.TypeRef("Fusee.Engine.Common.ConnectionStatus"));

    $.Property({Static:false, Public:true }, "Connected", $.Boolean);

    $.Property({Static:false, Public:true }, "Connecting", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Common.SysType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.SysType", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Peer: 1, 
    Client: 2, 
    Server: 3, 
  }
);

/* delegate Fusee.Engine.Common.ConnectionUpdateEvent */ 

JSIL.MakeDelegate("Fusee.Engine.Common.ConnectionUpdateEvent", true, [], 
  new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.ConnectionStatus"), $asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")]));

/* interface Fusee.Engine.Common.INetworkImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.INetworkImp", true, [], function ($) {
    $.Method({}, "get_Config", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")));
    $.Method({}, "set_Config", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetConfigValues")));
    $.Method({}, "get_Status", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")));
    $.Method({}, "set_Status", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.NetStatusValues")));
    $.Method({}, "get_Connections", JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")])));
    $.Method({}, "GetLocalIp", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_IncomingMsg", JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("Fusee.Engine.Common.INetworkMsg")])));
    $.Method({}, "StartPeer", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "add_ConnectionUpdate", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")));
    $.Method({}, "remove_ConnectionUpdate", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ConnectionUpdateEvent")));
    $.Method({}, "OpenConnection", new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Fusee.Engine.Common.SysType"), $.String, 
          $.Int32
        ]));
    $.Method({}, "CloseConnection", JSIL.MethodSignature.Void);
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("Fusee.Engine.Common.MessageDelivery"), 
          $.Int32
        ]));
    $.Method({}, "SendDiscoveryMessage", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "OnUpdateFrame", JSIL.MethodSignature.Void);
    $.Method({}, "CloseDevices", JSIL.MethodSignature.Void);
    $.Property({}, "Config");
    $.Property({}, "Status");
    $.Property({}, "Connections");
    $.Property({}, "IncomingMsg");
  }, []);

/* enum Fusee.Engine.Common.ConnectionStatus */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.ConnectionStatus", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    InitiatedConnect: 1, 
    ReceivedInitiation: 2, 
    RespondedAwaitingApproval: 3, 
    RespondedConnect: 4, 
    Connected: 5, 
    Disconnecting: 6, 
    Disconnected: 7, 
  }
);

/* enum Fusee.Engine.Common.MessageType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.MessageType", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Error: 0, 
    StatusChanged: 1, 
    UnconnectedData: 2, 
    ConnectionApproval: 4, 
    Data: 8, 
    Receipt: 16, 
    DiscoveryRequest: 32, 
    DiscoveryResponse: 64, 
    VerboseDebugMessage: 128, 
    DebugMessage: 256, 
    WarningMessage: 512, 
    ErrorMessage: 1024, 
    NatIntroductionSuccess: 2048, 
    ConnectionLatencyUpdated: 4096, 
  }
);

/* enum Fusee.Engine.Common.MessageDelivery */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.MessageDelivery", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Unreliable: 1, 
    UnreliableSequenced: 2, 
    ReliableUnordered: 34, 
    ReliableSequenced: 35, 
    ReliableOrdered: 67, 
  }
);

/* enum Fusee.Engine.Common.MsgDataTypes */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.MsgDataTypes", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Object: 0, 
    Bytes: 1, 
    Int: 2, 
    Float: 3, 
    String: 4, 
  }
);

/* struct Fusee.Engine.Common.NetworkMsgType */ 

(function NetworkMsgType$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.NetworkMsgType", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "MsgType", $asm03.TypeRef("Fusee.Engine.Common.MsgDataTypes"));

    $.Field({Static:false, Public:true }, "MsgDelivery", $asm03.TypeRef("Fusee.Engine.Common.MessageDelivery"));

    $.Field({Static:false, Public:true }, "MsgChannel", $.Int32);

    $.Field({Static:false, Public:true }, "ReadBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "ReadInt", $.Int32);

    $.Field({Static:false, Public:true }, "ReadFloat", $.Single);

    $.Field({Static:false, Public:true }, "ReadString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.Common.INetworkMsg */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.INetworkMsg", true, [], function ($) {
    $.Method({}, "get_Type", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.MessageType")));
    $.Method({}, "get_Status", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ConnectionStatus")));
    $.Method({}, "get_Sender", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.INetworkConnection")));
    $.Method({}, "get_Message", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.NetworkMsgType")));
    $.Property({}, "Type");
    $.Property({}, "Status");
    $.Property({}, "Sender");
    $.Property({}, "Message");
  }, []);

/* class Fusee.Engine.Common.InitEventArgs */ 

(function InitEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function InitEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.InitEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InitEventArgs__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Common.PointToPointFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.PointToPointFlags", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    PointToPointFlagsErp: 1, 
    PointToPointFlagsStopErp: 2, 
    PointToPointFlagsCfm: 3, 
    PointToPointFlagsStopCfm: 4, 
  }
);

/* interface Fusee.Engine.Common.IPoint2PointConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IPoint2PointConstraintImp", true, [], function ($) {
    $.Method({}, "get_PivotInA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_PivotInA", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_PivotInB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_PivotInB", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "UpdateRhs", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetParam", new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.PointToPointFlags"), $.Single, 
          $.Int32
        ]));
    $.Method({}, "GetParam", new JSIL.MethodSignature($.Single, [$asm03.TypeRef("Fusee.Engine.Common.PointToPointFlags"), $.Int32]));
    $.Property({}, "PivotInA");
    $.Property({}, "PivotInB");
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.IRenderCanvasImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IRenderCanvasImp", true, [], function ($) {
    $.Method({}, "get_Width", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_Width", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_Height", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_Height", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_Caption", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Caption", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_DeltaTime", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_VerticalSync", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_VerticalSync", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Fullscreen", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Fullscreen", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "Present", JSIL.MethodSignature.Void);
    $.Method({}, "Run", JSIL.MethodSignature.Void);
    $.Method({}, "SetCursor", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.CursorType")));
    $.Method({}, "OpenLink", JSIL.MethodSignature.Action($.String));
    $.Method({}, "SetWindowSize", new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean
        ]));
    $.Method({}, "CloseGameWindow", JSIL.MethodSignature.Void);
    $.Method({}, "add_Init", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])));
    $.Method({}, "remove_Init", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])));
    $.Method({}, "add_UnLoad", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])));
    $.Method({}, "remove_UnLoad", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])));
    $.Method({}, "add_Render", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")])));
    $.Method({}, "remove_Render", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")])));
    $.Method({}, "add_Resize", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")])));
    $.Method({}, "remove_Resize", JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")])));
    $.Property({}, "Width");
    $.Property({}, "Height");
    $.Property({}, "Caption");
    $.Property({}, "DeltaTime");
    $.Property({}, "VerticalSync");
    $.Property({}, "Fullscreen");
  }, []);

/* interface Fusee.Engine.Common.IRenderContextImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IRenderContextImp", true, [], function ($) {
    $.Method({}, "set_ClearColor", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float4")));
    $.Method({}, "get_ClearColor", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4")));
    $.Method({}, "set_ClearDepth", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_ClearDepth", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "CreateShader", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), [$.String, $.String]));
    $.Method({}, "GetShaderParamList", new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo")]), [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp")]));
    $.Method({}, "GetShaderParam", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), $.String]));
    $.Method({}, "GetParamValue", new JSIL.MethodSignature($.Single, [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), $asm03.TypeRef("Fusee.Engine.Common.IShaderParam")]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParam1f", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Single]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParam2f", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float2")]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParam3f", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParam4f", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float4")]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParam4fArray", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParamfloat4x4", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParamMtx4fArray", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4x4")])]));
    $.Method({OriginalName: "SetShaderParam"}, "SetShaderParamI", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Int32]));
    $.Method({}, "SetShaderParamTexture", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")]));
    $.Method({}, "SetShaderParamTexture", new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm03.TypeRef("Fusee.Engine.Common.ITexture"), 
          $asm03.TypeRef("Fusee.Engine.Common.GBufferHandle")
        ]));
    $.Method({}, "UpdateTextureFromVideoStream", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")]));
    $.Method({}, "UpdateTextureRegion", new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.ITexture"), $asm00.TypeRef("Fusee.Base.Common.ImageData"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]));
    $.Method({}, "CreateTexture", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITexture"), [$asm00.TypeRef("Fusee.Base.Common.ImageData"), $.Boolean]));
    $.Method({}, "CopyDepthBufferFromDeferredBuffer", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ITexture")));
    $.Method({}, "CreateWritableTexture", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITexture"), [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Fusee.Engine.Common.WritableTextureFormat")
        ]));
    $.Method({}, "Clear", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ClearFlags")));
    $.Method({}, "SetVertices", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])]));
    $.Method({}, "SetNormals", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])]));
    $.Method({}, "SetUVs", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float2")])]));
    $.Method({}, "SetColors", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt32])]));
    $.Method({}, "SetTriangles", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt16])]));
    $.Method({}, "SetBoneIndices", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])]));
    $.Method({}, "SetBoneWeights", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])]));
    $.Method({}, "SetShader", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp")));
    $.Method({}, "RemoveVertices", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveNormals", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveColors", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveUVs", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveTriangles", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveBoneWeights", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "RemoveBoneIndices", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "Viewport", new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]));
    $.Method({}, "ColorMask", new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ]));
    $.Method({}, "Render", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "DebugLine", new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $asm07.TypeRef("Fusee.Math.Core.float4")
        ]));
    $.Method({}, "GetBufferContent", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.Rectangle"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")]));
    $.Method({}, "CreateMeshImp", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")));
    $.Method({}, "SetRenderState", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32]));
    $.Method({}, "GetRenderState", new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.RenderState")]));
    $.Method({}, "SetRenderTarget", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ITexture")));
    $.Method({}, "SetCubeMapRenderTarget", new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.ITexture"), $.Int32]));
    $.Method({}, "GetPixelColor", new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]));
    $.Method({}, "GetPixelDepth", new JSIL.MethodSignature($.Single, [$.Int32, $.Int32]));
    $.Method({}, "GetHardwareCapabilities", new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.HardwareCapability")]));
    $.Property({}, "ClearColor");
    $.Property({}, "ClearDepth");
  }, []);

/* enum Fusee.Engine.Common.HardwareCapability */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.HardwareCapability", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DefferedPossible: 0, 
    Buffersize: 1, 
  }
);

/* interface Fusee.Engine.Common.IRigidBodyImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IRigidBodyImp", true, [], function ($) {
    $.Method({}, "get_Gravity", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_Gravity", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_Mass", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Mass", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Inertia", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_Inertia", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_WorldTransform", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "set_WorldTransform", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_Position", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_Position", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_Rotation", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.Quaternion")));
    $.Method({}, "ApplyForce", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "ApplyImpulse", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3")]));
    $.Method({}, "ApplyTorque", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "ApplyTorqueImpulse", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "ApplyCentralForce", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "ApplyCentralImpulse", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_LinearVelocity", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_LinearVelocity", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_AngularVelocity", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_AngularVelocity", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_LinearFactor", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_LinearFactor", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_AngularFactor", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "set_AngularFactor", JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_Restitution", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Restitution", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_Friction", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Friction", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetDrag", new JSIL.MethodSignature(null, [$.Single, $.Single]));
    $.Method({}, "get_LinearDrag", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_AngularDrag", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_CollisionShape", JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")));
    $.Method({}, "set_CollisionShape", JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")));
    $.Method({}, "get_UserObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_UserObject", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "OnCollision", JSIL.MethodSignature.Action($.Type));
    $.Property({}, "Gravity");
    $.Property({}, "Mass");
    $.Property({}, "Inertia");
    $.Property({}, "WorldTransform");
    $.Property({}, "Position");
    $.Property({}, "Rotation");
    $.Property({}, "LinearVelocity");
    $.Property({}, "AngularVelocity");
    $.Property({}, "LinearFactor");
    $.Property({}, "AngularFactor");
    $.Property({}, "Restitution");
    $.Property({}, "Friction");
    $.Property({}, "LinearDrag");
    $.Property({}, "AngularDrag");
    $.Property({}, "CollisionShape");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.Common.IShaderParam */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IShaderParam", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.Common.IShaderProgramImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IShaderProgramImp", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.Common.IAudioImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IAudioImp", true, [], function ($) {
    $.Method({}, "OpenDevice", JSIL.MethodSignature.Void);
    $.Method({}, "CloseDevice", JSIL.MethodSignature.Void);
    $.Method({}, "LoadFile", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IAudioStreamImp"), [$.String, $.Boolean]));
    $.Method({}, "Stop", JSIL.MethodSignature.Void);
    $.Method({}, "SetVolume", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "GetVolume", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "SetPanning", JSIL.MethodSignature.Action($.Single));
  }, []);

/* interface Fusee.Engine.Common.ISliderConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ISliderConstraintImp", true, [], function ($) {
    $.Method({}, "get_AnchorInA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_AnchorInB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Method({}, "get_AngularDepth", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_AngularPos", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "CalculateTransforms", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "get_CalculatedTransformA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_CalculatedTransformB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_DampingDirAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingDirAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_DampingDirLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingDirLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_DampingLimAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingLimAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_DampingLimLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingLimLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_DampingOrthoAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingOrthoAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_DampingOrthoLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_DampingOrthoLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_FrameOffsetA", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_FrameOffsetB", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float4x4")));
    $.Method({}, "get_LinDepth", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_LinPos", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_LowerAngularLimit", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_LowerAngularLimit", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_LowerLinLimit", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_LowerLinLimit", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_MaxAngularMotorForce", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_MaxAngularMotorForce", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_MaxLinMotorForce", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_MaxLinMotorForce", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_PoweredAngularMotor", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_PoweredAngularMotor", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_PoweredLinMotor", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_PoweredLinMotor", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_RestitutionDirAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionDirAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_RestitutionDirLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionDirLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_RestitutionLimAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionLimAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_RestitutionLimLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionLimLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_RestitutionOrthoAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionOrthoAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_RestitutionOrthoLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_RestitutionOrthoLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "SetFrames", new JSIL.MethodSignature(null, [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]));
    $.Method({}, "get_SoftnessDirAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessDirAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SoftnessDirLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessDirLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SoftnessLimAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessLimAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SoftnessLimLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessLimLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SoftnessOrthoAngular", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessOrthoAngular", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SoftnessOrthoLin", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_SoftnessOrthoLin", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_SolveAngularLimit", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_SolveLinLimit", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_TargetAngularMotorVelocity", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_TargetAngularMotorVelocity", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_TargetLinMotorVelocity", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_TargetLinMotorVelocity", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "TestAngularLimits", JSIL.MethodSignature.Void);
    $.Method({}, "TestLinLimits", JSIL.MethodSignature.Void);
    $.Method({}, "get_UpperAngularLimit", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_UpperAngularLimit", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_UpperLinLimit", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_UpperLinLimit", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_UseFrameOffset", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_UseFrameOffset", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_UseLinearReferenceFrameA", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "AnchorInA");
    $.Property({}, "AnchorInB");
    $.Property({}, "AngularDepth");
    $.Property({}, "AngularPos");
    $.Property({}, "CalculatedTransformA");
    $.Property({}, "CalculatedTransformB");
    $.Property({}, "DampingDirAngular");
    $.Property({}, "DampingDirLin");
    $.Property({}, "DampingLimAngular");
    $.Property({}, "DampingLimLin");
    $.Property({}, "DampingOrthoAngular");
    $.Property({}, "DampingOrthoLin");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "LinDepth");
    $.Property({}, "LinPos");
    $.Property({}, "LowerAngularLimit");
    $.Property({}, "LowerLinLimit");
    $.Property({}, "MaxAngularMotorForce");
    $.Property({}, "MaxLinMotorForce");
    $.Property({}, "PoweredAngularMotor");
    $.Property({}, "PoweredLinMotor");
    $.Property({}, "RestitutionDirAngular");
    $.Property({}, "RestitutionDirLin");
    $.Property({}, "RestitutionLimAngular");
    $.Property({}, "RestitutionLimLin");
    $.Property({}, "RestitutionOrthoAngular");
    $.Property({}, "RestitutionOrthoLin");
    $.Property({}, "SoftnessDirAngular");
    $.Property({}, "SoftnessDirLin");
    $.Property({}, "SoftnessLimAngular");
    $.Property({}, "SoftnessLimLin");
    $.Property({}, "SoftnessOrthoAngular");
    $.Property({}, "SoftnessOrthoLin");
    $.Property({}, "SolveAngularLimit");
    $.Property({}, "SolveLinLimit");
    $.Property({}, "TargetAngularMotorVelocity");
    $.Property({}, "TargetLinMotorVelocity");
    $.Property({}, "UpperAngularLimit");
    $.Property({}, "UpperLinLimit");
    $.Property({}, "UseFrameOffset");
    $.Property({}, "UseLinearReferenceFrameA");
  }, [$asm03.TypeRef("Fusee.Engine.Common.IConstraintImp")]);

/* interface Fusee.Engine.Common.ISphereShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ISphereShapeImp", true, [], function ($) {
    $.Method({}, "get_Radius", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_Radius", JSIL.MethodSignature.Action($.Single));
    $.Property({}, "Radius");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.IStaticPlaneShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IStaticPlaneShapeImp", true, [], function ($) {
    $.Method({}, "get_PlaneConstant", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "get_PlaneNormal", JSIL.MethodSignature.Return($asm07.TypeRef("Fusee.Math.Core.float3")));
    $.Property({}, "PlaneConstant");
    $.Property({}, "PlaneNormal");
  }, [$asm03.TypeRef("Fusee.Engine.Common.ICollisionShapeImp")]);

/* interface Fusee.Engine.Common.ITexture */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.ITexture", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.Common.IVideoManagerImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IVideoManagerImp", true, [], function ($) {
    $.Method({}, "CreateVideoStreamImpFromFile", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), [
          $.String, $.Boolean, 
          $.Boolean
        ]));
    $.Method({}, "CreateVideoStreamImpFromCamera", new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), [$.Int32, $.Boolean]));
  }, []);

/* interface Fusee.Engine.Common.IVideoStreamImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.Common.IVideoStreamImp", true, [], function ($) {
    $.Method({}, "GetCurrentFrame", JSIL.MethodSignature.Return($asm00.TypeRef("Fusee.Base.Common.ImageData")));
    $.Method({}, "Start", JSIL.MethodSignature.Void);
    $.Method({}, "Stop", JSIL.MethodSignature.Void);
  }, []);

/* class Fusee.Engine.Common.KeyEventArgs */ 

(function KeyEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.KeyCodes)) ();
  };


  function KeyEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function KeyEventArgs_get_Alt () {
    return this.KeyEventArgs$Alt$value;
  }; 

  function KeyEventArgs_get_Control () {
    return this.KeyEventArgs$Control$value;
  }; 

  function KeyEventArgs_get_KeyCode () {
    return this.KeyEventArgs$KeyCode$value;
  }; 

  function KeyEventArgs_get_Shift () {
    return this.KeyEventArgs$Shift$value;
  }; 

  function KeyEventArgs_set_Alt (value) {
    this.KeyEventArgs$Alt$value = value;
  }; 

  function KeyEventArgs_set_Control (value) {
    this.KeyEventArgs$Control$value = value;
  }; 

  function KeyEventArgs_set_KeyCode (value) {
    this.KeyEventArgs$KeyCode$value = value;
  }; 

  function KeyEventArgs_set_Shift (value) {
    this.KeyEventArgs$Shift$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.KeyEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      KeyEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Alt", 
      JSIL.MethodSignature.Return($.Boolean), 
      KeyEventArgs_get_Alt
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Control", 
      JSIL.MethodSignature.Return($.Boolean), 
      KeyEventArgs_get_Control
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KeyCode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.KeyCodes")), 
      KeyEventArgs_get_KeyCode
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Shift", 
      JSIL.MethodSignature.Return($.Boolean), 
      KeyEventArgs_get_Shift
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Alt", 
      JSIL.MethodSignature.Action($.Boolean), 
      KeyEventArgs_set_Alt
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Control", 
      JSIL.MethodSignature.Action($.Boolean), 
      KeyEventArgs_set_Control
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyCode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.KeyCodes")), 
      KeyEventArgs_set_KeyCode
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Shift", 
      JSIL.MethodSignature.Action($.Boolean), 
      KeyEventArgs_set_Shift
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "KeyEventArgs$Shift$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "KeyEventArgs$Alt$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "KeyEventArgs$Control$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "KeyEventArgs$KeyCode$value", $asm03.TypeRef("Fusee.Engine.Common.KeyCodes"))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Shift", $.Boolean);

    $.Property({Static:false, Public:true }, "Alt", $.Boolean);

    $.Property({Static:false, Public:true }, "Control", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyCode", $asm03.TypeRef("Fusee.Engine.Common.KeyCodes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.Light */ 

(function Light$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.Light", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Active", $.Single);

    $.Field({Static:false, Public:true }, "Color", $asm07.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Position", $asm07.TypeRef("Fusee.Math.Core.float4"));

    $.Field({Static:false, Public:true }, "Attenuation", $.Single);

    $.Field({Static:false, Public:true }, "AmbientCoefficient", $.Single);

    $.Field({Static:false, Public:true }, "Type", $asm08.TypeRef("Fusee.Serialization.LightType"));

    $.Field({Static:false, Public:true }, "ConeAngle", $.Single);

    $.Field({Static:false, Public:true }, "ConeDirection", $asm07.TypeRef("Fusee.Math.Core.float3"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.MouseEventArgs */ 

(function MouseEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.MouseButtons)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.Point)) ();
  };


  function MouseEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MouseEventArgs_get_Button () {
    return this.MouseEventArgs$Button$value;
  }; 

  function MouseEventArgs_get_Position () {
    return this.MouseEventArgs$Position$value;
  }; 

  function MouseEventArgs_set_Button (value) {
    this.MouseEventArgs$Button$value = value;
  }; 

  function MouseEventArgs_set_Position (value) {
    this.MouseEventArgs$Position$value = value.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.MouseEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MouseEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Button", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.MouseButtons")), 
      MouseEventArgs_get_Button
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.Point")), 
      MouseEventArgs_get_Position
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Button", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.MouseButtons")), 
      MouseEventArgs_set_Button
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.Point")), 
      MouseEventArgs_set_Position
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MouseEventArgs$Button$value", $asm03.TypeRef("Fusee.Engine.Common.MouseButtons"))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "MouseEventArgs$Position$value", $asm03.TypeRef("Fusee.Engine.Common.Point"))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Button", $asm03.TypeRef("Fusee.Engine.Common.MouseButtons"));

    $.Property({Static:false, Public:true }, "Position", $asm03.TypeRef("Fusee.Engine.Common.Point"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.Point */ 

(function Point$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.Point", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "x", $.Int32);

    $.Field({Static:false, Public:true }, "y", $.Int32);

    $.Field({Static:false, Public:true }, "z", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Common.RenderState */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.RenderState", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ZEnable: 7, 
    FillMode: 8, 
    ZWriteEnable: 14, 
    SourceBlend: 19, 
    DestinationBlend: 20, 
    CullMode: 22, 
    ZFunc: 23, 
    AlphaBlendEnable: 27, 
    Wrap0: 128, 
    Wrap1: 129, 
    Wrap2: 130, 
    Wrap3: 131, 
    Clipping: 136, 
    BlendOperation: 171, 
    BlendFactor: 193, 
    SourceBlendAlpha: 207, 
    DestinationBlendAlpha: 208, 
    BlendOperationAlpha: 209, 
  }
);

/* enum Fusee.Engine.Common.BlendOperation */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.BlendOperation", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 1, 
    Subtract: 2, 
    ReverseSubtract: 3, 
    Minimum: 4, 
    Maximum: 5, 
  }
);

/* enum Fusee.Engine.Common.Compare */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.Compare", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Never: 1, 
    Less: 2, 
    Equal: 3, 
    LessEqual: 4, 
    Greater: 5, 
    NotEqual: 6, 
    GreaterEqual: 7, 
    Always: 8, 
  }
);

/* enum Fusee.Engine.Common.Cull */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.Cull", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 1, 
    Clockwise: 2, 
    Counterclockwise: 3, 
  }
);

/* enum Fusee.Engine.Common.Blend */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.Blend", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Zero: 1, 
    One: 2, 
    SourceColor: 3, 
    InverseSourceColor: 4, 
    SourceAlpha: 5, 
    InverseSourceAlpha: 6, 
    DestinationAlpha: 7, 
    InverseDestinationAlpha: 8, 
    DestinationColor: 9, 
    InverseDestinationColor: 10, 
    BlendFactor: 14, 
    InverseBlendFactor: 15, 
  }
);

/* enum Fusee.Engine.Common.FillMode */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.FillMode", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Point: 1, 
    Wireframe: 2, 
    Solid: 3, 
  }
);

/* enum Fusee.Engine.Common.ClearFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.ClearFlags", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Depth: 256, 
    Accum: 512, 
    Stencil: 1024, 
    Color: 16384, 
  }
);

/* enum Fusee.Engine.Common.KeyCodes */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.KeyCodes", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Modifiers: -65536, 
    None: 0, 
    LButton: 1, 
    RButton: 2, 
    Cancel: 3, 
    MButton: 4, 
    XButton1: 5, 
    XButton2: 6, 
    Back: 8, 
    Tab: 9, 
    LineFeed: 10, 
    Clear: 12, 
    Return: 13, 
    Enter: 13, 
    Shift: 16, 
    Control: 17, 
    Menu: 18, 
    Pause: 19, 
    CapsLock: 20, 
    Capital: 20, 
    KanaMode: 21, 
    HangulMode: 21, 
    HanguelMode: 21, 
    JunjaMode: 23, 
    FinalMode: 24, 
    HanjaMode: 25, 
    KanjiMode: 25, 
    Escape: 27, 
    IMEConvert: 28, 
    IMENonconvert: 29, 
    IMEAccept: 30, 
    IMEModeChange: 31, 
    Prior: 31, 
    PageUp: 31, 
    Space: 32, 
    PageDown: 34, 
    Next: 34, 
    End: 35, 
    Home: 36, 
    Left: 37, 
    Up: 38, 
    Right: 39, 
    Down: 40, 
    Select: 41, 
    Print: 42, 
    Execute: 43, 
    Snapshot: 44, 
    PrintScreen: 44, 
    Insert: 45, 
    Delete: 46, 
    Help: 47, 
    D0: 48, 
    D1: 49, 
    D2: 50, 
    D3: 51, 
    D4: 52, 
    D5: 53, 
    D6: 54, 
    D7: 55, 
    D8: 56, 
    D9: 57, 
    A: 65, 
    B: 66, 
    C: 67, 
    D: 68, 
    E: 69, 
    F: 70, 
    G: 71, 
    H: 72, 
    I: 73, 
    J: 74, 
    K: 75, 
    L: 76, 
    M: 77, 
    N: 78, 
    O: 79, 
    P: 80, 
    Q: 81, 
    R: 82, 
    S: 83, 
    T: 84, 
    U: 85, 
    V: 86, 
    W: 87, 
    X: 88, 
    Y: 89, 
    Z: 90, 
    LWin: 91, 
    RWin: 92, 
    Apps: 93, 
    Sleep: 95, 
    NumPad0: 96, 
    NumPad1: 97, 
    NumPad2: 98, 
    NumPad3: 99, 
    NumPad4: 100, 
    NumPad5: 101, 
    NumPad6: 102, 
    NumPad7: 103, 
    NumPad8: 104, 
    NumPad9: 105, 
    Multiply: 106, 
    Add: 107, 
    Separator: 108, 
    Subtract: 109, 
    Decimal: 110, 
    Divide: 111, 
    F1: 112, 
    F2: 113, 
    F3: 114, 
    F4: 115, 
    F5: 116, 
    F6: 117, 
    F7: 118, 
    F8: 119, 
    F9: 120, 
    F10: 121, 
    F11: 122, 
    F12: 123, 
    F13: 124, 
    F14: 125, 
    F15: 126, 
    F16: 127, 
    F17: 128, 
    F18: 129, 
    F19: 130, 
    F20: 131, 
    F21: 132, 
    F22: 133, 
    F23: 134, 
    F24: 135, 
    NumLock: 144, 
    Scroll: 145, 
    LShift: 160, 
    RShift: 161, 
    LControl: 162, 
    RControl: 163, 
    LMenu: 164, 
    RMenu: 165, 
    BrowserBack: 166, 
    BrowserForward: 167, 
    BrowserRefresh: 168, 
    BrowserStop: 169, 
    BrowserSearch: 170, 
    BrowserFavorites: 171, 
    BrowserHome: 172, 
    VolumeMute: 173, 
    VolumeDown: 174, 
    VolumeUp: 175, 
    MediaNextTrack: 176, 
    MediaPreviousTrack: 177, 
    MediaStop: 178, 
    MediaPlayPause: 179, 
    LaunchMail: 180, 
    SelectMedia: 181, 
    LaunchApplication1: 182, 
    LaunchApplication2: 183, 
    Oem1: 186, 
    OemSemicolon: 186, 
    OemPlus: 187, 
    OemComma: 188, 
    OemMinus: 189, 
    OemPeriod: 190, 
    OemQuestion: 191, 
    Oem2: 191, 
    Oem3: 192, 
    Oemtilde: 192, 
    Oem4: 219, 
    OemOpenBrackets: 219, 
    OemPipe: 220, 
    Oem5: 220, 
    Oem6: 221, 
    OemCloseBrackets: 221, 
    OemQuotes: 222, 
    Oem7: 222, 
    Oem8: 223, 
    Oem102: 226, 
    OemBackslash: 226, 
    Process: 229, 
    Packet: 231, 
    Attn: 246, 
    Crsel: 247, 
    Exsel: 252, 
    EraseEof: 253, 
    Play: 254, 
    Zoom: 255, 
    NoName: 256, 
    Pa1: 257, 
    OemClear: 258, 
    KeyCode: 65535, 
    ShiftModifier: 65536, 
    ControlModifier: 131072, 
    AltModifier: 262144, 
  }
);

/* enum Fusee.Engine.Common.MouseButtons */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.MouseButtons", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Unknown: 0, 
    Left: 1, 
    Right: 2, 
    Middle: 4, 
  }
);

/* enum Fusee.Engine.Common.MouseAxes */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.MouseAxes", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    X: 1, 
    Y: 2, 
    Wheel: 3, 
    MinX: 4, 
    MaxX: 5, 
    MinY: 6, 
    MaxY: 7, 
  }
);

/* enum Fusee.Engine.Common.CursorType */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.CursorType", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Standard: 0, 
    Hand: 1, 
  }
);

/* enum Fusee.Engine.Common.ControllerButton */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.ControllerButton", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    A: 0, 
    B: 1, 
    C: 2, 
    D: 3, 
    E: 4, 
    R1: 5, 
    R2: 6, 
    L1: 7, 
    L2: 8, 
    FirstUserButton: 9, 
  }
);

/* enum Fusee.Engine.Common.TouchAxes */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.TouchAxes", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    ActiveTouchpoints: 1, 
    MinX: 2, 
    MaxX: 3, 
    MinY: 4, 
    MaxY: 5, 
    Touchpoint_0_X: 6, 
    Touchpoint_0_Y: 7, 
    Touchpoint_1_X: 8, 
    Touchpoint_1_Y: 9, 
    Touchpoint_2_X: 10, 
    Touchpoint_2_Y: 11, 
    Touchpoint_3_X: 12, 
    Touchpoint_3_Y: 13, 
    Touchpoint_4_X: 14, 
    Touchpoint_4_Y: 15, 
    Touchpoint_5_X: 16, 
    Touchpoint_5_Y: 17, 
  }
);

/* enum Fusee.Engine.Common.TouchPoints */ 

JSIL.MakeEnum(
  {
    FullName: "Fusee.Engine.Common.TouchPoints", 
    BaseType: $asm15.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Touchpoint_0: 1, 
    Touchpoint_1: 2, 
    Touchpoint_2: 3, 
    Touchpoint_3: 4, 
    Touchpoint_4: 5, 
    Touchpoint_5: 6, 
  }
);

/* class Fusee.Engine.Common.Helper */ 

(function Helper$Members () {
  var $, $thisType;

  function Helper__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Common.Helper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Helper__ctor
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexAttribName", $.String, "fuVertex");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColorAttribName", $.String, "fuColor");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NormalAttribName", $.String, "fuNormal");

    $.Field({Static:true , Public:true , ReadOnly:true }, "UvAttribName", $.String, "fuUV");

    $.Field({Static:true , Public:true , ReadOnly:true }, "TangentAttribName", $.String, "fuTangent");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BitangentAttribName", $.String, "fuBitangent");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BoneWeightAttribName", $.String, "fuBoneWeight");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BoneIndexAttribName", $.String, "fuBoneIndex");

    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexAttribLocation", $.Int32, 0);

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColorAttribLocation", $.Int32, 1);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NormalAttribLocation", $.Int32, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "UvAttribLocation", $.Int32, 3);

    $.Field({Static:true , Public:true , ReadOnly:true }, "TangentAttribLocation", $.Int32, 4);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BitangentAttribLocation", $.Int32, 5);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BoneWeightAttribLocation", $.Int32, 6);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BoneIndexAttribLocation", $.Int32, 7);


    function Helper__cctor () {
      $thisType.VertexAttribName = "fuVertex";
      $thisType.ColorAttribName = "fuColor";
      $thisType.NormalAttribName = "fuNormal";
      $thisType.UvAttribName = "fuUV";
      $thisType.TangentAttribName = "fuTangent";
      $thisType.BitangentAttribName = "fuBitangent";
      $thisType.BoneWeightAttribName = "fuBoneWeight";
      $thisType.BoneIndexAttribName = "fuBoneIndex";
      $thisType.VertexAttribLocation = 0;
      $thisType.ColorAttribLocation = 1;
      $thisType.NormalAttribLocation = 2;
      $thisType.UvAttribLocation = 3;
      $thisType.TangentAttribLocation = 4;
      $thisType.BitangentAttribLocation = 5;
      $thisType.BoneWeightAttribLocation = 6;
      $thisType.BoneIndexAttribLocation = 7;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Helper__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.Rectangle */ 

(function Rectangle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };


  function Rectangle__ctor (left, top, right, bottom) {
    this.Left = (left | 0);
    this.Top = (top | 0);
    this.Right = (right | 0);
    this.Bottom = (bottom | 0);
  }; 

  function Rectangle_get_Height () {
    return (((this.Bottom | 0) - (this.Top | 0)) | 0);
  }; 

  function Rectangle_get_Width () {
    return (((this.Right | 0) - (this.Left | 0)) | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.Rectangle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Rectangle__ctor
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Height
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Width
    );

    $.Field({Static:false, Public:true }, "Left", $.Int32);

    $.Field({Static:false, Public:true }, "Right", $.Int32);

    $.Field({Static:false, Public:true }, "Top", $.Int32);

    $.Field({Static:false, Public:true }, "Bottom", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.RenderEventArgs */ 

(function RenderEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function RenderEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.RenderEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RenderEventArgs__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Common.ResizeEventArgs */ 

(function ResizeEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventArgs)) ();
  };


  function ResizeEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.Common.ResizeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ResizeEventArgs__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Common.ShaderParamInfo */ 

(function ShaderParamInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Common.ShaderParamInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Size", $.Int32);

    $.Field({Static:false, Public:true }, "Type", $asm15.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Handle", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

