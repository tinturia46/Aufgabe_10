/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm05 = JSIL.DeclareAssembly("Fusee.Engine.Imp.Graphics.Web, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
JSIL.DeclareNamespace("Fusee.Engine.Imp");
JSIL.DeclareNamespace("Fusee.Engine.Imp.Graphics");
JSIL.DeclareNamespace("Fusee.Engine.Imp.Graphics.Web");
/* class Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp */ 

(function RenderCanvasInputDriverImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.IRenderCanvasImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.RenderCanvasImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.TouchDeviceImp)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.DeviceImpDisconnectedArgs))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Delegate)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.Threading.Interlocked)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.NewDeviceImpConnectedArgs))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp_$lget_Devices$gd__6)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentNullException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.ArgumentException"), [$asm15.TypeRef("System.String"), $asm15.TypeRef("System.String")]))) ();
  };


  function RenderCanvasInputDriverImp__ctor (renderCanvas) {
    this.disposedValue = false;
    if (renderCanvas === null) {
      throw $S00().Construct("renderCanvas");
    }
    var flag2 = !$T03().$Is(renderCanvas);
    if (flag2) {
      throw $S01().Construct("renderCanvas must be of type RenderCanvasImp", "renderCanvas");
    }
    this._canvas = $T03().$Cast(renderCanvas)._canvas;
    if (this._canvas === null) {
      throw $S00().Construct("_canvas");
    }
    this._keyboard = new ($T05())(this._canvas);
    this._mouse = new ($T06())(this._canvas);
    this._touch = new ($T07())(this._canvas);
  }; 

  function RenderCanvasInputDriverImp_add_DeviceDisconnected (value) {
    var eventHandler = this.DeviceDisconnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T08())(/* ref */ new JSIL.MemberReference(this, "DeviceDisconnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasInputDriverImp_add_NewDeviceConnected (value) {
    var eventHandler = this.NewDeviceConnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "NewDeviceConnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasInputDriverImp_Dispose$00 (disposing) {
    if (!this.disposedValue) {
      if (disposing) {
      }
      this.disposedValue = true;
    }
  }; 

  function RenderCanvasInputDriverImp_Dispose$01 () {
    this.Dispose(true);
  }; 

  function RenderCanvasInputDriverImp_get_Devices () {
    var $lget_Devices$gd__ = new ($T0C())(-2);
    $lget_Devices$gd__.$l$g4__this = this;
    return $lget_Devices$gd__;
  }; 

  function RenderCanvasInputDriverImp_get_DriverDesc () {
    return "Web Mouse and Keyboard input driver";
  }; 

  function RenderCanvasInputDriverImp_get_DriverId () {
    return (JSIL.GetType(this)).get_FullName();
  }; 

  function RenderCanvasInputDriverImp_remove_DeviceDisconnected (value) {
    var eventHandler = this.DeviceDisconnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T08())(/* ref */ new JSIL.MemberReference(this, "DeviceDisconnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasInputDriverImp_remove_NewDeviceConnected (value) {
    var eventHandler = this.NewDeviceConnected;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "NewDeviceConnected"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp")), 
      RenderCanvasInputDriverImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DeviceDisconnected", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")])), 
      RenderCanvasInputDriverImp_add_DeviceDisconnected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_NewDeviceConnected", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")])), 
      RenderCanvasInputDriverImp_add_NewDeviceConnected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderCanvasInputDriverImp_Dispose$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      RenderCanvasInputDriverImp_Dispose$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Devices", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")])), 
      RenderCanvasInputDriverImp_get_Devices
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DriverDesc", 
      JSIL.MethodSignature.Return($.String), 
      RenderCanvasInputDriverImp_get_DriverDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DriverId", 
      JSIL.MethodSignature.Return($.String), 
      RenderCanvasInputDriverImp_get_DriverId
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DeviceDisconnected", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")])), 
      RenderCanvasInputDriverImp_remove_DeviceDisconnected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_NewDeviceConnected", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")])), 
      RenderCanvasInputDriverImp_remove_NewDeviceConnected
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_canvas", $.Object);

    $.Field({Static:false, Public:false}, "_keyboard", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp"));

    $.Field({Static:false, Public:false}, "_mouse", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp"));

    $.Field({Static:false, Public:false}, "_touch", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.TouchDeviceImp"));

    $.Field({Static:false, Public:false}, "DeviceDisconnected", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "NewDeviceConnected", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "disposedValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Devices", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]));

    $.Property({Static:false, Public:true , Virtual:true }, "DriverDesc", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DriverId", $.String);

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceDisconnected", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.DeviceImpDisconnectedArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "NewDeviceConnected", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.NewDeviceImpConnectedArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IInputDriverImp"), 
      /* 1 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp+<get_Devices>d__6 */ 

(function $lget_Devices$gd__6$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotSupportedException"), null))) ();
  };


  function $lget_Devices$gd__6__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lget_Devices$gd__6_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._mouse;
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._keyboard;
        this.$l$g1__state = 2;
        return true;

      case 2: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._touch;
        this.$l$g1__state = 3;
        return true;

      case 3: 
        this.$l$g1__state = -1;
        return false;

      default: 
        return false;

    }
  }; 

  function $lget_Devices$gd__6_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_IInputDeviceImp$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lget_Devices$gd__ = this;
    } else {
      $lget_Devices$gd__ = new $thisType(0);
      $lget_Devices$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lget_Devices$gd__;
  }; 

  function $lget_Devices$gd__6_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_IInputDeviceImp$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_Devices$gd__6_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Engine_Common_IInputDeviceImp$g_GetEnumerator();
  }; 

  function $lget_Devices$gd__6_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_Devices$gd__6_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lget_Devices$gd__6_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp+<get_Devices>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lget_Devices$gd__6__ctor
    )
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lget_Devices$gd__6_MoveNext
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Engine.Common.IInputDeviceImp$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")])), 
      $lget_Devices$gd__6_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_IInputDeviceImp$g_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.IInputDeviceImp$g.get_Current", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")), 
      $lget_Devices$gd__6_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_IInputDeviceImp$g_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.IEnumerator")), 
      $lget_Devices$gd__6_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lget_Devices$gd__6_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lget_Devices$gd__6_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lget_Devices$gd__6_System_IDisposable_Dispose
    )
      .Overrides($asm15.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.RenderCanvasInputDriverImp"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.IInputDeviceImp$g.Current", $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      /* 1 */ $asm15.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")]), 
      /* 3 */ $asm15.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp */ 

(function KeyboardDeviceImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Collections.IEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Enum)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.KeyCodes)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm15.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Array)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonDescription)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.Delegate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm15.System.Threading.Interlocked)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp_$lget_AxisImpDesc$gd__9)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp_$lget_ButtonImpDesc$gd__13)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.DeviceCategory)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm15.System.InvalidOperationException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Int32"), $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.InvalidOperationException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm15.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm15.System.Collections.IEnumerator.get_Current)) ();
  };


  function KeyboardDeviceImp__ctor (canvas) {
    this._keyDescriptions = $S00().Construct();
    var enumName = (JSIL.GetEnumerator($T03().GetNames($T04().__Type__)));

    for (var enumValue = (JSIL.GetEnumerator($T03().GetValues($T04().__Type__))); $IM00().Call(enumValue, null) & $IM00().Call(enumName, null); ) {
      var arg_7E_0 = this._keyDescriptions;
      var arg_7E_1 = $T08().$Cast($IM01().Call(enumValue, null));
      var value = new ($T09())();
      value.Id = $T08().$Cast($IM01().Call(enumValue, null));
      value.Name = $T06().$Cast($IM01().Call(enumName, null));
      arg_7E_0.set_Item(arg_7E_1, value.MemberwiseClone());
    }
    this._canvas = canvas;
    this.ConnectCanvasEvents();
  }; 

  function KeyboardDeviceImp_add_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Combine(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function KeyboardDeviceImp_add_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Combine(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0D())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 


  function KeyboardDeviceImp_get_AxesCount () {
    return 0;
  }; 

  function KeyboardDeviceImp_get_AxisImpDesc () {
    var $lget_AxisImpDesc$gd__ = new ($T0E())(-2);
    $lget_AxisImpDesc$gd__.$l$g4__this = this;
    return $lget_AxisImpDesc$gd__;
  }; 

  function KeyboardDeviceImp_get_ButtonCount () {
    return $T03().GetNames($T04().__Type__).length;
  }; 

  function KeyboardDeviceImp_get_ButtonImpDesc () {
    var $lget_ButtonImpDesc$gd__ = new ($T0F())(-2);
    $lget_ButtonImpDesc$gd__.$l$g4__this = this;
    return $lget_ButtonImpDesc$gd__;
  }; 

  function KeyboardDeviceImp_get_Category () {
    return $T10().Keyboard;
  }; 

  function KeyboardDeviceImp_get_Desc () {
    return "Standard Keyboard implementation.";
  }; 

  function KeyboardDeviceImp_get_Id () {
    return (JSIL.GetType(this)).get_FullName();
  }; 

  function KeyboardDeviceImp_GetAxis (iAxisId) {
    throw $S01().Construct($T06().Format("Unsopported axis {0}. This device does not support any axis at all.", JSIL.Array.New($T00(), [$T08().$Box(iAxisId)])));
  }; 

  function KeyboardDeviceImp_GetButton (iButtonId) {
    throw $S01().Construct($T06().Format("Button {0} does not exist or is no pollable. Listen to the ButtonValueChanged event to reveive keyboard notifications from this device.", JSIL.Array.New($T00(), [$T08().$Box(iButtonId)])));
  }; 

  function KeyboardDeviceImp_OnCanvasKeyDown (key) {
    var expr_07 = this.ButtonValueChanged;
    if (expr_07 !== null) {
      var expr_13 = new ($T13())();
      expr_13.Button = (this._keyDescriptions).get_Item(key).MemberwiseClone();
      expr_13.Pressed = true;
      expr_07(this, expr_13);
    }
  }; 

  function KeyboardDeviceImp_OnCanvasKeyUp (key) {
    var expr_07 = this.ButtonValueChanged;
    if (expr_07 !== null) {
      var expr_13 = new ($T13())();
      expr_13.Button = (this._keyDescriptions).get_Item(key).MemberwiseClone();
      expr_13.Pressed = false;
      expr_07(this, expr_13);
    }
  }; 

  function KeyboardDeviceImp_remove_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Remove(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function KeyboardDeviceImp_remove_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Remove(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0D())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      KeyboardDeviceImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      KeyboardDeviceImp_add_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      KeyboardDeviceImp_add_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConnectCanvasEvents", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxesCount", 
      JSIL.MethodSignature.Return($.Int32), 
      KeyboardDeviceImp_get_AxesCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxisImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])), 
      KeyboardDeviceImp_get_AxisImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonCount", 
      JSIL.MethodSignature.Return($.Int32), 
      KeyboardDeviceImp_get_ButtonCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])), 
      KeyboardDeviceImp_get_ButtonImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Category", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.DeviceCategory")), 
      KeyboardDeviceImp_get_Category
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Desc", 
      JSIL.MethodSignature.Return($.String), 
      KeyboardDeviceImp_get_Desc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String), 
      KeyboardDeviceImp_get_Id
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      KeyboardDeviceImp_GetAxis
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetButton", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      KeyboardDeviceImp_GetButton
    );

    $.Method({Static:false, Public:false}, "OnCanvasKeyDown", 
      JSIL.MethodSignature.Action($.Int32), 
      KeyboardDeviceImp_OnCanvasKeyDown
    );

    $.Method({Static:false, Public:false}, "OnCanvasKeyUp", 
      JSIL.MethodSignature.Action($.Int32), 
      KeyboardDeviceImp_OnCanvasKeyUp
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      KeyboardDeviceImp_remove_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      KeyboardDeviceImp_remove_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_keyDescriptions", $asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")]));

    $.Field({Static:false, Public:false}, "_canvas", $.Object);

    $.Field({Static:false, Public:false}, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "AxesCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AxisImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Category", $asm03.TypeRef("Fusee.Engine.Common.DeviceCategory"));

    $.Property({Static:false, Public:true , Virtual:true }, "Desc", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Event({Static:false, Public:true , Virtual:true }, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp+<get_AxisImpDesc>d__9 */ 

(function $lget_AxisImpDesc$gd__9$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotSupportedException"), null))) ();
  };


  function $lget_AxisImpDesc$gd__9__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lget_AxisImpDesc$gd__9_MoveNext () {
    var num = (this.$l$g1__state | 0);
    if (num !== 0) {
      return false;
    }
    this.$l$g1__state = -1;
    return false;
  }; 

  function $lget_AxisImpDesc$gd__9_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lget_AxisImpDesc$gd__ = this;
    } else {
      $lget_AxisImpDesc$gd__ = new $thisType(0);
      $lget_AxisImpDesc$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lget_AxisImpDesc$gd__;
  }; 

  function $lget_AxisImpDesc$gd__9_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_AxisImpDescription$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_AxisImpDesc$gd__9_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator();
  }; 

  function $lget_AxisImpDesc$gd__9_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_AxisImpDesc$gd__9_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lget_AxisImpDesc$gd__9_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp+<get_AxisImpDesc>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lget_AxisImpDesc$gd__9__ctor
    )
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lget_AxisImpDesc$gd__9_MoveNext
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Engine.Common.AxisImpDescription$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])), 
      $lget_AxisImpDesc$gd__9_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.AxisImpDescription$g.get_Current", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")), 
      $lget_AxisImpDesc$gd__9_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_AxisImpDescription$g_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.IEnumerator")), 
      $lget_AxisImpDesc$gd__9_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lget_AxisImpDesc$gd__9_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lget_AxisImpDesc$gd__9_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lget_AxisImpDesc$gd__9_System_IDisposable_Dispose
    )
      .Overrides($asm15.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.AxisImpDescription$g.Current", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), 
      /* 1 */ $asm15.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), 
      /* 3 */ $asm15.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp+<get_ButtonImpDesc>d__13 */ 

(function $lget_ButtonImpDesc$gd__13$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonDescription)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.ButtonDescription))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonImpDescription)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm15.System.IDisposable.Dispose)) ();
  };


  function $lget_ButtonImpDesc$gd__13__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lget_ButtonImpDesc$gd__13_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$gs__1, null);
  }; 

  function $lget_ButtonImpDesc$gd__13_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
        this.$lkey$g5__2 = new ($T05())();
      } else {
        this.$l$g1__state = -1;
        this.$l$gs__1 = ((this.$l$g4__this._keyDescriptions).get_Values()).GetEnumerator();
        this.$l$g1__state = -3;
      }
      if (!$T08().prototype.MoveNext.call(this.$l$gs__1)) {
        this.$l$gm__Finally1();
        this.$l$gs__1 = new ($T08())();
        result = false;
      } else {
        this.$lkey$g5__2 = $T08().prototype.get_Current.call(this.$l$gs__1).MemberwiseClone();
        var buttonImpDescription = new ($T09())();
        buttonImpDescription.ButtonDesc = this.$lkey$g5__2.MemberwiseClone();
        buttonImpDescription.PollButton = false;
        this.$l$g2__current = buttonImpDescription.MemberwiseClone();
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lget_ButtonImpDesc$gd__13_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lget_ButtonImpDesc$gd__ = this;
    } else {
      $lget_ButtonImpDesc$gd__ = new $thisType(0);
      $lget_ButtonImpDesc$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lget_ButtonImpDesc$gd__;
  }; 

  function $lget_ButtonImpDesc$gd__13_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_ButtonImpDescription$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator();
  }; 

  function $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lget_ButtonImpDesc$gd__13_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if ((num === -3) || (num === 1)) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp+<get_ButtonImpDesc>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lget_ButtonImpDesc$gd__13__ctor
    )
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lget_ButtonImpDesc$gd__13_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lget_ButtonImpDesc$gd__13_MoveNext
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Engine.Common.ButtonImpDescription$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])), 
      $lget_ButtonImpDesc$gd__13_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.ButtonImpDescription$g.get_Current", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")), 
      $lget_ButtonImpDesc$gd__13_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_ButtonImpDescription$g_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.IEnumerator")), 
      $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lget_ButtonImpDesc$gd__13_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lget_ButtonImpDesc$gd__13_System_IDisposable_Dispose
    )
      .Overrides($asm15.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.KeyboardDeviceImp"));

    $.Field({Static:false, Public:false}, "$l$gs__1", $asm15.TypeRef("System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription")]));

    $.Field({Static:false, Public:false}, "$lkey$g5__2", $asm03.TypeRef("Fusee.Engine.Common.ButtonDescription"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.ButtonImpDescription$g.Current", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), 
      /* 1 */ $asm15.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), 
      /* 3 */ $asm15.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp */ 

(function MouseDeviceImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonImpDescription)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonDescription)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisImpDescription)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDescription)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisNature)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisBoundedType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.Delegate)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.Threading.Interlocked)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp_$lget_AxisImpDesc$gd__18)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm05.Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp_$lget_ButtonImpDesc$gd__22)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm03.Fusee.Engine.Common.DeviceCategory)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm15.System.InvalidOperationException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.Fusee.Math.Core.float2)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.InvalidOperationException"), [$asm15.TypeRef("System.String")]))) ();
  };


  function MouseDeviceImp__ctor (canvas) {
    this._currentMouseWheel = 0;
    this._canvas = canvas;
    this.ConnectCanvasEvents();
    var buttonImpDescription = new ($T01())();
    var buttonDesc = new ($T02())();
    buttonDesc.Name = "Left";
    buttonDesc.Id = 1;
    buttonImpDescription.ButtonDesc = buttonDesc.MemberwiseClone();
    buttonImpDescription.PollButton = false;
    this._btnLeftDesc = buttonImpDescription.MemberwiseClone();
    buttonImpDescription = new ($T01())();
    buttonDesc = new ($T02())();
    buttonDesc.Name = "Middle";
    buttonDesc.Id = 4;
    buttonImpDescription.ButtonDesc = buttonDesc.MemberwiseClone();
    buttonImpDescription.PollButton = false;
    this._btnMiddleDesc = buttonImpDescription.MemberwiseClone();
    buttonImpDescription = new ($T01())();
    buttonDesc = new ($T02())();
    buttonDesc.Name = "Right";
    buttonDesc.Id = 2;
    buttonImpDescription.ButtonDesc = buttonDesc.MemberwiseClone();
    buttonImpDescription.PollButton = false;
    this._btnRightDesc = buttonImpDescription.MemberwiseClone();
    var axisImpDescription = new ($T03())();
    var axisDesc = new ($T04())();
    axisDesc.Name = "X";
    axisDesc.Id = 1;
    axisDesc.Direction = $T05().X;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().OtherAxis;
    axisDesc.MinValueOrAxis = 4;
    axisDesc.MaxValueOrAxis = 5;
    axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
    axisImpDescription.PollAxis = false;
    this._mouseXDesc = axisImpDescription.MemberwiseClone();
    axisImpDescription = new ($T03())();
    axisDesc = new ($T04())();
    axisDesc.Name = "Y";
    axisDesc.Id = 2;
    axisDesc.Direction = $T05().Y;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().OtherAxis;
    axisDesc.MinValueOrAxis = 6;
    axisDesc.MaxValueOrAxis = 7;
    axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
    axisImpDescription.PollAxis = false;
    this._mouseYDesc = axisImpDescription.MemberwiseClone();
  }; 

  function MouseDeviceImp_add_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T08())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function MouseDeviceImp_add_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Combine(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 


  function MouseDeviceImp_get_AxesCount () {
    return 7;
  }; 

  function MouseDeviceImp_get_AxisImpDesc () {
    var $lget_AxisImpDesc$gd__ = new ($T0C())(-2);
    $lget_AxisImpDesc$gd__.$l$g4__this = this;
    return $lget_AxisImpDesc$gd__;
  }; 

  function MouseDeviceImp_get_ButtonCount () {
    return 3;
  }; 

  function MouseDeviceImp_get_ButtonImpDesc () {
    var $lget_ButtonImpDesc$gd__ = new ($T0D())(-2);
    $lget_ButtonImpDesc$gd__.$l$g4__this = this;
    return $lget_ButtonImpDesc$gd__;
  }; 

  function MouseDeviceImp_get_Category () {
    return $T0E().Mouse;
  }; 

  function MouseDeviceImp_get_Desc () {
    return "Web browser standard Mouse implementation.";
  }; 

  function MouseDeviceImp_get_Id () {
    return (JSIL.GetType(this)).get_FullName();
  }; 

  function MouseDeviceImp_GetAxis (iAxisId) {
    switch (iAxisId) {
      case 1: 
      case 2: 
        throw $S00().Construct("MouseAxes.X/Y are event-based axes. Do not call GetAxis!");

      case 3: 
        var result = +this._currentMouseWheel;
        break;

      case 4: 
        result = 0;
        break;

      case 5: 
        result = +this.GetWindowWidth();
        break;

      case 6: 
        result = 0;
        break;

      case 7: 
        result = +this.GetWindowHeight();
        break;

      default: 
        throw $S00().Construct($T13().Format("Unknown axis {0}. Cannot get value for unknown axis.", JSIL.Array.New($T00(), [$T10().$Box(iAxisId)])));

    }
    return result;
  }; 

  function MouseDeviceImp_GetButton (iButtonId) {
    throw $S00().Construct($T13().Format("Unsopported axis {0}. This device does not support any to-be polled axes at all.", JSIL.Array.New($T00(), [$T10().$Box(iButtonId)])));
  }; 



  function MouseDeviceImp_OnCanvasMouseDown (button) {
    switch (button) {
      case 0: 
        var expr_20 = this.ButtonValueChanged;
        if (expr_20 !== null) {
          var expr_2C = new ($T14())();
          expr_2C.Button = this._btnLeftDesc.ButtonDesc.MemberwiseClone();
          expr_2C.Pressed = true;
          expr_20(this, expr_2C);
        }
        break;

      case 1: 
        var expr_52 = this.ButtonValueChanged;
        if (expr_52 !== null) {
          var expr_5E = new ($T14())();
          expr_5E.Button = this._btnMiddleDesc.ButtonDesc.MemberwiseClone();
          expr_5E.Pressed = true;
          expr_52(this, expr_5E);
        }
        break;

      case 2: 
        var expr_84 = this.ButtonValueChanged;
        if (expr_84 !== null) {
          var expr_90 = new ($T14())();
          expr_90.Button = this._btnRightDesc.ButtonDesc.MemberwiseClone();
          expr_90.Pressed = true;
          expr_84(this, expr_90);
        }
        break;

    }
  }; 

  function MouseDeviceImp_OnCanvasMouseMove (mousePos) {
    if (this.AxisValueChanged !== null) {
      var arg_39_0 = this.AxisValueChanged;
      var expr_1C = new ($T16())();
      expr_1C.Axis = this._mouseXDesc.AxisDesc.MemberwiseClone();
      expr_1C.Value = +mousePos.x;
      arg_39_0(this, expr_1C);
      var arg_68_0 = this.AxisValueChanged;
      var expr_4B = new ($T16())();
      expr_4B.Axis = this._mouseYDesc.AxisDesc.MemberwiseClone();
      expr_4B.Value = +mousePos.y;
      arg_68_0(this, expr_4B);
    }
  }; 

  function MouseDeviceImp_OnCanvasMouseUp (button) {
    switch (button) {
      case 0: 
        var expr_20 = this.ButtonValueChanged;
        if (expr_20 !== null) {
          var expr_2C = new ($T14())();
          expr_2C.Button = this._btnLeftDesc.ButtonDesc.MemberwiseClone();
          expr_2C.Pressed = false;
          expr_20(this, expr_2C);
        }
        break;

      case 1: 
        var expr_52 = this.ButtonValueChanged;
        if (expr_52 !== null) {
          var expr_5E = new ($T14())();
          expr_5E.Button = this._btnMiddleDesc.ButtonDesc.MemberwiseClone();
          expr_5E.Pressed = false;
          expr_52(this, expr_5E);
        }
        break;

      case 2: 
        var expr_84 = this.ButtonValueChanged;
        if (expr_84 !== null) {
          var expr_90 = new ($T14())();
          expr_90.Button = this._btnRightDesc.ButtonDesc.MemberwiseClone();
          expr_90.Pressed = false;
          expr_84(this, expr_90);
        }
        break;

    }
  }; 

  function MouseDeviceImp_OnCanvasMouseWheel (wheelDelta) {
    this._currentMouseWheel = +this._currentMouseWheel + (+wheelDelta * 0.005);
  }; 

  function MouseDeviceImp_remove_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T08())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function MouseDeviceImp_remove_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T09().Remove(eventHandler2, value);
      eventHandler = $T0A().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      MouseDeviceImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      MouseDeviceImp_add_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      MouseDeviceImp_add_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConnectCanvasEvents", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxesCount", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseDeviceImp_get_AxesCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxisImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])), 
      MouseDeviceImp_get_AxisImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonCount", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseDeviceImp_get_ButtonCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])), 
      MouseDeviceImp_get_ButtonImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Category", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.DeviceCategory")), 
      MouseDeviceImp_get_Category
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Desc", 
      JSIL.MethodSignature.Return($.String), 
      MouseDeviceImp_get_Desc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String), 
      MouseDeviceImp_get_Id
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      MouseDeviceImp_GetAxis
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetButton", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      MouseDeviceImp_GetButton
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWindowHeight", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWindowWidth", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.Method({Static:false, Public:false}, "OnCanvasMouseDown", 
      JSIL.MethodSignature.Action($.Int32), 
      MouseDeviceImp_OnCanvasMouseDown
    );

    $.Method({Static:false, Public:false}, "OnCanvasMouseMove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Fusee.Math.Core.float2")), 
      MouseDeviceImp_OnCanvasMouseMove
    );

    $.Method({Static:false, Public:false}, "OnCanvasMouseUp", 
      JSIL.MethodSignature.Action($.Int32), 
      MouseDeviceImp_OnCanvasMouseUp
    );

    $.Method({Static:false, Public:false}, "OnCanvasMouseWheel", 
      JSIL.MethodSignature.Action($.Single), 
      MouseDeviceImp_OnCanvasMouseWheel
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      MouseDeviceImp_remove_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      MouseDeviceImp_remove_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_currentMouseWheel", $.Single);

    $.Field({Static:false, Public:false}, "_canvas", $.Object);

    $.Field({Static:false, Public:false}, "_btnLeftDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Field({Static:false, Public:false}, "_btnRightDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Field({Static:false, Public:false}, "_btnMiddleDesc", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Field({Static:false, Public:false}, "_mouseXDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Field({Static:false, Public:false}, "_mouseYDesc", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Field({Static:false, Public:false}, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "AxesCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AxisImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Category", $asm03.TypeRef("Fusee.Engine.Common.DeviceCategory"));

    $.Property({Static:false, Public:true , Virtual:true }, "Desc", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Event({Static:false, Public:true , Virtual:true }, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp+<get_AxisImpDesc>d__18 */ 

(function $lget_AxisImpDesc$gd__18$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisImpDescription)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDescription)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisNature)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisBoundedType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotSupportedException"), null))) ();
  };


  function $lget_AxisImpDesc$gd__18__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lget_AxisImpDesc$gd__18_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._mouseXDesc.MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._mouseYDesc.MemberwiseClone();
        this.$l$g1__state = 2;
        return true;

      case 2: 
        this.$l$g1__state = -1;
        var axisImpDescription = new ($T02())();
        var axisDesc = new ($T03())();
        axisDesc.Name = "Wheel";
        axisDesc.Id = 3;
        axisDesc.Direction = $T04().Z;
        axisDesc.Nature = $T05().Position;
        axisDesc.Bounded = $T06().Unbound;
        axisDesc.MinValueOrAxis = NaN;
        axisDesc.MaxValueOrAxis = NaN;
        axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
        axisImpDescription.PollAxis = true;
        this.$l$g2__current = axisImpDescription.MemberwiseClone();
        this.$l$g1__state = 3;
        return true;

      case 3: 
        this.$l$g1__state = -1;
        axisImpDescription = new ($T02())();
        axisDesc = new ($T03())();
        axisDesc.Name = "MinX";
        axisDesc.Id = 4;
        axisDesc.Direction = $T04().X;
        axisDesc.Nature = $T05().Position;
        axisDesc.Bounded = $T06().Unbound;
        axisDesc.MinValueOrAxis = NaN;
        axisDesc.MaxValueOrAxis = NaN;
        axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
        axisImpDescription.PollAxis = true;
        this.$l$g2__current = axisImpDescription.MemberwiseClone();
        this.$l$g1__state = 4;
        return true;

      case 4: 
        this.$l$g1__state = -1;
        axisImpDescription = new ($T02())();
        axisDesc = new ($T03())();
        axisDesc.Name = "MaxX";
        axisDesc.Id = 5;
        axisDesc.Direction = $T04().X;
        axisDesc.Nature = $T05().Position;
        axisDesc.Bounded = $T06().Unbound;
        axisDesc.MinValueOrAxis = NaN;
        axisDesc.MaxValueOrAxis = NaN;
        axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
        axisImpDescription.PollAxis = true;
        this.$l$g2__current = axisImpDescription.MemberwiseClone();
        this.$l$g1__state = 5;
        return true;

      case 5: 
        this.$l$g1__state = -1;
        axisImpDescription = new ($T02())();
        axisDesc = new ($T03())();
        axisDesc.Name = "MinY";
        axisDesc.Id = 6;
        axisDesc.Direction = $T04().Y;
        axisDesc.Nature = $T05().Position;
        axisDesc.Bounded = $T06().Unbound;
        axisDesc.MinValueOrAxis = NaN;
        axisDesc.MaxValueOrAxis = NaN;
        axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
        axisImpDescription.PollAxis = true;
        this.$l$g2__current = axisImpDescription.MemberwiseClone();
        this.$l$g1__state = 6;
        return true;

      case 6: 
        this.$l$g1__state = -1;
        axisImpDescription = new ($T02())();
        axisDesc = new ($T03())();
        axisDesc.Name = "MaxY";
        axisDesc.Id = 7;
        axisDesc.Direction = $T04().Y;
        axisDesc.Nature = $T05().Position;
        axisDesc.Bounded = $T06().Unbound;
        axisDesc.MinValueOrAxis = NaN;
        axisDesc.MaxValueOrAxis = NaN;
        axisImpDescription.AxisDesc = axisDesc.MemberwiseClone();
        axisImpDescription.PollAxis = true;
        this.$l$g2__current = axisImpDescription.MemberwiseClone();
        this.$l$g1__state = 7;
        return true;

      case 7: 
        this.$l$g1__state = -1;
        return false;

      default: 
        return false;

    }
  }; 

  function $lget_AxisImpDesc$gd__18_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lget_AxisImpDesc$gd__ = this;
    } else {
      $lget_AxisImpDesc$gd__ = new $thisType(0);
      $lget_AxisImpDesc$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lget_AxisImpDesc$gd__;
  }; 

  function $lget_AxisImpDesc$gd__18_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_AxisImpDescription$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_AxisImpDesc$gd__18_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator();
  }; 

  function $lget_AxisImpDesc$gd__18_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_AxisImpDesc$gd__18_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lget_AxisImpDesc$gd__18_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp+<get_AxisImpDesc>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lget_AxisImpDesc$gd__18__ctor
    )
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lget_AxisImpDesc$gd__18_MoveNext
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Engine.Common.AxisImpDescription$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])), 
      $lget_AxisImpDesc$gd__18_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_AxisImpDescription$g_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.AxisImpDescription$g.get_Current", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")), 
      $lget_AxisImpDesc$gd__18_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_AxisImpDescription$g_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.IEnumerator")), 
      $lget_AxisImpDesc$gd__18_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lget_AxisImpDesc$gd__18_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lget_AxisImpDesc$gd__18_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lget_AxisImpDesc$gd__18_System_IDisposable_Dispose
    )
      .Overrides($asm15.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.AxisImpDescription$g.Current", $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), 
      /* 1 */ $asm15.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), 
      /* 3 */ $asm15.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp+<get_ButtonImpDesc>d__22 */ 

(function $lget_ButtonImpDesc$gd__22$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotSupportedException"), null))) ();
  };


  function $lget_ButtonImpDesc$gd__22__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lget_ButtonImpDesc$gd__22_MoveNext () {
    switch (this.$l$g1__state) {
      case 0: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._btnLeftDesc.MemberwiseClone();
        this.$l$g1__state = 1;
        return true;

      case 1: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._btnMiddleDesc.MemberwiseClone();
        this.$l$g1__state = 2;
        return true;

      case 2: 
        this.$l$g1__state = -1;
        this.$l$g2__current = this.$l$g4__this._btnRightDesc.MemberwiseClone();
        this.$l$g1__state = 3;
        return true;

      case 3: 
        this.$l$g1__state = -1;
        return false;

      default: 
        return false;

    }
  }; 

  function $lget_ButtonImpDesc$gd__22_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lget_ButtonImpDesc$gd__ = this;
    } else {
      $lget_ButtonImpDesc$gd__ = new $thisType(0);
      $lget_ButtonImpDesc$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lget_ButtonImpDesc$gd__;
  }; 

  function $lget_ButtonImpDesc$gd__22_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_ButtonImpDescription$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator();
  }; 

  function $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lget_ButtonImpDesc$gd__22_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp+<get_ButtonImpDesc>d__22", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lget_ButtonImpDesc$gd__22__ctor
    )
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lget_ButtonImpDesc$gd__22_MoveNext
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lFusee.Engine.Common.ButtonImpDescription$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])), 
      $lget_ButtonImpDesc$gd__22_System_Collections_Generic_IEnumerable$lFusee_Engine_Common_ButtonImpDescription$g_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.ButtonImpDescription$g.get_Current", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")), 
      $lget_ButtonImpDesc$gd__22_System_Collections_Generic_IEnumerator$lFusee_Engine_Common_ButtonImpDescription$g_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.IEnumerator")), 
      $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lget_ButtonImpDesc$gd__22_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm15.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lget_ButtonImpDesc$gd__22_System_IDisposable_Dispose
    )
      .Overrides($asm15.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm05.TypeRef("Fusee.Engine.Imp.Graphics.Web.MouseDeviceImp"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lFusee.Engine.Common.ButtonImpDescription$g.Current", $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), 
      /* 1 */ $asm15.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm15.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), 
      /* 3 */ $asm15.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm15.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Fusee.Engine.Imp.Graphics.Web.TouchDeviceImp */ 

(function TouchDeviceImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.AxisImpDescription))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Int32, $asm15.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisImpDescription)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDescription)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisDirection)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisNature)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisBoundedType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.Collections.Generic.Dictionary$b2.Of($asm15.System.Int32, $asm03.Fusee.Engine.Common.ButtonImpDescription))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonImpDescription)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonDescription)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.AxisValueChangedArgs))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm15.System.Delegate)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm15.System.Threading.Interlocked)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ButtonValueChangedArgs))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.DeviceCategory)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm15.System.Type)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm12.System.Linq.Enumerable)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm15.System.InvalidOperationException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm03.Fusee.Engine.Common.ButtonValueChangedArgs)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm03.Fusee.Engine.Common.AxisValueChangedArgs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Int32"), $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]), [$asm15.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Int32"), $asm15.TypeRef("System.Int32")]), [$asm15.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$asm15.TypeRef("System.Int32"), $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]), [$asm15.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm0E.TypeRef("System.Boolean"), [$asm0E.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.InvalidOperationException"), [$asm15.TypeRef("System.String")]))) ();
  };


  function TouchDeviceImp__ctor (canvas) {
    this._nTouchPointsSupported = 5;
    this._canvas = canvas;
    this.ConnectCanvasEvents();
    this._tpAxisDescs = $S00().Construct(((Math.imul(this._nTouchPointsSupported, 2) + 5) | 0));
    this._activeTouchpoints = $S01().Construct(this._nTouchPointsSupported);
    var arg_97_0 = this._tpAxisDescs;
    var value = new ($T03())();
    var axisDesc = new ($T04())();
    axisDesc.Name = "Active Touchpoints";
    axisDesc.Id = 1;
    axisDesc.Direction = $T05().Unknown;
    axisDesc.Nature = $T06().Unknown;
    axisDesc.Bounded = $T07().Unbound;
    value.AxisDesc = axisDesc.MemberwiseClone();
    value.PollAxis = true;
    arg_97_0.set_Item(1, value.MemberwiseClone());
    var arg_109_0 = this._tpAxisDescs;
    value = new ($T03())();
    axisDesc = new ($T04())();
    axisDesc.Name = "MinX";
    axisDesc.Id = 2;
    axisDesc.Direction = $T05().X;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().Unbound;
    axisDesc.MinValueOrAxis = NaN;
    axisDesc.MaxValueOrAxis = NaN;
    value.AxisDesc = axisDesc.MemberwiseClone();
    value.PollAxis = true;
    arg_109_0.set_Item(2, value.MemberwiseClone());
    var arg_17B_0 = this._tpAxisDescs;
    value = new ($T03())();
    axisDesc = new ($T04())();
    axisDesc.Name = "MaxX";
    axisDesc.Id = 3;
    axisDesc.Direction = $T05().X;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().Unbound;
    axisDesc.MinValueOrAxis = NaN;
    axisDesc.MaxValueOrAxis = NaN;
    value.AxisDesc = axisDesc.MemberwiseClone();
    value.PollAxis = true;
    arg_17B_0.set_Item(3, value.MemberwiseClone());
    var arg_1ED_0 = this._tpAxisDescs;
    value = new ($T03())();
    axisDesc = new ($T04())();
    axisDesc.Name = "MinY";
    axisDesc.Id = 4;
    axisDesc.Direction = $T05().Y;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().Unbound;
    axisDesc.MinValueOrAxis = NaN;
    axisDesc.MaxValueOrAxis = NaN;
    value.AxisDesc = axisDesc.MemberwiseClone();
    value.PollAxis = true;
    arg_1ED_0.set_Item(4, value.MemberwiseClone());
    var arg_25F_0 = this._tpAxisDescs;
    value = new ($T03())();
    axisDesc = new ($T04())();
    axisDesc.Name = "MaxY";
    axisDesc.Id = 5;
    axisDesc.Direction = $T05().Y;
    axisDesc.Nature = $T06().Position;
    axisDesc.Bounded = $T07().Unbound;
    axisDesc.MinValueOrAxis = NaN;
    axisDesc.MaxValueOrAxis = NaN;
    value.AxisDesc = axisDesc.MemberwiseClone();
    value.PollAxis = true;
    arg_25F_0.set_Item(5, value.MemberwiseClone());

    for (var i = 0; i < (this._nTouchPointsSupported | 0); i = ((i + 1) | 0)) {
      var id = ((Math.imul(2, i) + 6) | 0);
      var arg_2F3_0 = this._tpAxisDescs;
      var arg_2F3_1 = id;
      value = new ($T03())();
      axisDesc = new ($T04())();
      axisDesc.Name = $T09().Format("Touchpoint {0} X", JSIL.Array.New($T00(), [$T08().$Box(id)]));
      axisDesc.Id = id;
      axisDesc.Direction = $T05().X;
      axisDesc.Nature = $T06().Position;
      axisDesc.Bounded = $T07().OtherAxis;
      axisDesc.MinValueOrAxis = 2;
      axisDesc.MaxValueOrAxis = 3;
      value.AxisDesc = axisDesc.MemberwiseClone();
      value.PollAxis = false;
      arg_2F3_0.set_Item(arg_2F3_1, value.MemberwiseClone());
      id = ((id + 1) | 0);
      var arg_37D_0 = this._tpAxisDescs;
      var arg_37D_1 = id;
      value = new ($T03())();
      axisDesc = new ($T04())();
      axisDesc.Name = $T09().Format("Touchpoint {0} Y", JSIL.Array.New($T00(), [$T08().$Box(id)]));
      axisDesc.Id = id;
      axisDesc.Direction = $T05().Y;
      axisDesc.Nature = $T06().Position;
      axisDesc.Bounded = $T07().OtherAxis;
      axisDesc.MinValueOrAxis = 4;
      axisDesc.MaxValueOrAxis = 5;
      value.AxisDesc = axisDesc.MemberwiseClone();
      value.PollAxis = false;
      arg_37D_0.set_Item(arg_37D_1, value.MemberwiseClone());
    }
    this._tpButtonDescs = $S02().Construct(this._nTouchPointsSupported);

    for (var j = 0; j < (this._nTouchPointsSupported | 0); j = ((j + 1) | 0)) {
      var id2 = ((j + 1) | 0);
      var arg_40C_0 = this._tpButtonDescs;
      var value2 = new ($T0B())();
      var buttonDesc = new ($T0C())();
      buttonDesc.Name = $T09().Format("Touchpoint {0} Active", JSIL.Array.New($T00(), [$T08().$Box(j)]));
      buttonDesc.Id = id2;
      value2.ButtonDesc = buttonDesc.MemberwiseClone();
      value2.PollButton = false;
      arg_40C_0.set_Item(id2, value2.MemberwiseClone());
    }
  }; 

  function TouchDeviceImp_add_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0E().Combine(eventHandler2, value);
      eventHandler = $T0F().CompareExchange$b1($T0D())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function TouchDeviceImp_add_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0E().Combine(eventHandler2, value);
      eventHandler = $T0F().CompareExchange$b1($T10())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 


  function TouchDeviceImp_get_AxesCount () {
    return ((Math.imul(this._nTouchPointsSupported, 2) + 5) | 0);
  }; 

  function TouchDeviceImp_get_AxisImpDesc () {
    return (this._tpAxisDescs).get_Values();
  }; 

  function TouchDeviceImp_get_ButtonCount () {
    return this._nTouchPointsSupported;
  }; 

  function TouchDeviceImp_get_ButtonImpDesc () {
    return (this._tpButtonDescs).get_Values();
  }; 

  function TouchDeviceImp_get_Category () {
    return $T11().Touch;
  }; 

  function TouchDeviceImp_get_Desc () {
    return "Web browser standard Touch implementation.";
  }; 

  function TouchDeviceImp_get_Id () {
    return (JSIL.GetType(this)).get_FullName();
  }; 

  function TouchDeviceImp_get_NextFreeTouchIndex () {

    for (var i = 0; i < (this._nTouchPointsSupported | 0); i = ((i + 1) | 0)) {
      var flag = !$S03().CallStatic($T14(), "Contains$b1", [$asm15.System.Int32], (this._activeTouchpoints).get_Values(), i);
      if (flag) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  }; 

  function TouchDeviceImp_GetAxis (iAxisId) {
    switch (iAxisId) {
      case 1: 
        var result = +((this._activeTouchpoints).get_Count());
        break;

      case 2: 
        result = 0;
        break;

      case 3: 
        result = +this.GetWindowWidth();
        break;

      case 4: 
        result = 0;
        break;

      case 5: 
        result = +this.GetWindowHeight();
        break;

      default: 
        throw $S04().Construct($T09().Format("Unknown axis {0}.  Probably an event based axis or unsupported by this device.", JSIL.Array.New($T00(), [$T08().$Box(iAxisId)])));

    }
    return result;
  }; 

  function TouchDeviceImp_GetButton (iButtonId) {
    throw $S04().Construct($T09().Format("Unknown button id {0}. This device supports no pollable buttons at all.", JSIL.Array.New($T00(), [$T08().$Box(iButtonId)])));
  }; 



  function TouchDeviceImp_OnCanvasTouchCancel (id, x, y) {
    var inx = new JSIL.BoxedVariable(0);
    var flag = !(this._activeTouchpoints).TryGetValue(id, /* ref */ inx);
    if (!flag) {
      var expr_1E = this.ButtonValueChanged;
      if (expr_1E !== null) {
        var expr_2A = new ($T17())();
        expr_2A.Button = (this._tpButtonDescs).get_Item(((1 + (inx.get() | 0)) | 0)).ButtonDesc.MemberwiseClone();
        expr_2A.Pressed = false;
        expr_1E(this, expr_2A);
      }
      (this._activeTouchpoints).Remove(id);
    }
  }; 

  function TouchDeviceImp_OnCanvasTouchEnd (id, x, y) {
    var inx = new JSIL.BoxedVariable(0);
    var flag = !(this._activeTouchpoints).TryGetValue(id, /* ref */ inx);
    if (!flag) {
      var expr_21 = this.AxisValueChanged;
      if (expr_21 !== null) {
        var expr_2D = new ($T18())();
        expr_2D.Axis = (this._tpAxisDescs).get_Item(((6 + Math.imul(2, inx.get())) | 0)).AxisDesc.MemberwiseClone();
        expr_2D.Value = +x;
        expr_21(this, expr_2D);
      }
      var expr_5B = this.AxisValueChanged;
      if (expr_5B !== null) {
        var expr_67 = new ($T18())();
        expr_67.Axis = (this._tpAxisDescs).get_Item(((7 + Math.imul(2, inx.get())) | 0)).AxisDesc.MemberwiseClone();
        expr_67.Value = +y;
        expr_5B(this, expr_67);
      }
      var expr_95 = this.ButtonValueChanged;
      if (expr_95 !== null) {
        var expr_A1 = new ($T17())();
        expr_A1.Button = (this._tpButtonDescs).get_Item(((1 + (inx.get() | 0)) | 0)).ButtonDesc.MemberwiseClone();
        expr_A1.Pressed = false;
        expr_95(this, expr_A1);
      }
      (this._activeTouchpoints).Remove(id);
    }
  }; 

  function TouchDeviceImp_OnCanvasTouchMove (id, x, y) {
    var inx = new JSIL.BoxedVariable(0);
    var flag = !(this._activeTouchpoints).TryGetValue(id, /* ref */ inx);
    if (!flag) {
      var expr_1E = this.AxisValueChanged;
      if (expr_1E !== null) {
        var expr_2A = new ($T18())();
        expr_2A.Axis = (this._tpAxisDescs).get_Item(((6 + Math.imul(2, inx.get())) | 0)).AxisDesc.MemberwiseClone();
        expr_2A.Value = +x;
        expr_1E(this, expr_2A);
      }
      var expr_58 = this.AxisValueChanged;
      if (expr_58 !== null) {
        var expr_64 = new ($T18())();
        expr_64.Axis = (this._tpAxisDescs).get_Item(((7 + Math.imul(2, inx.get())) | 0)).AxisDesc.MemberwiseClone();
        expr_64.Value = +y;
        expr_58(this, expr_64);
      }
    }
  }; 

  function TouchDeviceImp_OnCanvasTouchStart (id, x, y) {
    var flag = (this._activeTouchpoints).ContainsKey(id);
    if (flag) {
      throw $S04().Construct($T09().Format("HTML Touch id {0} is already tracked. Cannot track another touchpoint using this id.", JSIL.Array.New($T00(), [$T08().$Box(id)])));
    }
    var inx = (this.get_NextFreeTouchIndex() | 0);
    if (inx >= 0) {
      (this._activeTouchpoints).set_Item(id, inx);
      var expr_58 = this.ButtonValueChanged;
      if (expr_58 !== null) {
        var expr_64 = new ($T17())();
        expr_64.Button = (this._tpButtonDescs).get_Item(((1 + inx) | 0)).ButtonDesc.MemberwiseClone();
        expr_64.Pressed = true;
        expr_58(this, expr_64);
      }
      var expr_90 = this.AxisValueChanged;
      if (expr_90 !== null) {
        var expr_9C = new ($T18())();
        expr_9C.Axis = (this._tpAxisDescs).get_Item(((6 + Math.imul(2, inx)) | 0)).AxisDesc.MemberwiseClone();
        expr_9C.Value = +x;
        expr_90(this, expr_9C);
      }
      var expr_CA = this.AxisValueChanged;
      if (expr_CA !== null) {
        var expr_D6 = new ($T18())();
        expr_D6.Axis = (this._tpAxisDescs).get_Item(((7 + Math.imul(2, inx)) | 0)).AxisDesc.MemberwiseClone();
        expr_D6.Value = +y;
        expr_CA(this, expr_D6);
      }
    }
  }; 

  function TouchDeviceImp_remove_AxisValueChanged (value) {
    var eventHandler = this.AxisValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0E().Remove(eventHandler2, value);
      eventHandler = $T0F().CompareExchange$b1($T0D())(/* ref */ new JSIL.MemberReference(this, "AxisValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function TouchDeviceImp_remove_ButtonValueChanged (value) {
    var eventHandler = this.ButtonValueChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0E().Remove(eventHandler2, value);
      eventHandler = $T0F().CompareExchange$b1($T10())(/* ref */ new JSIL.MemberReference(this, "ButtonValueChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.TouchDeviceImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      TouchDeviceImp__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      TouchDeviceImp_add_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      TouchDeviceImp_add_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConnectCanvasEvents", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxesCount", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDeviceImp_get_AxesCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AxisImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")])), 
      TouchDeviceImp_get_AxisImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonCount", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDeviceImp_get_ButtonCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ButtonImpDesc", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")])), 
      TouchDeviceImp_get_ButtonImpDesc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Category", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.DeviceCategory")), 
      TouchDeviceImp_get_Category
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Desc", 
      JSIL.MethodSignature.Return($.String), 
      TouchDeviceImp_get_Desc
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String), 
      TouchDeviceImp_get_Id
    );

    $.Method({Static:false, Public:false}, "get_NextFreeTouchIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchDeviceImp_get_NextFreeTouchIndex
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      TouchDeviceImp_GetAxis
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetButton", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      TouchDeviceImp_GetButton
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWindowHeight", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWindowWidth", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.Method({Static:false, Public:false}, "OnCanvasTouchCancel", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]), 
      TouchDeviceImp_OnCanvasTouchCancel
    );

    $.Method({Static:false, Public:false}, "OnCanvasTouchEnd", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]), 
      TouchDeviceImp_OnCanvasTouchEnd
    );

    $.Method({Static:false, Public:false}, "OnCanvasTouchMove", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]), 
      TouchDeviceImp_OnCanvasTouchMove
    );

    $.Method({Static:false, Public:false}, "OnCanvasTouchStart", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ]), 
      TouchDeviceImp_OnCanvasTouchStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_AxisValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")])), 
      TouchDeviceImp_remove_AxisValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_ButtonValueChanged", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")])), 
      TouchDeviceImp_remove_ButtonValueChanged
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_tpAxisDescs", $asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]));

    $.Field({Static:false, Public:false}, "_tpButtonDescs", $asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]));

    $.Field({Static:false, Public:false}, "_activeTouchpoints", $asm15.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32]));

    $.Field({Static:false, Public:false}, "_nTouchPointsSupported", $.Int32);

    $.Field({Static:false, Public:false}, "_canvas", $.Object);

    $.Field({Static:false, Public:false}, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:false}, "NextFreeTouchIndex", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Desc", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Category", $asm03.TypeRef("Fusee.Engine.Common.DeviceCategory"));

    $.Property({Static:false, Public:true , Virtual:true }, "AxesCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AxisImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisImpDescription")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ButtonImpDesc", $asm15.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonImpDescription")]));

    $.Event({Static:false, Public:true , Virtual:true }, "AxisValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.AxisValueChangedArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "ButtonValueChanged", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ButtonValueChangedArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IInputDeviceImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.MeshImp */ 

(function MeshImp$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.MeshImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateBoneIndices", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateBoneWeights", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateColors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateNormals", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateTriangles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateUVs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvalidateVertices", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$VerticesSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$NormalsSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$ColorsSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$TrianglesSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$UVsSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$BoneWeightsSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MeshImp$BoneIndicesSet$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "VerticesSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "NormalsSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "ColorsSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "TrianglesSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "UVsSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "BoneWeightsSet", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "BoneIndicesSet", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IMeshImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.RenderCanvasImp */ 

(function RenderCanvasImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.InitEventArgs))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Delegate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Threading.Interlocked)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.RenderEventArgs))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.EventHandler$b1.Of($asm03.Fusee.Engine.Common.ResizeEventArgs))) ();
  };



  function RenderCanvasImp_add_Init (value) {
    var eventHandler = this.Init;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Combine(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "Init"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_add_Render (value) {
    var eventHandler = this.Render;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Combine(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T03())(/* ref */ new JSIL.MemberReference(this, "Render"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_add_Resize (value) {
    var eventHandler = this.Resize;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Combine(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Resize"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_add_UnLoad (value) {
    var eventHandler = this.UnLoad;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Combine(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "UnLoad"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 




  function RenderCanvasImp_remove_Init (value) {
    var eventHandler = this.Init;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Remove(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "Init"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_remove_Render (value) {
    var eventHandler = this.Render;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Remove(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T03())(/* ref */ new JSIL.MemberReference(this, "Render"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_remove_Resize (value) {
    var eventHandler = this.Resize;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Remove(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Resize"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 

  function RenderCanvasImp_remove_UnLoad (value) {
    var eventHandler = this.UnLoad;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Remove(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "UnLoad"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  }; 




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.RenderCanvasImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_Init", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])), 
      RenderCanvasImp_add_Init
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_Render", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")])), 
      RenderCanvasImp_add_Render
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_Resize", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")])), 
      RenderCanvasImp_add_Resize
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "add_UnLoad", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])), 
      RenderCanvasImp_add_UnLoad
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloseGameWindow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenLink", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Present", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_Init", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])), 
      RenderCanvasImp_remove_Init
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_Render", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")])), 
      RenderCanvasImp_remove_Render
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_Resize", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")])), 
      RenderCanvasImp_remove_Resize
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "remove_UnLoad", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")])), 
      RenderCanvasImp_remove_UnLoad
    )
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCursor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.CursorType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetWindowSize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "RenderCanvasImp$Width$value", $.Int32)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderCanvasImp$Height$value", $.Int32)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderCanvasImp$Caption$value", $.String)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "RenderCanvasImp$DeltaTime$value", $.Single)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderCanvasImp$VerticalSync$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderCanvasImp$EnableBlending$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderCanvasImp$Fullscreen$value", $.Boolean)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "Init", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "UnLoad", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "Render", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "Resize", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")]))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "Width", $.Int32);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "Height", $.Int32);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "Caption", $.String);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "DeltaTime", $.Single);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "VerticalSync", $.Boolean);

    $.ExternalProperty({Static:false, Public:true }, "EnableBlending", $.Boolean);

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "Fullscreen", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "Init", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "UnLoad", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.InitEventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "Render", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.RenderEventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "Resize", $asm15.TypeRef("System.EventHandler`1", [$asm03.TypeRef("Fusee.Engine.Common.ResizeEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.RenderContextImp */ 

(function RenderContextImp$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Fusee.Engine.Common.ITexture)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Fusee.Engine.Common.WritableTextureFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.IO.Stream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.Exception)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Int64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm15.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm15.System.IO.MemoryStream)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm15.System.Byte))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm15.System.Byte)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.IO.BinaryReader)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm15.System.Text.StringBuilder)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm15.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm03.Fusee.Engine.Common.IMeshImp)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.IShaderParam)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.GBufferHandle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), [$asm15.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.IO.BinaryReader"), [$asm15.TypeRef("System.IO.Stream")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.Byte")]), $asm15.TypeRef("System.Int32"), 
        $asm15.TypeRef("System.Int32")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Text.StringBuilder"), [$asm15.TypeRef("System.String")]))) ();
  };





  function RenderContextImp_CopyDepthBufferFromDeferredBuffer (texture) {
    throw $S00().Construct();
  }; 






  function RenderContextImp_CreateWritableTexture$00 (width, height, textureFormat) {
    throw $S01().Construct("CreateWritableTexture not implmented!");
  }; 

  function RenderContextImp_CreateWritableTexture$01 () {
    throw $S01().Construct("CreateWritableTexture not implmented!");
  }; 




  function RenderContextImp_GetFileBytes (stream, $exception) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var bufsize = 1024;
          var length = $T06().Create(16777215, 16777215, 65535);
          try {
            length = stream.get_Length();
            var allInOne = $T06().op_LessThan(length, $T06().Create(16777215, 127, 0));
          } catch ($exception) {
            allInOne = false;
          }
          var flag = allInOne;
          if (flag) {
            bufsize = (length.ToNumber(4294967295, true) | 0);
          }
          var ms = null;

        $loop0: 
          while (true) {
            var buf = JSIL.Array.New($T0A(), bufsize);
            var count = (stream.Read(buf, 0, bufsize) | 0);
            var flag2 = allInOne && 
            (count === bufsize);
            if (flag2) {
              break $loop0;
            }
            var flag3 = ms === null;
            if (flag3) {
              ms = $S02().Construct();
            }
            allInOne = false;
            ms.Write(buf, 0, count);
            if (!(stream.get_CanRead() && (count > 0))) {
              $label0 = 1 /* goto Block_7 */ ;
              continue $labelgroup0;
            }
          }
          var result = buf;
          return result;

          $label0 = 1 /* goto Block_7 */ ;
          continue $labelgroup0;
        case 1: /* Block_7 */ 
          result = ms.ToArray();
          return result;

          break $labelgroup0;
      }
    }
  }; 


  function RenderContextImp_GetHeaderInfo (stream) {
    var buffer = JSIL.Array.New($T0A(), 8);
    var reader = $S03().Construct(stream);
    $S04().CallVirtual("Read", null, reader, buffer, 0, buffer.length);
    stream.set_Position($T06().Create(0, 0, 0));
    var sb = $S05().Construct();
    var array = buffer;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var b = (array[i] | 0);
      $S06().CallVirtual("Append", null, sb, $T0A().__Type__.__PublicInterface__.$ToString(b, "X2", null));
    }
    return sb.toString();
  }; 

  function RenderContextImp_GetImageType (stream) {
    var headerCode = (this.GetHeaderInfo(stream).toUpperCase());
    var flag = (System.String.StartsWith(headerCode, "89504E470D0A1A0A"));
    if (flag) {
      var result = "image/png";
    } else {
      var flag2 = (System.String.StartsWith(headerCode, "FFD8FFE0"));
      if (flag2) {
        result = "image/jpeg";
      } else {
        var flag3 = (System.String.StartsWith(headerCode, "424D"));
        if (flag3) {
          result = "image/bmp";
        } else {
          var flag4 = (System.String.StartsWith(headerCode, "474946"));
          if (flag4) {
            result = "image/gif";
          } else {
            var flag5 = (System.String.StartsWith(headerCode, "49492A"));
            if (flag5) {
              result = "image/tiff";
            } else {
              result = "";
            }
          }
        }
      }
    }
    return result;
  }; 









  function RenderContextImp_RemoveBoneIndices (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveBoneWeights (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveColors (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveNormals (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveTriangles (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveUVs (mesh) {
    throw $S00().Construct();
  }; 

  function RenderContextImp_RemoveVertices (mesh) {
    throw $S00().Construct();
  }; 


  function RenderContextImp_RenderDeferred (mr) {
    throw $S00().Construct();
  }; 




  function RenderContextImp_SetCubeMapRenderTarget (texture, position) {
    throw $S00().Construct();
  }; 



  function RenderContextImp_SetRenderTarget$02 (texture, deferredNormalPass) {
    throw $S00().Construct();
  }; 












  function RenderContextImp_SetShaderParamTexture$03 (param, texId, gHandle) {
    throw $S00().Construct();
  }; 








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.RenderContextImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IRenderCanvasImp"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ClearFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ColorMask", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyDepthBufferFromDeferredBuffer", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ITexture")), 
      RenderContextImp_CopyDepthBufferFromDeferredBuffer
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateFBO", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateImage", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Fusee.Base.Common.ColorUint")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateMeshImp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.IMeshImp"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateShader", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITexture"), [$asm00.TypeRef("Fusee.Base.Common.ImageData"), $.Boolean])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateWritableTexture", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.ITexture"), [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Fusee.Engine.Common.WritableTextureFormat")
        ]), 
      RenderContextImp_CreateWritableTexture$00
    );

    $.Method({Static:false, Public:true }, "CreateWritableTexture", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Fusee.Engine.Common.ITexture")), 
      RenderContextImp_CreateWritableTexture$01
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DebugLine", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Fusee.Math.Core.float3"), $asm07.TypeRef("Fusee.Math.Core.float3"), 
          $asm07.TypeRef("Fusee.Math.Core.float4")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FixTextKerning", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")]), [
          $asm03.TypeRef("Fusee.Engine.Common.IFont"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")]), 
          $.String, $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBufferContent", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.Rectangle"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")])
    );

    $.Method({Static:false, Public:true }, "GetFileBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm15.TypeRef("System.IO.Stream")]), 
      RenderContextImp_GetFileBytes
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHardwareCapabilities", 
      new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.HardwareCapability")])
    );

    $.Method({Static:false, Public:true }, "GetHeaderInfo", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.IO.Stream")]), 
      RenderContextImp_GetHeaderInfo
    );

    $.Method({Static:false, Public:true }, "GetImageType", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.IO.Stream")]), 
      RenderContextImp_GetImageType
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParamValue", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), $asm03.TypeRef("Fusee.Engine.Common.IShaderParam")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPixelColor", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPixelDepth", 
      new JSIL.MethodSignature($.Single, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRenderState", 
      new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Fusee.Engine.Common.RenderState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetShaderParam", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetShaderParamList", 
      new JSIL.MethodSignature($asm15.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("Fusee.Engine.Common.ShaderParamInfo")]), [$asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadFont", 
      new JSIL.MethodSignature($asm03.TypeRef("Fusee.Engine.Common.IFont"), [$asm15.TypeRef("System.IO.Stream"), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadImage", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [$asm15.TypeRef("System.IO.Stream")])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveBoneIndices", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveBoneIndices
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveBoneWeights", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveBoneWeights
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveColors", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveColors
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveNormals", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveNormals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveTriangles", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveTriangles
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveUVs", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveUVs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveVertices", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RemoveVertices
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Render", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp"))
    );

    $.Method({Static:false, Public:true }, "RenderDeferred", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IMeshImp")), 
      RenderContextImp_RenderDeferred
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoneIndices", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoneWeights", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetColors", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetCubeMapRenderTarget", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.ITexture"), $.Int32]), 
      RenderContextImp_SetCubeMapRenderTarget
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetNormals", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetRenderState", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.RenderState"), $.UInt32])
    );

    $.Method({Static:false, Public:true }, "SetRenderTarget", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.ITexture"), $.Boolean]), 
      RenderContextImp_SetRenderTarget$02
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetRenderTarget", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.ITexture"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShader", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParam1f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParamI", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParamMtx4fArray", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4x4")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParamfloat4x4", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float4x4")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParam4fArray", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float4")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParam4f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float4")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParam3f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float3")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParam2f", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm07.TypeRef("Fusee.Math.Core.float2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetShaderParamTexture", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetShaderParamTexture", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"), $asm03.TypeRef("Fusee.Engine.Common.ITexture"), 
          $asm03.TypeRef("Fusee.Engine.Common.GBufferHandle")
        ]), 
      RenderContextImp_SetShaderParamTexture$03
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTriangles", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt16])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetUVs", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float2")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetVertices", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Fusee.Math.Core.float3")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TextOnImage", 
      new JSIL.MethodSignature($asm00.TypeRef("Fusee.Base.Common.ImageData"), [
          $asm00.TypeRef("Fusee.Base.Common.ImageData"), $.String, 
          $.Single, $.String, 
          $.String, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UpdateTextureFromVideoStream", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Fusee.Engine.Common.IVideoStreamImp"), $asm03.TypeRef("Fusee.Engine.Common.ITexture")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UpdateTextureRegion", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Fusee.Engine.Common.ITexture"), $asm00.TypeRef("Fusee.Base.Common.ImageData"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Viewport", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "RenderContextImp$ClearColor$value", $asm07.TypeRef("Fusee.Math.Core.float4"))
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "RenderContextImp$ClearDepth$value", $.Single)
      .Attribute($asm15.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm15.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm15.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "ClearColor", $asm07.TypeRef("Fusee.Math.Core.float4"));

    $.ExternalProperty({Static:false, Public:true , Virtual:true }, "ClearDepth", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IRenderContextImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.ShaderParam */ 

(function ShaderParam$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.ShaderParam", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IShaderParam")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.ShaderProgramImp */ 

(function ShaderProgramImp$Members () {
  var $, $thisType;

  function ShaderProgramImp__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.ShaderProgramImp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShaderProgramImp__ctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.IShaderProgramImp")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Imp.Graphics.Web.Texture */ 

(function Texture$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Imp.Graphics.Web.Texture", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Fusee.Engine.Common.ITexture")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

