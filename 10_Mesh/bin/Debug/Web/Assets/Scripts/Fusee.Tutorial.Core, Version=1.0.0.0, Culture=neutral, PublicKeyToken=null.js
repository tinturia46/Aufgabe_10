/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm0A = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.Mesh */ 

(function Mesh$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.Fusee.Serialization.TransformComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.Fusee.Serialization.SceneContainer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Tutorial.Core.SimpleMeshes)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.Fusee.Math.Core.float4)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.Fusee.Math.Core.M)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.Fusee.Math.Core.float4x4)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm15.System.Math)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm15.System.Double)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float4"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"), [$asm08.TypeRef("Fusee.Serialization.SceneContainer")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm15.TypeRef("System.Single"), [$asm15.TypeRef("System.Single")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float4x4"), [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function Mesh__ctor () {
    this._camAngle = 0;
    $T00().prototype._ctor.call(this);
  }; 

  function Mesh_CreateScene () {
    var expr_07 = new ($T01())();
    expr_07.Rotation = $S00().Construct(0, 0, 0);
    expr_07.Scale = $S00().Construct(1, 1, 1);
    expr_07.Translation = $S00().Construct(0, 0, 0);
    this._baseTransform = expr_07;
    var expr_5F = new ($T03())();
    var expr_65 = $S01().Construct();
    var expr_6B = new ($T05())();
    var expr_71 = $S02().Construct();
    $S03().CallVirtual("Add", null, expr_71, this._baseTransform);
    var expr_84 = new ($T07())();
    var expr_8A = new ($T08())();
    expr_8A.Color = $S00().Construct(0.7, 0.7, 0.7);
    expr_84.Diffuse = expr_8A;
    var expr_AF = new ($T09())();
    expr_AF.Color = $S00().Construct(1, 1, 1);
    expr_AF.Shininess = 5;
    expr_84.Specular = expr_AF;
    $S03().CallVirtual("Add", null, expr_71, expr_84);
    $S03().CallVirtual("Add", null, expr_71, $T0A().CreateCylinder(5, 8, 10));
    expr_6B.Components = expr_71;
    $S04().CallVirtual("Add", null, expr_65, expr_6B);
    expr_5F.Children = expr_65;
    return expr_5F;
  }; 

  function Mesh_Init () {
    (this.RenderCanvas$RC$value.ClearColor = $S05().Construct(0.8, 0.9, 0.7, 1));
    this._scene = this.CreateScene();
    this._sceneRenderer = $S06().Construct(this._scene);
  }; 

  function Mesh_RenderAFrame () {
    this._baseTransform.Rotation = $S00().Construct(0, $S07().CallStatic($T0E(), "MinAngle", null, $T0F().get_TimeSinceStart()), 0);
    (this.RenderCanvas$RC$value).Clear($T10().$Flags("Color", "Depth"));
    (this.RenderCanvas$RC$value.View = $S08().CallStatic($T11(), "op_Multiply", null, 
        $T11().CreateTranslation($T0E().Sin(5 * +$T0F().get_TimeSinceStart()), 0, 40).MemberwiseClone(), 
        $T11().CreateRotationX(-Math.fround(Math.atan(0.375))).MemberwiseClone()
      ).MemberwiseClone());
    (this._sceneRenderer).Render(this.RenderCanvas$RC$value);
    this.Present();
  }; 

  function Mesh_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspectRatio = +((+(this.get_Width()) / +(this.get_Height())));
    var projection = $T11().CreatePerspectiveFieldOfView(0.7853982, aspectRatio, 1, 20000);
    (this.RenderCanvas$RC$value.Projection = projection.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.Mesh", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Mesh__ctor
    );

    $.Method({Static:false, Public:false}, "CreateScene", 
      JSIL.MethodSignature.Return($asm08.TypeRef("Fusee.Serialization.SceneContainer")), 
      Mesh_CreateScene
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Mesh_Init
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      Mesh_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      Mesh_Resize
    );

    $.Field({Static:false, Public:false}, "_scene", $asm08.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_camAngle", $.Single);

    $.Field({Static:false, Public:false}, "_baseTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SimpleMeshes */ 

(function SimpleMeshes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.NotImplementedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.Fusee.Serialization.MeshComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm15.System.UInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.Fusee.Math.Core.float2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.Fusee.Math.Core.AABBf)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm15.System.UInt16))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.Fusee.Math.Core.M)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float2"), [$asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$asm15.TypeRef("System.Single"), $asm07.TypeRef("Fusee.Math.Core.float3")]))) ();
  };


  function SimpleMeshes_CreateCone (radius, height, segments) {
    return $thisType.CreateConeFrustum(radius, 0, height, segments);
  }; 

  function SimpleMeshes_CreateConeFrustum (radiuslower, radiusupper, height, segments) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateCuboid (size) {
    var meshComponent = new ($T04())();
    meshComponent.Vertices = JSIL.Array.New($T03(), [$S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((-0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (-0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (-0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z)), $S01().Construct((0.5 * +size.x), (0.5 * +size.y), (0.5 * +size.z))]);
    meshComponent.Normals = JSIL.Array.New($T03(), [$S01().Construct(-1, 0, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, 0, -1), $S01().Construct(-1, 0, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, 0, 1), $S01().Construct(-1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 0, -1), $S01().Construct(-1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 0, 1), $S01().Construct(1, 0, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, 0, -1), $S01().Construct(1, 0, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, 0, 1), $S01().Construct(1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 0, -1), $S01().Construct(1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 0, 1)]);
    meshComponent.Triangles = JSIL.Array.New($T05(), [0, 6, 3, 3, 6, 9, 2, 14, 20, 2, 20, 8, 12, 15, 18, 15, 21, 18, 5, 11, 17, 17, 11, 23, 7, 22, 10, 7, 19, 22, 1, 4, 16, 1, 16, 13]);
    meshComponent.UVs = JSIL.Array.New($T06(), [$S02().Construct(1, 0), $S02().Construct(1, 0), $S02().Construct(0, 0), $S02().Construct(0, 0), $S02().Construct(1, 1), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 0), $S02().Construct(0, 1), $S02().Construct(0, 1), $S02().Construct(0, 1), $S02().Construct(1, 1), $S02().Construct(0, 0), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 0), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(0, 1), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(1, 1), $S02().Construct(1, 1), $S02().Construct(0, 1)]);
    meshComponent.BoundingBox = new ($T07())($S03().CallStatic($T03(), "op_Multiply", null, -0.5, size.MemberwiseClone()).MemberwiseClone(), $S03().CallStatic($T03(), "op_Multiply", null, 0.5, size.MemberwiseClone()).MemberwiseClone());
    return meshComponent;
  }; 

  function SimpleMeshes_CreateCylinder (radius, height, segments) {
    var verts = JSIL.Array.New($T03(), ((Math.imul(4, segments) + 2) | 0));
    var norms = JSIL.Array.New($T03(), ((Math.imul(4, segments) + 2) | 0));
    var tris = JSIL.Array.New($T05(), Math.imul(12, segments));
    var delta = +((6.28318548 / +segments));
    verts[0] = $S01().Construct(radius, (0.5 * +height), 0);
    norms[0] = $T03().UnitY.MemberwiseClone();
    verts[1] = $S01().Construct(radius, (0.5 * +height), 0);
    norms[1] = $T03().UnitX.MemberwiseClone();
    verts[2] = $S01().Construct(radius, (-0.5 * +height), 0);
    norms[2] = $T03().UnitX.MemberwiseClone();
    verts[3] = $S01().Construct(radius, (-0.5 * +height), 0);
    norms[3] = $T03().op_UnaryNegation($T03().UnitY.MemberwiseClone());
    verts[Math.imul(4, segments)] = $S01().Construct(0, (0.5 * +height), 0);
    norms[Math.imul(4, segments)] = $T03().UnitY.MemberwiseClone();
    verts[((Math.imul(4, segments) + 1) | 0)] = $S01().Construct(0, (-0.5 * +height), 0);
    norms[((Math.imul(4, segments) + 1) | 0)] = $T03().op_UnaryNegation($T03().UnitY.MemberwiseClone());

    for (var i = 1; i < (segments | 0); i = ((i + 1) | 0)) {
      verts[Math.imul(4, i)] = $S01().Construct((+radius * +$T0A().Cos(+i * delta)), (0.5 * +height), (+radius * +$T0A().Sin(+i * delta)));
      norms[Math.imul(4, i)] = $T03().UnitY.MemberwiseClone();
      verts[((Math.imul(4, i) + 1) | 0)] = $S01().Construct((+radius * +$T0A().Cos(+i * delta)), (0.5 * +height), (+radius * +$T0A().Sin(+i * delta)));
      norms[((Math.imul(4, i) + 1) | 0)] = $S01().Construct($T0A().Cos(+i * delta), 0, $T0A().Sin(+i * delta));
      verts[((Math.imul(4, i) + 2) | 0)] = $S01().Construct((+radius * +$T0A().Cos(+i * delta)), (-0.5 * +height), (+radius * +$T0A().Sin(+i * delta)));
      norms[((Math.imul(4, i) + 2) | 0)] = $S01().Construct($T0A().Cos(+i * delta), 0, $T0A().Sin(+i * delta));
      verts[((Math.imul(4, i) + 3) | 0)] = $S01().Construct((+radius * +$T0A().Cos(+i * delta)), (-0.5 * +height), (+radius * +$T0A().Sin(+i * delta)));
      norms[((Math.imul(4, i) + 3) | 0)] = $T03().op_UnaryNegation($T03().UnitY.MemberwiseClone());
      tris[Math.imul(12, ((i - 1) | 0))] = (Math.imul(4, ((i - 1) | 0)) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 1) | 0)] = (Math.imul(4, i) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 2) | 0)] = (Math.imul(4, segments) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 3) | 0)] = (((Math.imul(4, ((i - 1) | 0)) + 2) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 4) | 0)] = (((Math.imul(4, i) + 2) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 5) | 0)] = (((Math.imul(4, i) + 1) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 6) | 0)] = (((Math.imul(4, ((i - 1) | 0)) + 2) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 7) | 0)] = (((Math.imul(4, i) + 1) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 8) | 0)] = (((Math.imul(4, ((i - 1) | 0)) + 1) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 9) | 0)] = (((Math.imul(4, i) + 3) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 10) | 0)] = (((Math.imul(4, ((i - 1) | 0)) + 3) | 0) & 0xFFFF);
      tris[((Math.imul(12, ((i - 1) | 0)) + 11) | 0)] = (((Math.imul(4, segments) + 1) | 0) & 0xFFFF);
    }
    tris[((Math.imul(12, segments) - 1) | 0)] = (Math.imul(4, segments) & 0xFFFF);
    tris[((Math.imul(12, segments) - 2) | 0)] = 0;
    tris[((Math.imul(12, segments) - 3) | 0)] = (((Math.imul(4, segments) - 4) | 0) & 0xFFFF);
    tris[((Math.imul(12, segments) - 4) | 0)] = (((Math.imul(4, segments) - 3) | 0) & 0xFFFF);
    tris[((Math.imul(12, segments) - 5) | 0)] = 1;
    tris[((Math.imul(12, segments) - 6) | 0)] = (((Math.imul(4, segments) - 2) | 0) & 0xFFFF);
    tris[((Math.imul(12, segments) - 7) | 0)] = 1;
    tris[((Math.imul(12, segments) - 8) | 0)] = 2;
    tris[((Math.imul(12, segments) - 9) | 0)] = (((Math.imul(4, segments) - 2) | 0) & 0xFFFF);
    tris[((Math.imul(12, segments) - 10) | 0)] = (((Math.imul(4, segments) - 1) | 0) & 0xFFFF);
    tris[((Math.imul(12, segments) - 11) | 0)] = 3;
    tris[((Math.imul(12, segments) - 12) | 0)] = (((Math.imul(4, segments) + 1) | 0) & 0xFFFF);
    var expr_3ED = new ($T04())();
    expr_3ED.Vertices = verts;
    expr_3ED.Normals = norms;
    expr_3ED.Triangles = tris;
    return expr_3ED;
  }; 

  function SimpleMeshes_CreatePyramid (baselen, height) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTetrahedron (edgelen) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTorus (mainradius, segradius, segments, slices) {
    throw $S00().Construct();
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.SimpleMeshes", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CreateCone", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCone
    );

    $.Method({Static:true , Public:true }, "CreateConeFrustum", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Single, $.Int32
        ]), 
      SimpleMeshes_CreateConeFrustum
    );

    $.Method({Static:true , Public:true }, "CreateCuboid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$asm07.TypeRef("Fusee.Math.Core.float3")]), 
      SimpleMeshes_CreateCuboid
    );

    $.Method({Static:true , Public:true }, "CreateCylinder", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCylinder
    );

    $.Method({Static:true , Public:true }, "CreatePyramid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single, $.Single]), 
      SimpleMeshes_CreatePyramid
    );

    $.Method({Static:true , Public:true }, "CreateTetrahedron", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single]), 
      SimpleMeshes_CreateTetrahedron
    );

    $.Method({Static:true , Public:true }, "CreateTorus", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32, $.Int32
        ]), 
      SimpleMeshes_CreateTorus
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

