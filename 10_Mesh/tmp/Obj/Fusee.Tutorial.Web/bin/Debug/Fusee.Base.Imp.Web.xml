<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fusee.Base.Imp.Web</name>
    </assembly>
    <members>
        <member name="T:Fusee.Base.Imp.Web.FontImp">
            <summary>
            Font implementation for web builds using opentype.js.
            </summary>
        </member>
        <member name="T:Fusee.Base.Imp.Web.WebAssetProvider">
            <summary>
            Asset provider implemented by the existing Asset handling provided by JSIL (JSIL.Browser)
            </summary>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Base.Common.StreamAssetProvider" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.CanHandleType(System.Type)">
            <summary>
            Determines whether this instance can handle assets of the specified type (in general).
            </summary>
            <param name="type">The asset type  in question (such as typeof(ImageDate, Font, Sound, ...)).</param>
            <returns>
            true if this instance can handle the specified type. false otherwise.
            </returns>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.GetAsset(System.String,System.Type)">
            <summary>
            Retrieves the asset identified by the given string.
            </summary>
            <param name="id">The identifier string.</param>
            <param name="type">The type of the asset.</param>
            <returns>
            The asset, if this provider can akquire an asset with the given id and the given type. Ohterwise null.
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.CanGet(System.String,System.Type)">
            <summary>
            Determines whether this asset provider can get the specified asset without actually getting it.
            </summary>
            <param name="id">The identifier string.</param>
            <param name="type">The expected type of the asset.</param>
            <returns>
            true if this asset will produce a result. Otherwise false.
            </returns>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.CheckExists(System.String)">
            <summary>
            Checks the existance of the identified asset. Implement this on a given platform.
            </summary>
            <param name="id">The asset identifier.</param>
            <returns>Implementors should return true if a stream can be created.</returns>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.GetRawAsset(System.String)">
            <summary>
            Checks the existance of the identified asset. Implement this on a given platform.
            </summary>
            <param name="id">The asset identifier.</param>
            <returns>Implementors should return true if a stream can be created.</returns>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.BeginGetAsset(System.String,Fusee.Base.Common.GetCallback)">
            <summary>
            Asynchronous get method.
            </summary>
            <param name="id">The identifier string.</param>
            <param name="getCallback">Code to call when the loading is done.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            The design doesn't follow any of the standard .NET asynchronous patterns like APM, EAP, or TAP.
            It's close to JavaScript where you just provide an "onLoad" handler that's called when the object
            is retrieved and decoded. This is to enable AssetProviders to be implemented using standard
            JavaScript DOM objects like Image. See the article
            <a href="https://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx">Interop with Other Asynchronous Patterns and Types</a>
            to get an idea how to map this pattern, which is similar to APM (albeit simpler), to the currently en-vogue TAP (async/await) pattern.
            </remarks>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.RegisterTypeHandler(Fusee.Base.Common.AssetHandler)">
            <summary>
            Registers the given asset type handler.
            </summary>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <remarks>
            This method is rather for internal purposes. While an asset provider typically implements access to
            a given kind of asset storage, sometimes its hard to implement asset type handlers (decoders) capable of handling
            a certain type without knowing much about the contents (like images, etc).
            </remarks>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.WrapImage(System.Object)">
            <summary>
            Loads a new Bitmap-Object from the given stream.
            </summary>
            <param name="assetOb">JSIL asset object containing the image in a supported format (png, jpg).</param>
            <returns>An ImageData object with all necessary information.</returns>
        </member>
        <member name="M:Fusee.Base.Imp.Web.WebAssetProvider.WrapString(System.Object)">
            <summary>
            Wraps a string around the given asset object. The asset must contain text data.
            </summary>
            <param name="storage">JSIL asset object containing the image in a supported format (png, jpg).</param>
            <returns>A string with the asset's contents</returns>
        </member>
        <member name="T:Fusee.Base.Imp.Web.IOImp">
            <summary>
            Implementation (platform dependent) for IO related functionality not supported by portable libraries.
            </summary>
        </member>
        <member name="M:Fusee.Base.Imp.Web.IOImp.StreamFromFile(System.String,Fusee.Base.Common.FileMode)">
            <summary>
            Opens a file and returns its contents as a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="path">The path to the file to open.</param>
            <param name="mode">The file mode (read, write, append).</param>
            <returns>
            The stream specified by path.
            </returns>
        </member>
    </members>
</doc>
